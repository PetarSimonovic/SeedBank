{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$();\n\nimport '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { calculateAchievement, saveGarden, createPlant, loadBalloons } from '../functions';\nimport { Balloon } from '../gameObjects';\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Cloud, Balloons, SeedBox, IntroBalloons } from '../components'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  const [plants, setPlants] = useState(props.garden); //  an array of plant components\n\n  const [chosenSeed, setChosenseed] = useState(\"\"); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seeds, setSeeds] = useState(props.seeds); //  an array of the player's available seeds\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [balloons, setBalloons] = useState([]);\n  const [seedList, setSeedlist] = useState(false);\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed);\n      setChosenseed(\"\");\n      setPlants(prev => {\n        return [newPlant, ...prev];\n      });\n      updateSeeds(-1, chosenSeed);\n    }\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, type) => {\n    const updatedSeeds = [...seeds];\n    const index = updatedSeeds.findIndex(seed => seed.type === type);\n\n    if (index === -1) {\n      setSeeds(prev => {\n        return [{\n          type: type,\n          quantity: increment\n        }, ...prev];\n      });\n    } else {\n      updatedSeeds[index].quantity += increment;\n      setSeeds(updatedSeeds);\n    }\n\n    setSeedindex(null);\n  };\n\n  const checkAchievements = () => {\n    console.log(\"Checking achievements\");\n    console.log(plants.length);\n    const fivePlants = plants.length % 5;\n    const achievementCount = plants.length / 5; // how many multuples of five?\n\n    const startingSeeds = 2; // offset for the starting seeds\n\n    if (fivePlants === 0 && plants.length > 0 && seeds.length < achievementCount + startingSeeds) {\n      console.log(\"Achievement!\");\n      const newSeeds = calculateAchievement(seeds, props.id, plants.length);\n      console.log(\"New seeds is\");\n      console.log(newSeeds);\n      setSeeds(prev => newSeeds);\n    }\n  };\n\n  const toggleSeeds = () => {\n    setSeedlist(prevState => !prevState);\n    console.log(\"TOGGLE \" + seedList);\n  };\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\");\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds);\n    setSeedlist(seedList);\n    checkAchievements();\n    setSeeds(seeds);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"canvas\",\n      camera: {\n        position: [0, 2, 3.5]\n      },\n      children: [/*#__PURE__*/_jsxDEV(Camera, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: console.log(\"loading\"),\n        children: [/*#__PURE__*/_jsxDEV(Garden, {\n          sowPlant: sowPlant,\n          position: [0, 0, 0],\n          world: props.world,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }, this), plants, /*#__PURE__*/_jsxDEV(Sun, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Firmament, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Balloons, {\n          updateSeeds: updateSeeds,\n          userId: props.id,\n          today: props.today,\n          lastLogin: props.lastLogin,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Cloud, {\n          seeds: seeds,\n          chosenSeed: chosenSeed,\n          seedList: seedList,\n          position: [0, -0.8, -4],\n          selectSeed: selectSeed,\n          toggleSeeds: toggleSeeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(IntroBalloons, {\n        saveWorld: props.saveWorld,\n        newWorld: props.newWorld\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SeedBank, \"ng+Ema5uUa0rWdH0iCX21Ocs0YI=\");\n\n_c = SeedBank;\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["React","useState","useEffect","Suspense","calculateAchievement","saveGarden","createPlant","loadBalloons","Balloon","Canvas","Garden","Camera","Sun","World","Firmament","Cloud","Balloons","SeedBox","IntroBalloons","SeedBank","props","plants","setPlants","garden","chosenSeed","setChosenseed","seeds","setSeeds","seedIndex","setSeedindex","balloons","setBalloons","seedList","setSeedlist","sowPlant","event","newPlant","prev","updateSeeds","selectSeed","selectedSeed","index","seed","quantity","increment","type","updatedSeeds","findIndex","checkAchievements","console","log","length","fivePlants","achievementCount","startingSeeds","newSeeds","id","toggleSeeds","prevState","world","worldChosen","position","today","lastLogin","saveWorld","newWorld"],"mappings":"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","sourcesContent":["import '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { calculateAchievement, saveGarden, createPlant, loadBalloons } from '../functions'\nimport { Balloon } from '../gameObjects'\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Cloud, Balloons, SeedBox, IntroBalloons } from '../components';\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState([])\n  const [seedList, setSeedlist] = useState(false)\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(\"\")\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      updateSeeds(-1, chosenSeed)\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed)\n      setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, type) => {\n    const updatedSeeds = [...seeds]\n    const index = updatedSeeds.findIndex(seed => seed.type === type)\n    if (index === -1) {\n      setSeeds( (prev) => {return [{type: type, quantity: increment}, ...prev]})\n    } else {\n      updatedSeeds[index].quantity += increment\n      setSeeds(updatedSeeds)\n    }\n    setSeedindex(null)\n  }\n\n\n  const checkAchievements = () => {\n    console.log(\"Checking achievements\")\n    console.log(plants.length)\n    const fivePlants = plants.length % 5\n    const achievementCount = plants.length / 5 // how many multuples of five?\n    const startingSeeds = 2 // offset for the starting seeds\n    if (fivePlants === 0 && plants.length > 0 && seeds.length < (achievementCount + startingSeeds)) {\n      console.log(\"Achievement!\")\n      const newSeeds = calculateAchievement(seeds, props.id, plants.length)\n      console.log(\"New seeds is\")\n      console.log(newSeeds)\n      setSeeds(prev => newSeeds)\n\n    }\n  }\n\n  const toggleSeeds = () => {\n    setSeedlist((prevState) => !prevState)\n    console.log(\"TOGGLE \" + seedList)\n  }\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n    setSeedlist(seedList)\n    checkAchievements()\n    setSeeds(seeds)\n    });\n\n\n  return (\n  <div className=\"App\">\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n      <Garden\n      sowPlant={sowPlant}\n      position={[0, 0, 0]}\n      world={props.world}\n      seeds={seeds}\n       />\n      {plants}\n      <Sun />\n      <Firmament />\n     </Suspense>\n     {props.worldChosen ?\n       <>\n       <Balloons\n        updateSeeds={updateSeeds}\n        userId={props.id}\n        today={props.today}\n        lastLogin={props.lastLogin}\n        seeds={seeds} />\n       <Cloud\n        seeds={seeds}\n        chosenSeed={chosenSeed}\n        seedList={seedList}\n        position={[0, -0.8, -4]}\n        selectSeed={selectSeed}\n        toggleSeeds={toggleSeeds} />\n        </> :\n        < IntroBalloons\n          saveWorld={props.saveWorld}\n          newWorld={props.newWorld}\n        /> }\n    </Canvas>\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}