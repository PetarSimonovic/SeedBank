{"ast":null,"code":"export default function calculateAchievement(seeds) {\n  let unlockedSeed = true;\n  let newSeed = sample(seedBank);\n\n  if (seeds.length === seedBank.length) {\n    const newSeed = sample(seedBank);\n    unlockedSeed = false;\n  } else {\n    let duplicate = true;\n    let newSeed = {};\n\n    while (duplicate) {\n      duplicate = checkDuplicate(newSeed, seeds);\n      newSeed = sample(seedBank);\n    }\n  }\n\n  console.log(\"Chosen seed is\");\n  console.log(newSeed);\n  return updateSeeds(seeds, newSeed, unlockedSeed);\n}\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateSeeds(seeds, newSeed, existingSeed) {\n  const updatedSeeds = [];\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n    updatedSeeds.push(seed);\n  }\n\n  updatedSeeds.push(newSeed);\n  return updatedSeeds;\n}\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/calculateAchievement.js"],"names":["calculateAchievement","seeds","unlockedSeed","newSeed","sample","seedBank","length","duplicate","checkDuplicate","console","log","updateSeeds","array","Math","floor","random","index","seed","type","existingSeed","updatedSeeds","push","quantity"],"mappings":"AAAA,eAAe,SAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AAClD,MAAIC,YAAY,GAAG,IAAnB;AACA,MAAIC,OAAO,GAAGC,MAAM,CAACC,QAAD,CAApB;;AACA,MAAIJ,KAAK,CAACK,MAAN,KAAiBD,QAAQ,CAACC,MAA9B,EAAsC;AACpC,UAAMH,OAAO,GAAGC,MAAM,CAACC,QAAD,CAAtB;AACAH,IAAAA,YAAY,GAAG,KAAf;AACD,GAHD,MAGO;AACP,QAAIK,SAAS,GAAG,IAAhB;AACA,QAAIJ,OAAO,GAAG,EAAd;;AACA,WAAOI,SAAP,EAAkB;AAChBA,MAAAA,SAAS,GAAGC,cAAc,CAACL,OAAD,EAAUF,KAAV,CAA1B;AACAE,MAAAA,OAAO,GAAGC,MAAM,CAACC,QAAD,CAAhB;AACD;AACF;;AACCI,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACA,SAAOQ,WAAW,CAACV,KAAD,EAAQE,OAAR,EAAiBD,YAAjB,CAAlB;AACD;;AAGD,SAASE,MAAT,CAAgBQ,KAAhB,EAAuB;AACrB,SAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACN,MAAjC,CAAD,CAAZ;AACD;;AAED,SAASE,cAAT,CAAwBL,OAAxB,EAAiCF,KAAjC,EAAwC;AACtC,OAAK,IAAIe,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGf,KAAK,CAACK,MAAlC,EAA0CU,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGhB,KAAK,CAACe,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACC,IAAL,KAAcf,OAAO,CAACe,IAA1B,EAAgC;AAC9B,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED;;AAED,SAASP,WAAT,CAAqBV,KAArB,EAA4BE,OAA5B,EAAqCgB,YAArC,EAAmD;AACjD,QAAMC,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIJ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGf,KAAK,CAACK,MAAlC,EAA0CU,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGhB,KAAK,CAACe,KAAD,CAAlB;AACAI,IAAAA,YAAY,CAACC,IAAb,CAAkBJ,IAAlB;AACD;;AACDG,EAAAA,YAAY,CAACC,IAAb,CAAkBlB,OAAlB;AACA,SAAOiB,YAAP;AACD;;AAGD,MAAMf,QAAQ,GAAG,CACf;AAACa,EAAAA,IAAI,EAAE,eAAP;AAAwBI,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACJ,EAAAA,IAAI,EAAE,OAAP;AAAgBI,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACJ,EAAAA,IAAI,EAAE,WAAP;AAAoBI,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACJ,EAAAA,IAAI,EAAE,QAAP;AAAiBI,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB","sourcesContent":["export default function calculateAchievement(seeds) {\n  let unlockedSeed = true\n  let newSeed = sample(seedBank)\n  if (seeds.length === seedBank.length) {\n    const newSeed = sample(seedBank)\n    unlockedSeed = false\n  } else {\n  let duplicate = true\n  let newSeed = {}\n  while (duplicate) {\n    duplicate = checkDuplicate(newSeed, seeds)\n    newSeed = sample(seedBank)\n  }\n}\n  console.log(\"Chosen seed is\")\n  console.log(newSeed)\n  return updateSeeds(seeds, newSeed, unlockedSeed)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed, existingSeed) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    updatedSeeds.push(seed)\n  }\n  updatedSeeds.push(newSeed)\n  return updatedSeeds\n}\n\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}