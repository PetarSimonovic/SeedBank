{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Garden/Plants.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { createId } from '../../functions';\nimport { Plant } from '../';\nimport { Text, Billboard } from '@react-three/drei'; // The plane on which plants grow\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Plants(props) {\n  _s();\n\n  // This reference will give us direct access to the mesh\n  const mesh = useRef(); // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      scale: 1,\n      children: createPlants(props)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(Plants, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c = Plants;\n\nfunction createPlants(props) {\n  let plants = props.plants;\n  let plantCollection = [];\n\n  for (let index = 0; index < plants.length; index++) {\n    let plant = plants[index];\n    plantCollection.push( /*#__PURE__*/_jsxDEV(Plant, {\n      plantId: plant.plantId,\n      growth: plant.growth,\n      date: plant.date,\n      position: plant.position,\n      type: plant.type\n    }, createId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 26\n    }, this));\n  }\n}\n\nexport default Plants;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Garden/Plants.jsx"],"names":["React","useRef","useEffect","useState","createId","Plant","Text","Billboard","Plants","props","mesh","createPlants","plants","plantCollection","index","length","plant","push","plantId","growth","date","position","type"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,KAAT,QAAsB,KAAtB;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,mBAAhC,C,CAGA;;;;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AACrB;AACA,QAAMC,IAAI,GAAGT,MAAM,EAAnB,CAFqB,CAGrB;AACA;AACA;;AAGA,sBACE;AAAA,2BACA,qBACMQ,KADN;AAEE,MAAA,GAAG,EAAEC,IAFP;AAGE,MAAA,KAAK,EAAE,CAHT;AAAA,gBAKGC,YAAY,CAACF,KAAD;AALf;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAWD;;GAnBQD,M;;KAAAA,M;;AAqBT,SAASG,YAAT,CAAsBF,KAAtB,EAA6B;AAC3B,MAAIG,MAAM,GAAGH,KAAK,CAACG,MAAnB;AACA,MAAIC,eAAe,GAAG,EAAtB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,MAAM,CAACG,MAAnC,EAA2CD,KAAK,EAAhD,EAAoD;AAClD,QAAIE,KAAK,GAAGJ,MAAM,CAACE,KAAD,CAAlB;AACAD,IAAAA,eAAe,CAACI,IAAhB,eAAqB,QAAC,KAAD;AAAwB,MAAA,OAAO,EAAED,KAAK,CAACE,OAAvC;AAAgD,MAAA,MAAM,EAAEF,KAAK,CAACG,MAA9D;AAAsE,MAAA,IAAI,EAAEH,KAAK,CAACI,IAAlF;AAAwF,MAAA,QAAQ,EAAEJ,KAAK,CAACK,QAAxG;AAAkH,MAAA,IAAI,EAAEL,KAAK,CAACM;AAA9H,OAAYlB,QAAQ,EAApB;AAAA;AAAA;AAAA;AAAA,YAArB;AACD;AACF;;AAED,eAAeI,MAAf","sourcesContent":["\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { createId } from '../../functions'\nimport { Plant } from '../'\nimport { Text, Billboard } from '@react-three/drei'\n\n\n// The plane on which plants grow\n\nfunction Plants(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      {createPlants(props)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createPlants(props) {\n  let plants = props.plants\n  let plantCollection = []\n  for (let index = 0; index < plants.length; index++) {\n    let plant = plants[index]\n    plantCollection.push(<Plant key={createId()} plantId={plant.plantId} growth={plant.growth} date={plant.date} position={plant.position} type={plant.type} />)\n  }\n}\n\nexport default Plants\n"]},"metadata":{},"sourceType":"module"}