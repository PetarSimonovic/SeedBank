{"ast":null,"code":"import { addBalloon } from './'; // This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP\n\nexport default function calculateAchievement(seeds) {\n  let duplicate = true;\n  let unlock = true;\n  let newSeed = {};\n\n  if (seeds.length === seedBank.length) {\n    addBalloon();\n    return seeds; // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n    while (duplicate) {\n      newSeed = sample(seedBank);\n      duplicate = checkDuplicate(newSeed, seeds);\n    }\n  }\n\n  return updateSeeds(seeds, newSeed, unlock);\n}\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateSeeds(seeds, newSeed, unlock) {\n  const updatedSeeds = [];\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      console.log(newSeed);\n      seed.quantity += newSeed.quantity;\n      console.log(seed);\n    }\n\n    updatedSeeds.push(seed);\n  }\n\n  if (unlock) {\n    updatedSeeds.push(newSeed);\n  }\n\n  return updatedSeeds;\n}\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}, {\n  type: \"snowdrop\",\n  quantity: 3\n}, {\n  type: \"rose\",\n  quantity: 3\n}, {\n  type: \"venusFlyTrap\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["addBalloon","calculateAchievement","seeds","duplicate","unlock","newSeed","length","seedBank","sample","checkDuplicate","updateSeeds","array","Math","floor","random","index","seed","type","updatedSeeds","console","log","quantity","push"],"mappings":"AAAA,SAASA,UAAT,QAA2B,IAA3B,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AAClD,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIH,KAAK,CAACI,MAAN,KAAiBC,QAAQ,CAACD,MAA9B,EAAsC;AACpCN,IAAAA,UAAU;AACV,WAAOE,KAAP,CAFoC,CAGpC;AACA;AACA;AACD,GAND,MAMO;AACP,WAAOC,SAAP,EAAkB;AAChBE,MAAAA,OAAO,GAAGG,MAAM,CAACD,QAAD,CAAhB;AACAJ,MAAAA,SAAS,GAAGM,cAAc,CAACJ,OAAD,EAAUH,KAAV,CAA1B;AACD;AACF;;AACC,SAAOQ,WAAW,CAACR,KAAD,EAAQG,OAAR,EAAiBD,MAAjB,CAAlB;AACD;;AAGD,SAASI,MAAT,CAAgBG,KAAhB,EAAuB;AACrB,SAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACL,MAAjC,CAAD,CAAZ;AACD;;AAED,SAASG,cAAT,CAAwBJ,OAAxB,EAAiCH,KAAjC,EAAwC;AACtC,OAAK,IAAIa,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,KAAK,CAACI,MAAlC,EAA0CS,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGd,KAAK,CAACa,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACC,IAAL,KAAcZ,OAAO,CAACY,IAA1B,EAAgC;AAC9B,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED;;AAED,SAASP,WAAT,CAAqBR,KAArB,EAA4BG,OAA5B,EAAqCD,MAArC,EAA6C;AAC3C,QAAMc,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,KAAK,CAACI,MAAlC,EAA0CS,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGd,KAAK,CAACa,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACC,IAAL,KAAcZ,OAAO,CAACY,IAA1B,EAAgC;AAC9BE,MAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ;AACAW,MAAAA,IAAI,CAACK,QAAL,IAAiBhB,OAAO,CAACgB,QAAzB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACD;;AACDE,IAAAA,YAAY,CAACI,IAAb,CAAkBN,IAAlB;AACD;;AACD,MAAIZ,MAAJ,EAAY;AAAEc,IAAAA,YAAY,CAACI,IAAb,CAAkBjB,OAAlB;AAA4B;;AAC1C,SAAOa,YAAP;AACD;;AAED,MAAMX,QAAQ,GAAG,CACf;AAACU,EAAAA,IAAI,EAAE,eAAP;AAAwBI,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACJ,EAAAA,IAAI,EAAE,OAAP;AAAgBI,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACJ,EAAAA,IAAI,EAAE,WAAP;AAAoBI,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACJ,EAAAA,IAAI,EAAE,QAAP;AAAiBI,EAAAA,QAAQ,EAAE;AAA3B,CAJe,EAKf;AAACJ,EAAAA,IAAI,EAAE,UAAP;AAAmBI,EAAAA,QAAQ,EAAE;AAA7B,CALe,EAMf;AAACJ,EAAAA,IAAI,EAAE,MAAP;AAAeI,EAAAA,QAAQ,EAAE;AAAzB,CANe,EAOf;AAACJ,EAAAA,IAAI,EAAE,cAAP;AAAuBI,EAAAA,QAAQ,EAAE;AAAjC,CAPe,CAAjB","sourcesContent":["import { addBalloon } from './'\n\n// This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP\n\nexport default function calculateAchievement(seeds) {\n  let duplicate = true\n  let unlock = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    addBalloon()\n    return seeds\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n}\n  return updateSeeds(seeds, newSeed, unlock)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed, unlock) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      console.log(newSeed)\n      seed.quantity += newSeed.quantity\n      console.log(seed)\n    }\n    updatedSeeds.push(seed)\n  }\n  if (unlock) { updatedSeeds.push(newSeed) }\n  return updatedSeeds\n}\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}