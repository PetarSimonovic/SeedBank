{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Plant.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { createId } from '../functions';\nimport { getSeed } from '../gameObjects'; // Creates a Plant based on the props that it receives\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Plant(props) {\n  _s();\n\n  // Retrieve the x, y and z position of the plant\n  const {\n    x,\n    y,\n    z\n  } = props;\n  const mesh = useRef(); // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = event => {\n    event.stopPropagation();\n    console.log(\"This plant is:\");\n    console.log(props);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      onClick: event => handleClick(event),\n      scale: 0.2 //  onPointerOver={(event) => setHover(true)}\n      //  onPointerOut={(event) => setHover(false)}\n      ,\n      children: buildPlant(props)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n} // buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\n\n_s(Plant, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c = Plant;\n\nfunction buildPlant(props) {\n  console.log(\"Plant props\");\n  const [x, y, z] = props.position;\n  console.log(x);\n  console.log(y);\n  console.log(z);\n  const {\n    bloom,\n    leafColour,\n    stemColour,\n    flowerColour\n  } = getSeed(props.type);\n  let growth = props.growth; // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom;\n  } // the length of the stem is based on the plant's growth\n\n\n  const stemLength = growth / 12; // push the Base and Stem into the plant array\n\n  let plant = [/*#__PURE__*/_jsxDEV(Base, {}, createId(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Stem, {\n    stemColour: stemColour,\n    stemLength: stemLength\n  }, createId(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this)]; // Add leaves relative to the plant's growth level\n  // for (let leaves = 0; leaves <= growth; leaves++) {\n  //   plant.push(\n  //   <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n  //   <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n  // )\n  // }\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n    plant.push( /*#__PURE__*/_jsxDEV(Flower, {\n      color: flowerColour,\n      position: [0, 0.1 + growth / 11, 0]\n    }, createId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this));\n  }\n\n  return plant;\n}\n\nfunction Base(props) {\n  _s2();\n\n  console.log(\"In base\");\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"dodecahedronGeometry\", {\n      args: [0.035, 2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: '#947352'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(Base, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c2 = Base;\n\nfunction Stem(props) {\n  _s3();\n\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n      args: [0.01, 0.03, 0.3 + props.stemLength, 12]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: props.stemColour\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 3\n  }, this);\n}\n\n_s3(Stem, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c3 = Stem;\n\nfunction Leaf(props) {\n  _s4();\n\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n      args: [0.02, 0.05, 0.02, 6]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: props.color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(Leaf, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c4 = Leaf;\n\nfunction Flower(props) {\n  _s5();\n\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"dodecahedronGeometry\", {\n      args: [0.06]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: props.color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n_s5(Flower, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c5 = Flower;\nexport default Plant;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Plant\");\n$RefreshReg$(_c2, \"Base\");\n$RefreshReg$(_c3, \"Stem\");\n$RefreshReg$(_c4, \"Leaf\");\n$RefreshReg$(_c5, \"Flower\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Plant.jsx"],"names":["React","useRef","useState","useMemo","useFrame","useThree","createId","getSeed","Plant","props","x","y","z","mesh","handleClick","event","stopPropagation","console","log","buildPlant","position","bloom","leafColour","stemColour","flowerColour","type","growth","stemLength","plant","push","Base","Stem","Leaf","color","Flower"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { createId } from '../functions'\nimport { getSeed } from '../gameObjects'\n\n\n// Creates a Plant based on the props that it receives\n\nfunction Plant(props) {\n  // Retrieve the x, y and z position of the plant\n\n  const {x, y, z} = props\n\n  const mesh = useRef()\n\n  // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"This plant is:\")\n    console.log(props)\n  }\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      onClick={(event) => handleClick(event)}\n      scale={0.2}\n    //  onPointerOver={(event) => setHover(true)}\n    //  onPointerOut={(event) => setHover(false)}\n    >\n      {buildPlant(props)}\n    </mesh>\n    </group>\n\n  )\n}\n\n// buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\nfunction buildPlant(props) {\n\n  console.log(\"Plant props\")\n  const [x, y, z] = props.position\n  console.log(x)\n  console.log(y)\n  console.log(z)\n  const {bloom, leafColour, stemColour, flowerColour} = getSeed(props.type)\n  let growth = props.growth\n\n  // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom\n  }\n\n  // the length of the stem is based on the plant's growth\n\n  const stemLength = growth/12\n\n  // push the Base and Stem into the plant array\n\n  let plant = [\n    <Base key={createId()} />,\n    <Stem key={createId()} stemColour={stemColour} stemLength={stemLength}/>,\n  ]\n\n  // Add leaves relative to the plant's growth level\n\n  // for (let leaves = 0; leaves <= growth; leaves++) {\n  //   plant.push(\n  //   <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n  //   <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n  // )\n  // }\n\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n  plant.push(\n    <Flower key={createId()} color={flowerColour} position={[0, 0.1 + (growth/11), 0]} />\n  )\n}\n\n  return plant\n\n}\n\nfunction Base(props) {\n  console.log(\"In base\")\n\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n     >\n    <dodecahedronGeometry args={[0.035, 2]} />\n    <meshToonMaterial color={'#947352'} />\n  </mesh>\n)\n\n\n}\n\nfunction Stem(props) {\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n    >\n    <cylinderGeometry args={[0.01, 0.03, 0.3 + props.stemLength, 12]} />\n    <meshToonMaterial color={props.stemColour} />\n    </mesh>\n  )\n}\n\n\nfunction Leaf(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <cylinderGeometry args={[0.02, 0.05, 0.02, 6]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\nfunction Flower(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <dodecahedronGeometry args={[0.06]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\n\n\nexport default Plant\n"]},"metadata":{},"sourceType":"module"}