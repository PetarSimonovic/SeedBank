{"ast":null,"code":"export default function calculateAchievement(seeds){var duplicate=true;var unlock=true;var newSeed={};if(seeds.length===seedBank.length){return seeds;// newSeed = sample(seedBank)\n// console.log(\"FULL BANK\")\n// unlock = false\n}else{while(duplicate){newSeed=sample(seedBank);duplicate=checkDuplicate(newSeed,seeds);}}return updateSeeds(seeds,newSeed,unlock);}function sample(array){return array[Math.floor(Math.random()*array.length)];}function checkDuplicate(newSeed,seeds){for(var index=0;index<seeds.length;index++){var seed=seeds[index];if(seed.type===newSeed.type){return true;}}return false;}function updateSeeds(seeds,newSeed,unlock){var updatedSeeds=[];for(var index=0;index<seeds.length;index++){var seed=seeds[index];if(seed.type===newSeed.type){console.log(newSeed);seed.quantity+=newSeed.quantity;console.log(seed);}updatedSeeds.push(seed);}if(unlock){updatedSeeds.push(newSeed);}return updatedSeeds;}var seedBank=[{type:\"generic_plant\",quantity:3},{type:\"tulip\",quantity:3},{type:\"sunflower\",quantity:3},{type:\"crocus\",quantity:3},{type:\"snowdrop\",quantity:3},{type:\"rose\",quantity:3},{type:\"venusFlyTrap\",quantity:3}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["calculateAchievement","seeds","duplicate","unlock","newSeed","length","seedBank","sample","checkDuplicate","updateSeeds","array","Math","floor","random","index","seed","type","updatedSeeds","console","log","quantity","push"],"mappings":"AACA,cAAe,SAASA,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqC,CAClD,GAAIC,CAAAA,SAAS,CAAG,IAAhB,CACA,GAAIC,CAAAA,MAAM,CAAG,IAAb,CACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIH,KAAK,CAACI,MAAN,GAAiBC,QAAQ,CAACD,MAA9B,CAAsC,CACpC,MAAOJ,CAAAA,KAAP,CACA;AACA;AACA;AACD,CALD,IAKO,CACP,MAAOC,SAAP,CAAkB,CAChBE,OAAO,CAAGG,MAAM,CAACD,QAAD,CAAhB,CACAJ,SAAS,CAAGM,cAAc,CAACJ,OAAD,CAAUH,KAAV,CAA1B,CACD,CACF,CACC,MAAOQ,CAAAA,WAAW,CAACR,KAAD,CAAQG,OAAR,CAAiBD,MAAjB,CAAlB,CACD,CAGD,QAASI,CAAAA,MAAT,CAAgBG,KAAhB,CAAuB,CACrB,MAAOA,CAAAA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBH,KAAK,CAACL,MAAjC,CAAD,CAAZ,CACD,CAED,QAASG,CAAAA,cAAT,CAAwBJ,OAAxB,CAAiCH,KAAjC,CAAwC,CACtC,IAAK,GAAIa,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGb,KAAK,CAACI,MAAlC,CAA0CS,KAAK,EAA/C,CAAmD,CACjD,GAAMC,CAAAA,IAAI,CAAGd,KAAK,CAACa,KAAD,CAAlB,CACA,GAAIC,IAAI,CAACC,IAAL,GAAcZ,OAAO,CAACY,IAA1B,CAAgC,CAC9B,MAAO,KAAP,CACD,CACF,CACD,MAAO,MAAP,CAED,CAED,QAASP,CAAAA,WAAT,CAAqBR,KAArB,CAA4BG,OAA5B,CAAqCD,MAArC,CAA6C,CAC3C,GAAMc,CAAAA,YAAY,CAAG,EAArB,CACA,IAAK,GAAIH,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGb,KAAK,CAACI,MAAlC,CAA0CS,KAAK,EAA/C,CAAmD,CACjD,GAAMC,CAAAA,IAAI,CAAGd,KAAK,CAACa,KAAD,CAAlB,CACA,GAAIC,IAAI,CAACC,IAAL,GAAcZ,OAAO,CAACY,IAA1B,CAAgC,CAC9BE,OAAO,CAACC,GAAR,CAAYf,OAAZ,EACAW,IAAI,CAACK,QAAL,EAAiBhB,OAAO,CAACgB,QAAzB,CACAF,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EACD,CACDE,YAAY,CAACI,IAAb,CAAkBN,IAAlB,EACD,CACD,GAAIZ,MAAJ,CAAY,CAAEc,YAAY,CAACI,IAAb,CAAkBjB,OAAlB,EAA4B,CAC1C,MAAOa,CAAAA,YAAP,CACD,CAED,GAAMX,CAAAA,QAAQ,CAAG,CACf,CAACU,IAAI,CAAE,eAAP,CAAwBI,QAAQ,CAAE,CAAlC,CADe,CAEf,CAACJ,IAAI,CAAE,OAAP,CAAgBI,QAAQ,CAAE,CAA1B,CAFe,CAGf,CAACJ,IAAI,CAAE,WAAP,CAAoBI,QAAQ,CAAE,CAA9B,CAHe,CAIf,CAACJ,IAAI,CAAE,QAAP,CAAiBI,QAAQ,CAAE,CAA3B,CAJe,CAKf,CAACJ,IAAI,CAAE,UAAP,CAAmBI,QAAQ,CAAE,CAA7B,CALe,CAMf,CAACJ,IAAI,CAAE,MAAP,CAAeI,QAAQ,CAAE,CAAzB,CANe,CAOf,CAACJ,IAAI,CAAE,cAAP,CAAuBI,QAAQ,CAAE,CAAjC,CAPe,CAAjB","sourcesContent":["\nexport default function calculateAchievement(seeds) {\n  let duplicate = true\n  let unlock = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    return seeds\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n}\n  return updateSeeds(seeds, newSeed, unlock)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed, unlock) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      console.log(newSeed)\n      seed.quantity += newSeed.quantity\n      console.log(seed)\n    }\n    updatedSeeds.push(seed)\n  }\n  if (unlock) { updatedSeeds.push(newSeed) }\n  return updatedSeeds\n}\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}