{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$();\n\nimport '../style/App.css';\nimport api from '../api';\nimport React, { useRef, useState, useMemo, useEffect, Suspense } from \"react\";\nimport { Canvas, useFrame, extend } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { Grass, Plant, Camera, Sun, SkyBox, Seeds, Garden, Worlds } from '../components';\nimport { setDate, parseGarden, saveGarden, createId, createPlant } from '../functions';\nimport styled from 'styled-components';\nimport { EffectComposer, DepthOfField, Bloom, Noise, Vignette } from 'react-postprocessing'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  const [plants, setPlants] = useState(props.garden); //  an array of plant components\n\n  const [chosenSeed, setChosenseed] = useState(null); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seeds, setSeeds] = useState(props.seeds); //  an array of the player's available seeds\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [balloons, setBalloons] = useState(getBalloons(props.garden, seeds));\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed);\n      setChosenseed(null);\n      updateSeeds(-1);\n      setPlants(prev => {\n        return [newPlant, ...prev];\n      });\n    }\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    console.log(\"In update seed\");\n    let updatedSeed = seeds[index];\n    console.log(updatedSeed);\n    updatedSeed.quantity += increment;\n    setSeeds(seeds => ({ ...seeds,\n      [index]: updatedSeed\n    }));\n    setSeedindex(null);\n  };\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\");\n    saveGarden(props.id, plants, props.world, props.worldChosen, props.seeds);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Garden, {\n      plants: plants,\n      world: props.world,\n      seeds: props.seeds,\n      selectSeed: selectSeed,\n      updateSeeds: updateSeeds,\n      sowPlant: sowPlant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(Seeds, {\n      seeds: props.seeds,\n      className: \"App-header\",\n      selectSeed: selectSeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(Worlds, {\n      className: \"App-header\",\n      newWorld: props.newWorld,\n      saveWorld: props.saveWorld\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 105\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SeedBank, \"ZnFerqDYVzd6VbT8IHZpojZF6Fg=\");\n\n_c = SeedBank;\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["api","React","useRef","useState","useMemo","useEffect","Suspense","Canvas","useFrame","extend","THREE","Grass","Plant","Camera","Sun","SkyBox","Seeds","Garden","Worlds","setDate","parseGarden","saveGarden","createId","createPlant","styled","EffectComposer","DepthOfField","Bloom","Noise","Vignette","SeedBank","props","plants","setPlants","garden","chosenSeed","setChosenseed","seeds","setSeeds","seedIndex","setSeedindex","balloons","setBalloons","getBalloons","sowPlant","event","newPlant","updateSeeds","prev","selectSeed","selectedSeed","index","seed","quantity","increment","console","log","updatedSeed","id","world","worldChosen","newWorld","saveWorld"],"mappings":"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","sourcesContent":["import '../style/App.css';\nimport api from '../api';\nimport React, { useRef, useState, useMemo, useEffect, Suspense } from \"react\";\nimport { Canvas, useFrame, extend } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { Grass, Plant, Camera, Sun, SkyBox, Seeds, Garden, Worlds } from '../components';\nimport { setDate, parseGarden, saveGarden, createId, createPlant } from '../functions'\nimport styled from 'styled-components';\nimport { EffectComposer, DepthOfField, Bloom, Noise, Vignette } from 'react-postprocessing'\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(null) // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState(getBalloons(props.garden, seeds)\n)\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(null)\n      updateSeeds(-1)\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n    setChosenseed(selectedSeed)\n    setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    console.log(\"In update seed\")\n    let updatedSeed = seeds[index]\n    console.log(updatedSeed)\n    updatedSeed.quantity += increment\n    setSeeds(seeds =>({\n      ...seeds,\n      [index]: updatedSeed\n    }))\n    setSeedindex(null)\n  }\n\n\n\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, props.seeds)\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Garden plants={plants} world={props.world} seeds={props.seeds} selectSeed={selectSeed} updateSeeds={updateSeeds} sowPlant={sowPlant} />\n    {props.worldChosen ? <Seeds seeds={props.seeds} className=\"App-header\" selectSeed={selectSeed} /> : <Worlds className=\"App-header\" newWorld={props.newWorld} saveWorld={ props.saveWorld } />}\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}