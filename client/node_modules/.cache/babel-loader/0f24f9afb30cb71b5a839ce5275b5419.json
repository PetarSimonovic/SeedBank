{"ast":null,"code":"import _toConsumableArray from\"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'../style/App.css';import React,{useState,useEffect}from\"react\";import{Seeds,Garden,Worlds}from'../components';import{calculateAchievement,saveGarden,createPlant}from'../functions';import{getBalloons,Balloon}from'../gameObjects';// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function SeedBank(props){var _useState=useState(props.garden),_useState2=_slicedToArray(_useState,2),plants=_useState2[0],setPlants=_useState2[1];//  an array of plant components\nvar _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),chosenSeed=_useState4[0],setChosenseed=_useState4[1];// contains the type of seed if chosen, or null if no seed is currently selected\nvar _useState5=useState(props.seeds),_useState6=_slicedToArray(_useState5,2),seeds=_useState6[0],setSeeds=_useState6[1];//  an array of the player's available seeds\nvar _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),seedIndex=_useState8[0],setSeedindex=_useState8[1];//  the index within seeds of the chosenSeed\nvar _useState9=useState(getBalloons(plants,seeds,props.lastLogin,props.today)),_useState10=_slicedToArray(_useState9,2),balloons=_useState10[0],setBalloons=_useState10[1];console.log(\"SEEDS IN SEEDBANK IS\");console.log(seeds);var sowPlant=function sowPlant(event){if(chosenSeed){var newPlant=createPlant(event,chosenSeed);setChosenseed(\"\");setPlants(function(prev){return[newPlant].concat(_toConsumableArray(prev));});updateSeeds(-1);}};var selectSeed=function selectSeed(selectedSeed,index){var seed=seeds[index];if(seeds[index].quantity>0){setChosenseed(selectedSeed);setSeedindex(index);}};var updateSeeds=function updateSeeds(increment){var index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:seedIndex;console.log(\"UPDATING SEEDS\");console.log(seeds);var updatedSeeds=_toConsumableArray(seeds);updatedSeeds[index].quantity+=increment;setSeeds(updatedSeeds);setSeedindex(null);};var removeBalloon=function removeBalloon(index){var removedBalloon=balloons[index];removedBalloon.claimed=true;// setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\nsetBalloons(function(prev){return[prev.filter(function(balloon){return balloon.id!==removedBalloon.id;}),removedBalloon];});console.log(balloons);};var checkAchievements=function checkAchievements(){console.log(\"Checking achievements\");var fivePlants=plants.length%5;console.log(\"FivePlants\");console.log(fivePlants);console.log(\"Achievement Count\");var achievementCount=plants.length/5;// how many multuples of five?\nvar startingSeeds=2;// offset for the starting seeds\nconsole.log(achievementCount);console.log(achievementCount+startingSeeds);console.log(seeds.length);if(fivePlants===0&&plants.length>0&&seeds.length<achievementCount+startingSeeds){console.log(\"Achievement!\");var newSeeds=calculateAchievement(seeds);console.log(\"New seeds is\");console.log(newSeeds);setSeeds(newSeeds);}console.log(\"SEEDS is\");console.log(seeds);};useEffect(function(){//\nconsole.log(\"Calling saveGarden\");saveGarden(props.id,plants,props.world,props.worldChosen,seeds);checkAchievements();});return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Garden,{plants:plants,balloons:balloons,world:props.world,seeds:seeds,selectSeed:selectSeed,removeBalloon:removeBalloon,updateSeeds:updateSeeds,sowPlant:sowPlant}),props.worldChosen?/*#__PURE__*/_jsx(Seeds,{seeds:seeds,className:\"App-header\",selectSeed:selectSeed}):/*#__PURE__*/_jsx(Worlds,{className:\"App-header\",newWorld:props.newWorld,saveWorld:props.saveWorld})]});}export default SeedBank;","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["React","useState","useEffect","Seeds","Garden","Worlds","calculateAchievement","saveGarden","createPlant","getBalloons","Balloon","SeedBank","props","garden","plants","setPlants","chosenSeed","setChosenseed","seeds","setSeeds","seedIndex","setSeedindex","lastLogin","today","balloons","setBalloons","console","log","sowPlant","event","newPlant","prev","updateSeeds","selectSeed","selectedSeed","index","seed","quantity","increment","updatedSeeds","removeBalloon","removedBalloon","claimed","filter","balloon","id","checkAchievements","fivePlants","length","achievementCount","startingSeeds","newSeeds","world","worldChosen","newWorld","saveWorld"],"mappings":"keAAA,MAAO,kBAAP,CACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,KAAT,CAAgBC,MAAhB,CAAwBC,MAAxB,KAAsC,eAAtC,CACA,OAASC,oBAAT,CAA+BC,UAA/B,CAA2CC,WAA3C,KAA8D,cAA9D,CACA,OAASC,WAAT,CAAsBC,OAAtB,KAAqC,gBAArC,CAEA;AACA;AAGA;AACA;wFAEA,QAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CAGvB,cAA4BX,QAAQ,CAACW,KAAK,CAACC,MAAP,CAApC,wCAAOC,MAAP,eAAeC,SAAf,eAAmD;AACnD,eAAoCd,QAAQ,CAAC,EAAD,CAA5C,yCAAOe,UAAP,eAAmBC,aAAnB,eAAiD;AACjD,eAA0BhB,QAAQ,CAACW,KAAK,CAACM,KAAP,CAAlC,yCAAOA,KAAP,eAAcC,QAAd,eAAgD;AAChD,eAAkClB,QAAQ,CAAC,IAAD,CAA1C,yCAAOmB,SAAP,eAAkBC,YAAlB,eAAiD;AACjD,eAAgCpB,QAAQ,CAACQ,WAAW,CAACK,MAAD,CAASI,KAAT,CAAgBN,KAAK,CAACU,SAAtB,CAAiCV,KAAK,CAACW,KAAvC,CAAZ,CAAxC,0CAAOC,QAAP,gBAAiBC,WAAjB,gBAGAC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EACAD,OAAO,CAACC,GAAR,CAAYT,KAAZ,EAGA,GAAMU,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAEC,KAAF,CAAa,CAC5B,GAAIb,UAAJ,CAAgB,CACd,GAAMc,CAAAA,QAAQ,CAAGtB,WAAW,CAACqB,KAAD,CAAQb,UAAR,CAA5B,CACAC,aAAa,CAAC,EAAD,CAAb,CACAF,SAAS,CAAE,SAACgB,IAAD,CAAU,CACnB,OAAQD,QAAR,4BAAqBC,IAArB,GACD,CAFQ,CAAT,CAGAC,WAAW,CAAC,CAAC,CAAF,CAAX,CACD,CACF,CATD,CAWA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,YAAD,CAAeC,KAAf,CAAyB,CAC1C,GAAMC,CAAAA,IAAI,CAAGlB,KAAK,CAACiB,KAAD,CAAlB,CACA,GAAIjB,KAAK,CAACiB,KAAD,CAAL,CAAaE,QAAb,CAAwB,CAA5B,CAA+B,CAC/BpB,aAAa,CAACiB,YAAD,CAAb,CACAb,YAAY,CAACc,KAAD,CAAZ,CACC,CACF,CAND,CAQA,GAAMH,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACM,SAAD,CAAkC,IAAtBH,CAAAA,KAAsB,2DAAdf,SAAc,CACpDM,OAAO,CAACC,GAAR,CAAY,gBAAZ,EACAD,OAAO,CAACC,GAAR,CAAYT,KAAZ,EACA,GAAMqB,CAAAA,YAAY,oBAAOrB,KAAP,CAAlB,CACAqB,YAAY,CAACJ,KAAD,CAAZ,CAAoBE,QAApB,EAAgCC,SAAhC,CACAnB,QAAQ,CAACoB,YAAD,CAAR,CACAlB,YAAY,CAAC,IAAD,CAAZ,CACD,CAPD,CASA,GAAMmB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACL,KAAD,CAAW,CAC/B,GAAIM,CAAAA,cAAc,CAAGjB,QAAQ,CAACW,KAAD,CAA7B,CACAM,cAAc,CAACC,OAAf,CAAyB,IAAzB,CACA;AACAjB,WAAW,CACT,SAACM,IAAD,CAAU,CACR,MAAO,CAACA,IAAI,CAACY,MAAL,CAAY,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,EAAR,GAAeJ,cAAc,CAACI,EAAlC,EAAnB,CAAD,CAA2DJ,cAA3D,CAAP,CACD,CAHQ,CAAX,CAKAf,OAAO,CAACC,GAAR,CAAYH,QAAZ,EACD,CAVD,CAYA,GAAMsB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9BpB,OAAO,CAACC,GAAR,CAAY,uBAAZ,EACA,GAAMoB,CAAAA,UAAU,CAAGjC,MAAM,CAACkC,MAAP,CAAgB,CAAnC,CACAtB,OAAO,CAACC,GAAR,CAAY,YAAZ,EACAD,OAAO,CAACC,GAAR,CAAYoB,UAAZ,EACArB,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACA,GAAMsB,CAAAA,gBAAgB,CAAGnC,MAAM,CAACkC,MAAP,CAAgB,CAAzC,CAA2C;AAC3C,GAAME,CAAAA,aAAa,CAAG,CAAtB,CAAwB;AACxBxB,OAAO,CAACC,GAAR,CAAYsB,gBAAZ,EACAvB,OAAO,CAACC,GAAR,CAAYsB,gBAAgB,CAAGC,aAA/B,EACAxB,OAAO,CAACC,GAAR,CAAYT,KAAK,CAAC8B,MAAlB,EACA,GAAID,UAAU,GAAK,CAAf,EAAoBjC,MAAM,CAACkC,MAAP,CAAgB,CAApC,EAAyC9B,KAAK,CAAC8B,MAAN,CAAgBC,gBAAgB,CAAGC,aAAhF,CAAgG,CAC9FxB,OAAO,CAACC,GAAR,CAAY,cAAZ,EACA,GAAMwB,CAAAA,QAAQ,CAAG7C,oBAAoB,CAACY,KAAD,CAArC,CACAQ,OAAO,CAACC,GAAR,CAAY,cAAZ,EACAD,OAAO,CAACC,GAAR,CAAYwB,QAAZ,EACAhC,QAAQ,CAACgC,QAAD,CAAR,CAED,CACDzB,OAAO,CAACC,GAAR,CAAY,UAAZ,EACAD,OAAO,CAACC,GAAR,CAAYT,KAAZ,EACD,CArBD,CAwBAhB,SAAS,CAAC,UAAM,CACd;AACAwB,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACApB,UAAU,CAACK,KAAK,CAACiC,EAAP,CAAW/B,MAAX,CAAmBF,KAAK,CAACwC,KAAzB,CAAgCxC,KAAK,CAACyC,WAAtC,CAAmDnC,KAAnD,CAAV,CACA4B,iBAAiB,GAClB,CALQ,CAAT,CAQA,mBACA,aAAK,SAAS,CAAC,KAAf,wBACE,KAAC,MAAD,EACA,MAAM,CAAEhC,MADR,CAEA,QAAQ,CAAEU,QAFV,CAGA,KAAK,CAAEZ,KAAK,CAACwC,KAHb,CAIA,KAAK,CAAElC,KAJP,CAKA,UAAU,CAAEe,UALZ,CAMA,aAAa,CAAEO,aANf,CAOA,WAAW,CAAER,WAPb,CAQA,QAAQ,CAAEJ,QARV,EADF,CAUGhB,KAAK,CAACyC,WAAN,cAAoB,KAAC,KAAD,EAAO,KAAK,CAAEnC,KAAd,CAAqB,SAAS,CAAC,YAA/B,CAA4C,UAAU,CAAEe,UAAxD,EAApB,cAA6F,KAAC,MAAD,EAAQ,SAAS,CAAC,YAAlB,CAA+B,QAAQ,CAAErB,KAAK,CAAC0C,QAA/C,CAAyD,SAAS,CAAG1C,KAAK,CAAC2C,SAA3E,EAVhG,GADA,CAcD,CAED,cAAe5C,CAAAA,QAAf","sourcesContent":["import '../style/App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { Seeds, Garden, Worlds } from '../components';\nimport { calculateAchievement, saveGarden, createPlant } from '../functions'\nimport { getBalloons, Balloon } from '../gameObjects'\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState(getBalloons(plants, seeds, props.lastLogin, props.today))\n\n\n  console.log(\"SEEDS IN SEEDBANK IS\")\n  console.log(seeds)\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(\"\")\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      updateSeeds(-1)\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n    setChosenseed(selectedSeed)\n    setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    console.log(\"UPDATING SEEDS\")\n    console.log(seeds)\n    const updatedSeeds = [...seeds]\n    updatedSeeds[index].quantity += increment\n    setSeeds(updatedSeeds)\n    setSeedindex(null)\n  }\n\n  const removeBalloon = (index) => {\n    let removedBalloon = balloons[index]\n    removedBalloon.claimed = true\n    // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n    setBalloons(\n      (prev) => {\n        return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon]\n      }\n    )\n    console.log(balloons)\n  }\n\n  const checkAchievements = () => {\n    console.log(\"Checking achievements\")\n    const fivePlants = plants.length % 5\n    console.log(\"FivePlants\")\n    console.log(fivePlants)\n    console.log(\"Achievement Count\")\n    const achievementCount = plants.length / 5 // how many multuples of five?\n    const startingSeeds = 2 // offset for the starting seeds\n    console.log(achievementCount)\n    console.log(achievementCount + startingSeeds)\n    console.log(seeds.length)\n    if (fivePlants === 0 && plants.length > 0 && seeds.length < (achievementCount + startingSeeds)) {\n      console.log(\"Achievement!\")\n      const newSeeds = calculateAchievement(seeds)\n      console.log(\"New seeds is\")\n      console.log(newSeeds)\n      setSeeds(newSeeds)\n\n    }\n    console.log(\"SEEDS is\")\n    console.log(seeds)\n  }\n\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n    checkAchievements()\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Garden\n    plants={plants}\n    balloons={balloons}\n    world={props.world}\n    seeds={seeds}\n    selectSeed={selectSeed}\n    removeBalloon={removeBalloon}\n    updateSeeds={updateSeeds}\n    sowPlant={sowPlant} />\n    {props.worldChosen ? <Seeds seeds={seeds} className=\"App-header\" selectSeed={selectSeed} /> : <Worlds className=\"App-header\" newWorld={props.newWorld} saveWorld={ props.saveWorld } />}\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}