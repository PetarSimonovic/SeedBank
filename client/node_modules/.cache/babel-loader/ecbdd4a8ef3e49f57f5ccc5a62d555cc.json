{"ast":null,"code":"import _regeneratorRuntime from\"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import api from'../api';import{setDate}from'./';// strips out react components from the state garden array and saves plant props as an object that's easy to parse\n// Needs error handling!\nexport default function saveGarden(_x,_x2,_x3,_x4,_x5){return _saveGarden.apply(this,arguments);}function _saveGarden(){_saveGarden=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id,plants,newWorld,chosen,savedSeeds){var savedGarden,garden,world,seeds,worldChosen,date,lastLogin,payload;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:savedGarden=extractPlants(plants);garden={\"garden\":savedGarden};world={\"world\":JSON.stringify(newWorld)};seeds={\"seeds\":savedSeeds};worldChosen={\"worldChosen\":chosen};date=setDate();lastLogin={\"lastLogin\":date.stamp};payload={garden:garden,world:world,worldChosen:worldChosen,seeds:seeds,lastLogin:lastLogin};console.log(\"Attempting to save garden\");console.log(\"SEEDS ARE\");console.log(seeds);console.log(payload);_context.next=14;return api.updateGarden(id,payload).then(function(res){console.log(res);console.log('Garden updated successfully');});case 14:case\"end\":return _context.stop();}}},_callee);}));return _saveGarden.apply(this,arguments);}function extractPlants(plants){var extractedPlants=[];for(var plant=0;plant<plants.length;plant++){var key=plants[plant].key;var parsedPlant=plants[plant].props;var savedPlant={key:key,growth:parsedPlant.growth,date:parsedPlant.date,position:parsedPlant.position,type:parsedPlant.type};extractedPlants.push(savedPlant);}return extractedPlants;}","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/SaveGarden.js"],"names":["api","setDate","saveGarden","id","plants","newWorld","chosen","savedSeeds","savedGarden","extractPlants","garden","world","JSON","stringify","seeds","worldChosen","date","lastLogin","stamp","payload","console","log","updateGarden","then","res","extractedPlants","plant","length","key","parsedPlant","props","savedPlant","growth","position","type","push"],"mappings":"udAAA,MAAOA,CAAAA,GAAP,KAAgB,QAAhB,CACA,OAASC,OAAT,KAAwB,IAAxB,CAEA;AACA;AAGA,uBAA8BC,CAAAA,UAA9B,+D,2FAAe,iBAA0BC,EAA1B,CAA8BC,MAA9B,CAAsCC,QAAtC,CAAgDC,MAAhD,CAAwDC,UAAxD,wLACTC,WADS,CACKC,aAAa,CAACL,MAAD,CADlB,CAEPM,MAFO,CAEE,CAAC,SAAWF,WAAZ,CAFF,CAGPG,KAHO,CAGC,CAAC,QAAUC,IAAI,CAACC,SAAL,CAAeR,QAAf,CAAX,CAHD,CAIPS,KAJO,CAIC,CAAC,QAASP,UAAV,CAJD,CAKPQ,WALO,CAKO,CAAC,cAAgBT,MAAjB,CALP,CAMPU,IANO,CAMAf,OAAO,EANP,CAOPgB,SAPO,CAOM,CAAE,YAAcD,IAAI,CAACE,KAArB,CAPN,CAQPC,OARO,CAQG,CAACT,MAAM,CAANA,MAAD,CAASC,KAAK,CAALA,KAAT,CAAgBI,WAAW,CAAXA,WAAhB,CAA6BD,KAAK,CAALA,KAA7B,CAAoCG,SAAS,CAATA,SAApC,CARH,CASbG,OAAO,CAACC,GAAR,CAAY,2BAAZ,EACAD,OAAO,CAACC,GAAR,CAAY,WAAZ,EACAD,OAAO,CAACC,GAAR,CAAYP,KAAZ,EACAM,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAZa,uBAaPnB,CAAAA,GAAG,CAACsB,YAAJ,CAAiBnB,EAAjB,CAAqBgB,OAArB,EAA8BI,IAA9B,CAAmC,SAAAC,GAAG,CAAI,CAC1CJ,OAAO,CAACC,GAAR,CAAYG,GAAZ,EACAJ,OAAO,CAACC,GAAR,CAAY,6BAAZ,EACH,CAHG,CAbO,wD,6CAmBf,QAASZ,CAAAA,aAAT,CAAuBL,MAAvB,CAA+B,CAC7B,GAAIqB,CAAAA,eAAe,CAAG,EAAtB,CACA,IAAK,GAAIC,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGtB,MAAM,CAACuB,MAAnC,CAA2CD,KAAK,EAAhD,CAAqD,CACnD,GAAME,CAAAA,GAAG,CAAGxB,MAAM,CAACsB,KAAD,CAAN,CAAcE,GAA1B,CACA,GAAMC,CAAAA,WAAW,CAAGzB,MAAM,CAACsB,KAAD,CAAN,CAAcI,KAAlC,CACA,GAAMC,CAAAA,UAAU,CAAG,CAACH,GAAG,CAAEA,GAAN,CAAWI,MAAM,CAAEH,WAAW,CAACG,MAA/B,CAAuChB,IAAI,CAAEa,WAAW,CAACb,IAAzD,CAA+DiB,QAAQ,CAAEJ,WAAW,CAACI,QAArF,CAA+FC,IAAI,CAAEL,WAAW,CAACK,IAAjH,CAAnB,CACAT,eAAe,CAACU,IAAhB,CAAqBJ,UAArB,EACD,CACD,MAAON,CAAAA,eAAP,CACD","sourcesContent":["import api from '../api';\nimport { setDate } from './'\n\n// strips out react components from the state garden array and saves plant props as an object that's easy to parse\n// Needs error handling!\n\n\nexport default async function saveGarden(id, plants, newWorld, chosen, savedSeeds){\n  let savedGarden = extractPlants(plants)\n  const garden = {\"garden\" : savedGarden}\n  const world = {\"world\" : JSON.stringify(newWorld)}\n  const seeds = {\"seeds\": savedSeeds}\n  const worldChosen = {\"worldChosen\" : chosen}\n  const date = setDate()\n  const lastLogin  = { \"lastLogin\" : date.stamp }\n  const payload = {garden, world, worldChosen, seeds, lastLogin}\n  console.log(\"Attempting to save garden\")\n  console.log(\"SEEDS ARE\")\n  console.log(seeds)\n  console.log(payload)\n  await api.updateGarden(id, payload).then(res => {\n        console.log(res)\n        console.log('Garden updated successfully')\n    })\n}\n\nfunction extractPlants(plants) {\n  let extractedPlants = []\n  for (let plant = 0; plant < plants.length; plant ++) {\n    const key = plants[plant].key\n    const parsedPlant = plants[plant].props\n    const savedPlant = {key: key, growth: parsedPlant.growth, date: parsedPlant.date, position: parsedPlant.position, type: parsedPlant.type}\n    extractedPlants.push(savedPlant)\n  }\n  return extractedPlants\n}\n"]},"metadata":{},"sourceType":"module"}