{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Earth.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions';\nimport * as THREE from \"three\"; // The plane on which plants grow\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Earth(props) {\n  _s();\n\n  // This reference will give us direct access to the mesh\n  const world = props.world;\n  const mesh = useRef();\n  console.log(\"WORLD in EARTH is\");\n  console.log(world); // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  const handleClick = event => {\n    event.stopPropagation();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      scale: 1,\n      onClick: event => handleClick(event),\n      children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n        args: world.earth.geometry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n        color: world.earth.colour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), createStalactites(world)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(Earth, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c = Earth;\n\nfunction createStalactites(world) {\n  console.log(world);\n  const stalactites = [];\n\n  for (let stalactite = 0; stalactite < world.stalactites.length; stalactite++) {\n    stalactites.push( /*#__PURE__*/_jsxDEV(Stalactite, {\n      args: stalactite.geometry,\n      position: stalactite.position,\n      colour: stalactite.colour\n    }, createId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 22\n    }, this));\n  }\n\n  return stalactites;\n}\n\nfunction Stalactite(props) {\n  _s2();\n\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    scale: 1,\n    children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n      args: props.args\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: props.colour\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Stalactite, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c2 = Stalactite;\nexport default Earth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Earth\");\n$RefreshReg$(_c2, \"Stalactite\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Earth.jsx"],"names":["React","useRef","useState","useMemo","useFrame","createId","THREE","Earth","props","world","mesh","console","log","handleClick","event","stopPropagation","earth","geometry","colour","createStalactites","stalactites","stalactite","length","push","position","Stalactite","args"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,OAAlC,QAAiD,OAAjD;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAGA;;;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB;AACA,QAAMC,KAAK,GAAGD,KAAK,CAACC,KAApB;AACA,QAAMC,IAAI,GAAGT,MAAM,EAAnB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EALoB,CAMpB;AACA;AACA;;AAEA,QAAMI,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,eAAN;AACD,GAFD;;AAKA,sBACE;AAAA,2BACA,qBACMP,KADN;AAEE,MAAA,GAAG,EAAEE,IAFP;AAGE,MAAA,KAAK,EAAE,CAHT;AAIE,MAAA,OAAO,EAAGI,KAAD,IAAWD,WAAW,CAACC,KAAD,CAJjC;AAAA,8BAME;AAAkB,QAAA,IAAI,EAAEL,KAAK,CAACO,KAAN,CAAYC;AAApC;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAkB,QAAA,KAAK,EAAER,KAAK,CAACO,KAAN,CAAYE;AAArC;AAAA;AAAA;AAAA;AAAA,cAPF,EAQGC,iBAAiB,CAACV,KAAD,CARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAcD;;GA7BQF,K;;KAAAA,K;;AA+BT,SAASY,iBAAT,CAA2BV,KAA3B,EAAkC;AAChCE,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,QAAMW,WAAW,GAAG,EAApB;;AAEA,OAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGZ,KAAK,CAACW,WAAN,CAAkBE,MAAxD,EAAgED,UAAU,EAA1E,EAA8E;AAC5ED,IAAAA,WAAW,CAACG,IAAZ,eAAiB,QAAC,UAAD;AAA6B,MAAA,IAAI,EAAEF,UAAU,CAACJ,QAA9C;AAAwD,MAAA,QAAQ,EAAEI,UAAU,CAACG,QAA7E;AAAuF,MAAA,MAAM,EAAEH,UAAU,CAACH;AAA1G,OAAiBb,QAAQ,EAAzB;AAAA;AAAA;AAAA;AAAA,YAAjB;AACD;;AAED,SAAOe,WAAP;AACD;;AAED,SAASK,UAAT,CAAoBjB,KAApB,EAA2B;AAAA;;AACzB,QAAME,IAAI,GAAGT,MAAM,EAAnB;AAEA,sBACE,qBACMO,KADN;AAEE,IAAA,GAAG,EAAEE,IAFP;AAGE,IAAA,KAAK,EAAE,CAHT;AAAA,4BAKE;AAAkB,MAAA,IAAI,EAAEF,KAAK,CAACkB;AAA9B;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAkB,MAAA,KAAK,EAAElB,KAAK,CAACU;AAA/B;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;IAbQO,U;;MAAAA,U;AAeT,eAAelB,KAAf","sourcesContent":["import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions'\nimport * as THREE from \"three\";\n\n\n// The plane on which plants grow\n\nfunction Earth(props) {\n  // This reference will give us direct access to the mesh\n  const world = props.world\n  const mesh = useRef()\n  console.log(\"WORLD in EARTH is\")\n  console.log(world)\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n  }\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={world.earth.geometry}  />\n      <meshToonMaterial color={world.earth.colour} />\n      {createStalactites(world)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createStalactites(world) {\n  console.log(world)\n  const stalactites = []\n\n  for (let stalactite = 0; stalactite < world.stalactites.length; stalactite++) {\n    stalactites.push(<Stalactite key={createId()} args={stalactite.geometry} position={stalactite.position} colour={stalactite.colour} />)\n  }\n\n  return stalactites\n}\n\nfunction Stalactite(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={props.colour} />\n    </mesh>\n  )\n}\n\nexport default Earth\n"]},"metadata":{},"sourceType":"module"}