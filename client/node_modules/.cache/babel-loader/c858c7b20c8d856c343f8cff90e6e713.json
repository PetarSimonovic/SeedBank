{"ast":null,"code":"const seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];\nconst seeds1 = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}];\n\nfunction calculateAchievement(seeds) {\n  let duplicate = true;\n  let unlock = true;\n  let newSeed = {};\n\n  if (seeds.length === seedBank.length) {\n    newSeed = sample(seedBank);\n    console.log(newSeed);\n    unlock = false;\n    return seeds;\n  }\n\n  while (duplicate) {\n    newSeed = sample(seedBank);\n    duplicate = checkDuplicate(newSeed, seeds);\n  }\n\n  return updateSeeds(seeds, newSeed, unlock);\n}\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateSeeds(seeds, newSeed, unlock) {\n  const updatedSeeds = [];\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n    updatedSeeds.push(seed);\n  }\n\n  updatedSeeds.push(newSeed);\n  return updatedSeeds;\n}\n\nconsole.log(\"RESULT\");\nconsole.log(calculateAchievement(seeds1));\nconsole.log(calculateAchievement(seedBank));","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["seedBank","type","quantity","seeds1","calculateAchievement","seeds","duplicate","unlock","newSeed","length","sample","console","log","checkDuplicate","updateSeeds","array","Math","floor","random","index","seed","updatedSeeds","push"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CACf;AAACC,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACD,EAAAA,IAAI,EAAE,OAAP;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACD,EAAAA,IAAI,EAAE,WAAP;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACD,EAAAA,IAAI,EAAE,QAAP;AAAiBC,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB;AAOA,MAAMC,MAAM,GAAI,CACd;AAACF,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,QAAQ,EAAE;AAAlC,CADc,EAEd;AAACD,EAAAA,IAAI,EAAE,OAAP;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAFc,CAAhB;;AAKA,SAASE,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIH,KAAK,CAACI,MAAN,KAAiBT,QAAQ,CAACS,MAA9B,EAAsC;AACpCD,IAAAA,OAAO,GAAGE,MAAM,CAACV,QAAD,CAAhB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAD,IAAAA,MAAM,GAAG,KAAT;AACA,WAAOF,KAAP;AACD;;AACD,SAAOC,SAAP,EAAkB;AAChBE,IAAAA,OAAO,GAAGE,MAAM,CAACV,QAAD,CAAhB;AACAM,IAAAA,SAAS,GAAGO,cAAc,CAACL,OAAD,EAAUH,KAAV,CAA1B;AACD;;AACD,SAAOS,WAAW,CAACT,KAAD,EAAQG,OAAR,EAAiBD,MAAjB,CAAlB;AACD;;AAGD,SAASG,MAAT,CAAgBK,KAAhB,EAAuB;AACrB,SAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACN,MAAjC,CAAD,CAAZ;AACD;;AAED,SAASI,cAAT,CAAwBL,OAAxB,EAAiCH,KAAjC,EAAwC;AACtC,OAAK,IAAIc,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGd,KAAK,CAACI,MAAlC,EAA0CU,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGf,KAAK,CAACc,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACnB,IAAL,KAAcO,OAAO,CAACP,IAA1B,EAAgC;AAC9B,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED;;AAED,SAASa,WAAT,CAAqBT,KAArB,EAA4BG,OAA5B,EAAqCD,MAArC,EAA6C;AAC3C,QAAMc,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIF,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGd,KAAK,CAACI,MAAlC,EAA0CU,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGf,KAAK,CAACc,KAAD,CAAlB;AACAE,IAAAA,YAAY,CAACC,IAAb,CAAkBF,IAAlB;AACD;;AACDC,EAAAA,YAAY,CAACC,IAAb,CAAkBd,OAAlB;AACA,SAAOa,YAAP;AACD;;AAEDV,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,OAAO,CAACC,GAAR,CAAYR,oBAAoB,CAACD,MAAD,CAAhC;AACAQ,OAAO,CAACC,GAAR,CAAYR,oBAAoB,CAACJ,QAAD,CAAhC","sourcesContent":["const seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3}\n]\n\nconst seeds1 =  [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n]\n\nfunction calculateAchievement(seeds) {\n  let duplicate = true\n  let unlock = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    newSeed = sample(seedBank)\n    console.log(newSeed)\n    unlock = false\n    return seeds\n  }\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n  return updateSeeds(seeds, newSeed, unlock)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed, unlock) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    updatedSeeds.push(seed)\n  }\n  updatedSeeds.push(newSeed)\n  return updatedSeeds\n}\n\nconsole.log(\"RESULT\")\nconsole.log(calculateAchievement(seeds1))\nconsole.log(calculateAchievement(seedBank))\n"]},"metadata":{},"sourceType":"module"}