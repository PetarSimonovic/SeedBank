{"ast":null,"code":"export default function calculateAchievement(seeds) {\n  let duplicate = true;\n  let newSeed = \"\";\n\n  while (duplicate) {\n    newSeed = sample(seedBank);\n    duplicate = checkDuplicate(newSeed, seeds);\n  }\n\n  return newSeed;\n}\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      console.log(\"Duplicate \" + seed.type + \" \" + newSeed.type);\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["calculateAchievement","seeds","duplicate","newSeed","sample","seedBank","checkDuplicate","type","quantity","array","Math","floor","random","length","index","seed","console","log"],"mappings":"AAAA,eAAe,SAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AAClD,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,SAAOD,SAAP,EAAkB;AAChBC,IAAAA,OAAO,GAAGC,MAAM,CAACC,QAAD,CAAhB;AACAH,IAAAA,SAAS,GAAGI,cAAc,CAACH,OAAD,EAAUF,KAAV,CAA1B;AACD;;AACD,SAAOE,OAAP;AACD;AAED,MAAME,QAAQ,GAAG,CACf;AAACE,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACD,EAAAA,IAAI,EAAE,OAAP;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACD,EAAAA,IAAI,EAAE,WAAP;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACD,EAAAA,IAAI,EAAE,QAAP;AAAiBC,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB;;AAQA,SAASJ,MAAT,CAAgBK,KAAhB,EAAuB;AACrB,SAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACI,MAAjC,CAAD,CAAZ;AACD;;AAED,SAASP,cAAT,CAAwBH,OAAxB,EAAiCF,KAAjC,EAAwC;AACtC,OAAK,IAAIa,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,KAAK,CAACY,MAAlC,EAA0CC,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGd,KAAK,CAACa,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACR,IAAL,KAAcJ,OAAO,CAACI,IAA1B,EAAgC;AAC9BS,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeF,IAAI,CAACR,IAApB,GAA2B,GAA3B,GAAiCJ,OAAO,CAACI,IAArD;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED","sourcesContent":["export default function calculateAchievement(seeds) {\n  let duplicate = true\n  let newSeed = \"\"\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n  return newSeed\n}\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3}\n]\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      console.log(\"Duplicate \" + seed.type + \" \" + newSeed.type)\n      return true\n    }\n  }\n  return false\n\n}\n"]},"metadata":{},"sourceType":"module"}