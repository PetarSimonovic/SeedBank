{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Garden/Garden.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { createId } from '../../functions';\nimport { Grass, SeedBox, FakeGrass } from '../';\nimport { Text, Billboard } from '@react-three/drei'; // The plane on which plants grow\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Garden(props) {\n  _s();\n\n  // This reference will give us direct access to the mesh\n  const mesh = useRef(); // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  const [name, setName] = useState(true);\n\n  const handleClick = event => {\n    if (props.friend) {\n      //  setName(prev => !prev)\n      event.stopPropagation();\n      props.sendPlant(props.name, props.friendId);\n    }\n  };\n\n  useEffect(() => {\n    setName(name);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      scale: 1,\n      onClick: event => handleClick(event),\n      children: [createStalactites(props), name && props.friend ? /*#__PURE__*/_jsxDEV(GardenText, {\n        name: props.name,\n        position: [0, 2, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 31\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(Garden, \"0KrTRODlrhfd2iybf/7jtGV+Mjw=\");\n\n_c = Garden;\n\nfunction createStalactites(props) {\n  const world = props.world;\n  const createdStalactites = [];\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index];\n    createdStalactites.push( /*#__PURE__*/_jsxDEV(Stalactite, {\n      friend: props.friend,\n      sowPlant: props.sowPlant,\n      args: stalactite.geometry,\n      position: stalactite.position,\n      colour: stalactite.colour\n    }, createId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 30\n    }, this));\n  }\n\n  return createdStalactites;\n}\n\nfunction Stalactite(props) {\n  _s2();\n\n  const mesh = useRef();\n  let [top, bottom, depth, sections] = props.args;\n\n  const handleClick = event => {\n    props.friend ? console.log(\"friend island click\") : event.stopPropagation();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      scale: 1,\n      onClick: event => handleClick(event),\n      children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n        args: props.args\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n        color: props.colour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), props.friend ? /*#__PURE__*/_jsxDEV(FakeGrass, {\n        position: [0, depth / 2, 0],\n        args: [top, top, 0.01, sections]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(Grass, {\n        sowPlant: props.sowPlant,\n        position: [0, depth / 2, 0],\n        args: [top, top, 0.01, sections]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 100\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Stalactite, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c2 = Stalactite;\n\nfunction GardenText(props) {\n  _s3();\n\n  const position = props.position;\n  const gardenTextColor = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  };\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    scale: 0.8,\n    children: /*#__PURE__*/_jsxDEV(Billboard, {\n      follow: true,\n      lockX: false,\n      lockY: false,\n      lockZ: false,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: 1.2 / position.z,\n        outlineWidth: 1,\n        outlineColor: gardenTextColor.outline,\n        color: gardenTextColor.message,\n        children: [\" \", props.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(GardenText, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c3 = GardenText;\nexport default Garden;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Garden\");\n$RefreshReg$(_c2, \"Stalactite\");\n$RefreshReg$(_c3, \"GardenText\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Garden/Garden.jsx"],"names":["React","useRef","useEffect","useState","createId","Grass","SeedBox","FakeGrass","Text","Billboard","Garden","props","mesh","name","setName","handleClick","event","friend","stopPropagation","sendPlant","friendId","createStalactites","world","createdStalactites","index","stalactites","length","stalactite","push","sowPlant","geometry","position","colour","Stalactite","top","bottom","depth","sections","args","console","log","GardenText","gardenTextColor","message","outline","z"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { createId } from '../../functions'\nimport { Grass, SeedBox, FakeGrass } from '../'\nimport { Text, Billboard } from '@react-three/drei'\n\n\n// The plane on which plants grow\n\nfunction Garden(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  const [name, setName] = useState(true)\n\n  const handleClick = (event) => {\n    if (props.friend) {\n  //  setName(prev => !prev)\n    event.stopPropagation()\n    props.sendPlant(props.name, props.friendId)\n    }\n  }\n\n  useEffect(() => {\n    setName(name)\n  })\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      {createStalactites(props)}\n      {name && props.friend ? <GardenText name={props.name} position={[0, 2, 0]} /> : ''}\n    </mesh>\n    </>\n  )\n}\n\nfunction createStalactites(props) {\n  const world = props.world\n  const createdStalactites = []\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index]\n    createdStalactites.push( <Stalactite key={createId()} friend={props.friend} sowPlant={props.sowPlant} args={stalactite.geometry} position={stalactite.position} colour={stalactite.colour} />)\n  }\n\n  return createdStalactites\n}\n\nfunction Stalactite(props) {\n  const mesh = useRef()\n  let [top, bottom, depth, sections] = props.args\n\n  const handleClick = (event) => {\n    props.friend ? console.log(\"friend island click\") : event.stopPropagation()\n  }\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={props.colour}  />\n      {props.friend ? <FakeGrass position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} /> : <Grass sowPlant={props.sowPlant} position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} />}\n    </mesh>\n    </group>\n  )\n}\n\nfunction GardenText(props) {\n\n  const position = props.position\n\n  const gardenTextColor = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  }\n\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={0.8}\n      >\n      <Billboard\n      follow={true}\n      lockX={false}\n      lockY={false}\n      lockZ={false} >\n      <Text fontSize={1.2 / position.z} outlineWidth={1} outlineColor={gardenTextColor.outline} color={gardenTextColor.message} > {props.name } </Text>\n      </Billboard>\n      </mesh>\n  )\n}\n\nexport default Garden\n"]},"metadata":{},"sourceType":"module"}