{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$();\n\nimport '../style/App.css';\nimport api from '../api';\nimport React, { useRef, useState, useMemo, useEffect, Suspense } from \"react\";\nimport { Canvas, useFrame, extend } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { Grass, Plant, Camera, Sun, SkyBox, Seeds, Garden, Worlds } from '../components';\nimport { setDate, parseGarden, saveGarden, createId, createPlant } from '../functions';\nimport { getBalloons } from '../gameObjects';\nimport styled from 'styled-components';\nimport { EffectComposer, DepthOfField, Bloom, Noise, Vignette } from 'react-postprocessing'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  const [plants, setPlants] = useState(props.garden); //  an array of plant components\n\n  const [chosenSeed, setChosenseed] = useState(null); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seeds, setSeeds] = useState(props.seeds); //  an array of the player's available seeds\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [balloons, setBalloons] = useState(getBalloons(props.garden, seeds));\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed);\n      setChosenseed(null);\n      updateSeeds(-1);\n      setPlants(prev => {\n        return [newPlant, ...prev];\n      });\n    }\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    console.log(\"In update seed\");\n    let updatedSeed = seeds[index];\n    console.log(updatedSeed);\n    updatedSeed.quantity += increment;\n    setSeeds(seeds => ({ ...seeds,\n      [index]: updatedSeed\n    }));\n    setSeedindex(null);\n  };\n\n  const removeBalloon = index => {\n    console.log(\"READY TO REMOVE BALLOON\");\n    let removedBalloon = balloons[index];\n    console.log(removedBalloon);\n    removedBalloon.claimed = true;\n    console.log(removedBalloon);\n    setBalloons(balloons => ({ ...balloons,\n      [index]: removedBalloon\n    }));\n    console.log(balloons);\n  };\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\");\n    saveGarden(props.id, plants, props.world, props.worldChosen, props.seeds);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Garden, {\n      plants: plants,\n      balloons: balloons,\n      world: props.world,\n      seeds: props.seeds,\n      selectSeed: selectSeed,\n      removeBalloon: removeBalloon,\n      updateSeeds: updateSeeds,\n      sowPlant: sowPlant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(Seeds, {\n      seeds: props.seeds,\n      className: \"App-header\",\n      selectSeed: selectSeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(Worlds, {\n      className: \"App-header\",\n      newWorld: props.newWorld,\n      saveWorld: props.saveWorld\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 105\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SeedBank, \"ZnFerqDYVzd6VbT8IHZpojZF6Fg=\");\n\n_c = SeedBank;\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["api","React","useRef","useState","useMemo","useEffect","Suspense","Canvas","useFrame","extend","THREE","Grass","Plant","Camera","Sun","SkyBox","Seeds","Garden","Worlds","setDate","parseGarden","saveGarden","createId","createPlant","getBalloons","styled","EffectComposer","DepthOfField","Bloom","Noise","Vignette","SeedBank","props","plants","setPlants","garden","chosenSeed","setChosenseed","seeds","setSeeds","seedIndex","setSeedindex","balloons","setBalloons","sowPlant","event","newPlant","updateSeeds","prev","selectSeed","selectedSeed","index","seed","quantity","increment","console","log","updatedSeed","removeBalloon","removedBalloon","claimed","id","world","worldChosen","newWorld","saveWorld"],"mappings":"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","sourcesContent":["import '../style/App.css';\nimport api from '../api';\nimport React, { useRef, useState, useMemo, useEffect, Suspense } from \"react\";\nimport { Canvas, useFrame, extend } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { Grass, Plant, Camera, Sun, SkyBox, Seeds, Garden, Worlds } from '../components';\nimport { setDate, parseGarden, saveGarden, createId, createPlant } from '../functions'\nimport { getBalloons } from '../gameObjects'\nimport styled from 'styled-components';\nimport { EffectComposer, DepthOfField, Bloom, Noise, Vignette } from 'react-postprocessing'\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(null) // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState(getBalloons(props.garden, seeds))\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(null)\n      updateSeeds(-1)\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n    setChosenseed(selectedSeed)\n    setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    console.log(\"In update seed\")\n    let updatedSeed = seeds[index]\n    console.log(updatedSeed)\n    updatedSeed.quantity += increment\n    setSeeds(seeds =>({\n      ...seeds,\n      [index]: updatedSeed\n    }))\n    setSeedindex(null)\n  }\n\n  const removeBalloon = (index) => {\n    console.log(\"READY TO REMOVE BALLOON\")\n    let removedBalloon = balloons[index]\n    console.log(removedBalloon)\n    removedBalloon.claimed = true\n    console.log(removedBalloon)\n    setBalloons(balloons => ({\n      ...balloons,\n      [index]: removedBalloon\n    }))\n    console.log(balloons)\n  }\n\n\n\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, props.seeds)\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Garden\n    plants={plants}\n    balloons={balloons}\n    world={props.world}\n    seeds={props.seeds}\n    selectSeed={selectSeed}\n    removeBalloon={removeBalloon}\n    updateSeeds={updateSeeds}\n    sowPlant={sowPlant} />\n    {props.worldChosen ? <Seeds seeds={props.seeds} className=\"App-header\" selectSeed={selectSeed} /> : <Worlds className=\"App-header\" newWorld={props.newWorld} saveWorld={ props.saveWorld } />}\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}