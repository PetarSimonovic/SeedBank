{"ast":null,"code":"const seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];\nconst seeds1 = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}];\n\nfunction calculateAchievement(seeds) {\n  if (seeds.length === seedBank.length) {\n    return seeds;\n  }\n\n  console.log(seeds);\n  let duplicate = true;\n  let newSeed = {};\n\n  while (duplicate) {\n    newSeed = sample(seedBank);\n    duplicate = checkDuplicate(newSeed, seeds);\n  }\n\n  console.log(\"Chosen seed is\");\n  console.log(newSeed);\n  return updateSeeds(seeds, newSeed);\n}\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      console.log(seed.type + \" \" + newSeed.type);\n      console.log(\"Duplicate \" + seed.type + \" \" + newSeed.type);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateSeeds(seeds, newSeed) {\n  const updatedSeeds = [];\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n    updatedSeeds.push(seed);\n    console.log(updatedSeeds);\n  }\n\n  updatedSeeds.push(newSeed);\n  return updatedSeeds;\n}\n\nconsole.log(\"RESULT\");\nconsole.log(calculateAchievement(seeds1));","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["seedBank","type","quantity","seeds1","calculateAchievement","seeds","length","console","log","duplicate","newSeed","sample","checkDuplicate","updateSeeds","array","Math","floor","random","index","seed","updatedSeeds","push"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CACf;AAACC,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACD,EAAAA,IAAI,EAAE,OAAP;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACD,EAAAA,IAAI,EAAE,WAAP;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACD,EAAAA,IAAI,EAAE,QAAP;AAAiBC,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB;AAOA,MAAMC,MAAM,GAAI,CACd;AAACF,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,QAAQ,EAAE;AAAlC,CADc,EAEd;AAACD,EAAAA,IAAI,EAAE,OAAP;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAFc,CAAhB;;AAKA,SAASE,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,CAACC,MAAN,KAAiBN,QAAQ,CAACM,MAA9B,EAAsC;AACpC,WAAOD,KAAP;AACD;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,MAAII,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,SAAOD,SAAP,EAAkB;AAChBC,IAAAA,OAAO,GAAGC,MAAM,CAACX,QAAD,CAAhB;AACAS,IAAAA,SAAS,GAAGG,cAAc,CAACF,OAAD,EAAUL,KAAV,CAA1B;AACD;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AACA,SAAOG,WAAW,CAACR,KAAD,EAAQK,OAAR,CAAlB;AACD;;AAGD,SAASC,MAAT,CAAgBG,KAAhB,EAAuB;AACrB,SAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACR,MAAjC,CAAD,CAAZ;AACD;;AAED,SAASM,cAAT,CAAwBF,OAAxB,EAAiCL,KAAjC,EAAwC;AACtC,OAAK,IAAIa,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,KAAK,CAACC,MAAlC,EAA0CY,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGd,KAAK,CAACa,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAAClB,IAAL,KAAcS,OAAO,CAACT,IAA1B,EAAgC;AAC9BM,MAAAA,OAAO,CAACC,GAAR,CAAYW,IAAI,CAAClB,IAAL,GAAY,GAAZ,GAAkBS,OAAO,CAACT,IAAtC;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeW,IAAI,CAAClB,IAApB,GAA2B,GAA3B,GAAiCS,OAAO,CAACT,IAArD;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED;;AAED,SAASY,WAAT,CAAqBR,KAArB,EAA4BK,OAA5B,EAAqC;AACnC,QAAMU,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIF,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,KAAK,CAACC,MAAlC,EAA0CY,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGd,KAAK,CAACa,KAAD,CAAlB;AACAE,IAAAA,YAAY,CAACC,IAAb,CAAkBF,IAAlB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYY,YAAZ;AACD;;AACDA,EAAAA,YAAY,CAACC,IAAb,CAAkBX,OAAlB;AACA,SAAOU,YAAP;AACD;;AAEDb,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,OAAO,CAACC,GAAR,CAAYJ,oBAAoB,CAACD,MAAD,CAAhC","sourcesContent":["const seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3}\n]\n\nconst seeds1 =  [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n]\n\nfunction calculateAchievement(seeds) {\n  if (seeds.length === seedBank.length) {\n    return seeds\n  }\n  console.log(seeds)\n  let duplicate = true\n  let newSeed = {}\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n  console.log(\"Chosen seed is\")\n  console.log(newSeed)\n  return updateSeeds(seeds, newSeed)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      console.log(seed.type + \" \" + newSeed.type )\n      console.log(\"Duplicate \" + seed.type + \" \" + newSeed.type)\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    updatedSeeds.push(seed)\n    console.log(updatedSeeds)\n  }\n  updatedSeeds.push(newSeed)\n  return updatedSeeds\n}\n\nconsole.log(\"RESULT\")\nconsole.log(calculateAchievement(seeds1))\n"]},"metadata":{},"sourceType":"module"}