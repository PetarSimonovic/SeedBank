{"ast":null,"code":"import { sample } from './';\nexport default function calculateRewards(plantNumber, seeds) {\n  console.log(\"Checking rewards\");\n  return newSeed(seeds);\n}\n\nfunction newSeed(seeds) {\n  let duplicate = true;\n\n  while (duplicate) {\n    let newSeed = sample(seedBank);\n    console.log(\"Checking duplicate for\");\n    console.log(newSeed);\n    duplicate = checkDuplicate(newSeed, seeds);\n  }\n\n  console.log(\"newSeed is\");\n  console.log(newSeed);\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    let seed = seeds[index];\n    console.log(seed);\n\n    if (newSeed.type === seeds[index].type) {\n      console.log(\"duplicate\");\n      return true;\n    }\n  }\n\n  console.log(\"No duplicate found\");\n  return false;\n}\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateRewards.js"],"names":["sample","calculateRewards","plantNumber","seeds","console","log","newSeed","duplicate","seedBank","checkDuplicate","index","length","seed","type","quantity"],"mappings":"AAAA,SAASA,MAAT,QAAuB,IAAvB;AAGA,eAAe,SAASC,gBAAT,CAA0BC,WAA1B,EAAuCC,KAAvC,EAA8C;AAC3DC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACE,SAAOC,OAAO,CAACH,KAAD,CAAd;AACD;;AAGH,SAASG,OAAT,CAAiBH,KAAjB,EAAwB;AACtB,MAAII,SAAS,GAAG,IAAhB;;AACA,SAAOA,SAAP,EAAkB;AAChB,QAAID,OAAO,GAAGN,MAAM,CAACQ,QAAD,CAApB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACAC,IAAAA,SAAS,GAAGE,cAAc,CAACH,OAAD,EAAUH,KAAV,CAA1B;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACD;;AAED,SAASG,cAAT,CAAwBH,OAAxB,EAAiCH,KAAjC,EAAwC;AACtC,OAAK,IAAIO,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,KAAK,CAACQ,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjD,QAAIE,IAAI,GAAGT,KAAK,CAACO,KAAD,CAAhB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;;AACA,QAAIN,OAAO,CAACO,IAAR,KAAiBV,KAAK,CAACO,KAAD,CAAL,CAAaG,IAAlC,EAAwC;AACtCT,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,aAAO,IAAP;AACD;AACA;;AACDD,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,SAAO,KAAP;AACD;;AAEH,MAAMG,QAAQ,GAAG,CACf;AAACK,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACD,EAAAA,IAAI,EAAE,OAAP;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACD,EAAAA,IAAI,EAAE,WAAP;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACD,EAAAA,IAAI,EAAE,QAAP;AAAiBC,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB","sourcesContent":["import { sample } from './'\n\n\nexport default function calculateRewards(plantNumber, seeds) {\n  console.log(\"Checking rewards\")\n    return newSeed(seeds)\n  }\n\n\nfunction newSeed(seeds) {\n  let duplicate = true\n  while (duplicate) {\n    let newSeed = sample(seedBank)\n    console.log(\"Checking duplicate for\")\n    console.log(newSeed)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n  console.log(\"newSeed is\")\n  console.log(newSeed)\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    let seed = seeds[index]\n    console.log(seed)\n    if (newSeed.type === seeds[index].type) {\n      console.log(\"duplicate\")\n      return true\n    }\n    }\n    console.log(\"No duplicate found\")\n    return false\n  }\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n]\n"]},"metadata":{},"sourceType":"module"}