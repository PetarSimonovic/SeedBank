{"ast":null,"code":"import { sample } from './';\nexport default function calculateRewards(plants, seeds) {\n  if (plants.length % 5 !== 0 || seeds.length === seedBank.length) {\n    return null;\n  } else {\n    return newSeed();\n  }\n}\n\nfunction newSeed() {\n  let duplicate = true;\n\n  while (duplicate) {\n    let newSeed = sample(seedBank);\n    duplicate = checkDuplicate(newSeed, seeds);\n  }\n\n  console.log(\"newSeed is\");\n  console.log(newSeed);\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < plants.length; index++) {\n    if (newSeed.type === seeds[index].type) {\n      return true;\n    } else {\n      continue;\n    }\n  }\n}\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateRewards.js"],"names":["sample","calculateRewards","plants","seeds","length","seedBank","newSeed","duplicate","checkDuplicate","console","log","index","type","quantity"],"mappings":"AAAA,SAASA,MAAT,QAAuB,IAAvB;AAGA,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,KAAlC,EAAyC;AACtD,MAAID,MAAM,CAACE,MAAP,GAAgB,CAAhB,KAAsB,CAAtB,IAA2BD,KAAK,CAACC,MAAN,KAAiBC,QAAQ,CAACD,MAAzD,EAAiE;AAC/D,WAAO,IAAP;AACD,GAFD,MAGM;AACJ,WAAOE,OAAO,EAAd;AACD;AAEF;;AAED,SAASA,OAAT,GAAmB;AACjB,MAAIC,SAAS,GAAG,IAAhB;;AACA,SAAOA,SAAP,EAAkB;AAChB,QAAID,OAAO,GAAGN,MAAM,CAACK,QAAD,CAApB;AACAE,IAAAA,SAAS,GAAGC,cAAc,CAACF,OAAD,EAAUH,KAAV,CAA1B;AACD;;AACDM,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACD;;AAED,SAASE,cAAT,CAAwBF,OAAxB,EAAiCH,KAAjC,EAAwC;AACtC,OAAK,IAAIQ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGT,MAAM,CAACE,MAAnC,EAA2CO,KAAK,EAAhD,EAAoD;AAClD,QAAIL,OAAO,CAACM,IAAR,KAAiBT,KAAK,CAACQ,KAAD,CAAL,CAAaC,IAAlC,EAAwC;AACtC,aAAO,IAAP;AACD,KAFD,MAEO;AACL;AACD;AACF;AAEF;;AAED,MAAMP,QAAQ,GAAG,CACf;AAACO,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACD,EAAAA,IAAI,EAAE,OAAP;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACD,EAAAA,IAAI,EAAE,WAAP;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACD,EAAAA,IAAI,EAAE,QAAP;AAAiBC,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB","sourcesContent":["import { sample } from './'\n\n\nexport default function calculateRewards(plants, seeds) {\n  if (plants.length % 5 !== 0 || seeds.length === seedBank.length) {\n    return null\n  }\n  else  {\n    return newSeed()\n  }\n\n}\n\nfunction newSeed() {\n  let duplicate = true\n  while (duplicate) {\n    let newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n  console.log(\"newSeed is\")\n  console.log(newSeed)\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < plants.length; index++) {\n    if (newSeed.type === seeds[index].type) {\n      return true\n    } else {\n      continue\n    }\n  }\n\n}\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n]\n"]},"metadata":{},"sourceType":"module"}