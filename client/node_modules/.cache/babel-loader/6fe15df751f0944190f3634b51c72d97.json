{"ast":null,"code":"import _objectSpread from\"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Billboard,Text}from'@react-three/drei';import React,{Component,useState,useRef,useEffect}from'react';import{loadFriends,createId}from'../functions';import{Garden}from'./';// generates a floating garden for each friend and places it in the background\n// uses the same Garden generation code as the user garden, except FakeGrass can't be planted (probably could merge this with Grass)\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function Friends(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),friends=_useState2[0],setFriends=_useState2[1];var mesh=useRef();useEffect(function(){loadFriends(props.userId).then(function(data){return setFriends(data);});},[]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"mesh\",_objectSpread(_objectSpread({},props),{},{ref:mesh,scale:1,children:createFriends(props,friends)}))});}function createFriends(props,friends){var friendCollection=[];for(var index=0;index<friends.length;index++){var friend=friends[index];friendCollection.push(/*#__PURE__*/_jsx(Garden,{sendPlant:props.sendPlant,friend:true,position:friend.position,name:friend.name,friendId:friend.friendId,world:friend.world},createId()));}return friendCollection;}export default Friends;","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Friends.jsx"],"names":["Billboard","Text","React","Component","useState","useRef","useEffect","loadFriends","createId","Garden","Friends","props","friends","setFriends","mesh","userId","then","data","createFriends","friendCollection","index","length","friend","push","sendPlant","position","name","friendId","world"],"mappings":"ydAAA,OAASA,SAAT,CAAoBC,IAApB,KAAgC,mBAAhC,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,CAAqCC,MAArC,CAA6CC,SAA7C,KAA8D,OAA9D,CACA,OAASC,WAAT,CAAsBC,QAAtB,KAAsC,cAAtC,CACA,OAASC,MAAT,KAAuB,IAAvB,CAEA;AACA;gGAEA,QAASC,CAAAA,OAAT,CAAiBC,KAAjB,CAAwB,CAEtB,cAA8BP,QAAQ,CAAC,EAAD,CAAtC,wCAAOQ,OAAP,eAAgBC,UAAhB,eACA,GAAMC,CAAAA,IAAI,CAAGT,MAAM,EAAnB,CAEAC,SAAS,CAAC,UAAM,CACdC,WAAW,CAACI,KAAK,CAACI,MAAP,CAAX,CAA0BC,IAA1B,CAA+B,SAAAC,IAAI,QAAIJ,CAAAA,UAAU,CAACI,IAAD,CAAd,EAAnC,EACD,CAFQ,CAEN,EAFM,CAAT,CAIA,mBACE,sCACA,2CACMN,KADN,MAEE,GAAG,CAAEG,IAFP,CAGE,KAAK,CAAE,CAHT,UAKGI,aAAa,CAACP,KAAD,CAAQC,OAAR,CALhB,GADA,EADF,CAWD,CAED,QAASM,CAAAA,aAAT,CAAuBP,KAAvB,CAA8BC,OAA9B,CAAuC,CACrC,GAAMO,CAAAA,gBAAgB,CAAG,EAAzB,CACA,IAAK,GAAIC,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGR,OAAO,CAACS,MAApC,CAA4CD,KAAK,EAAjD,CAAqD,CACnD,GAAME,CAAAA,MAAM,CAAGV,OAAO,CAACQ,KAAD,CAAtB,CACAD,gBAAgB,CAACI,IAAjB,cAAsB,KAAC,MAAD,EAAyB,SAAS,CAAEZ,KAAK,CAACa,SAA1C,CAAqD,MAAM,CAAE,IAA7D,CAAmE,QAAQ,CAAEF,MAAM,CAACG,QAApF,CAA8F,IAAI,CAAEH,MAAM,CAACI,IAA3G,CAAiH,QAAQ,CAAEJ,MAAM,CAACK,QAAlI,CAA4I,KAAK,CAAEL,MAAM,CAACM,KAA1J,EAAapB,QAAQ,EAArB,CAAtB,EACD,CACD,MAAOW,CAAAA,gBAAP,CACD,CAGD,cAAeT,CAAAA,OAAf","sourcesContent":["import { Billboard, Text } from '@react-three/drei'\nimport React, { Component, useState, useRef, useEffect } from 'react';\nimport { loadFriends, createId } from '../functions'\nimport { Garden } from './'\n\n// generates a floating garden for each friend and places it in the background\n// uses the same Garden generation code as the user garden, except FakeGrass can't be planted (probably could merge this with Grass)\n\nfunction Friends(props) {\n\n  const [friends, setFriends] = useState([])\n  const mesh = useRef()\n\n  useEffect(() => {\n    loadFriends(props.userId).then(data => setFriends(data))\n  }, [])\n\n  return (\n    <>\n    <mesh\n      {...props }\n      ref={mesh}\n      scale={1}\n      >\n      {createFriends(props, friends)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createFriends(props, friends) {\n  const friendCollection = []\n  for (let index = 0; index < friends.length; index++) {\n    const friend = friends[index]\n    friendCollection.push(<Garden key={createId()} sendPlant={props.sendPlant} friend={true} position={friend.position} name={friend.name} friendId={friend.friendId} world={friend.world} />)\n  }\n  return friendCollection\n}\n\n\nexport default Friends\n"]},"metadata":{},"sourceType":"module"}