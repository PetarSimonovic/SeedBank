{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$();\n\nimport '../style/App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { Seeds, Garden, Worlds } from '../components';\nimport { calculateAchievement, saveGarden, createPlant } from '../functions';\nimport { getBalloons, Balloon } from '../gameObjects'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  let achievement = true;\n  const [plants, setPlants] = useState(props.garden); //  an array of plant components\n\n  const [chosenSeed, setChosenseed] = useState(\"\"); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seeds, setSeeds] = useState(props.seeds); //  an array of the player's available seeds\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [balloons, setBalloons] = useState(getBalloons(plants, seeds, props.lastLogin, props.today));\n  console.log(\"SEEDS IN SEEDBANK IS\");\n  console.log(seeds);\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      achievement = true;\n      const newPlant = createPlant(event, chosenSeed);\n      setChosenseed(\"\");\n      setPlants(prev => {\n        return [newPlant, ...prev];\n      });\n      updateSeeds(-1);\n    }\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    console.log(\"UPDATING SEEDS\");\n    console.log(seeds);\n    const updatedSeeds = [...seeds];\n    updatedSeeds[index].quantity += increment;\n    setSeeds(updatedSeeds);\n    setSeedindex(null);\n  };\n\n  const removeBalloon = index => {\n    let removedBalloon = balloons[index];\n    removedBalloon.claimed = true; // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n\n    setBalloons(prev => {\n      return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon];\n    });\n    console.log(balloons);\n  };\n\n  const checkAchievements = () => {\n    console.log(\"Checking achievements\");\n    const fivePlants = plants.length % 5;\n    console.log(seeds);\n    console.log(fivePlants);\n\n    if (fivePlants === 0 && plants.length > 0 && achievement) {\n      console.log(\"Achievement!\");\n      const newSeeds = calculateAchievement(seeds);\n      console.log(\"New seeds is\");\n      console.log(newSeeds);\n      setSeeds(newSeeds);\n      achievement = false;\n    }\n\n    console.log(\"SEEDS is\");\n    console.log(seeds);\n  };\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\");\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds);\n    checkAchievements();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Garden, {\n      plants: plants,\n      balloons: balloons,\n      world: props.world,\n      seeds: seeds,\n      selectSeed: selectSeed,\n      removeBalloon: removeBalloon,\n      updateSeeds: updateSeeds,\n      sowPlant: sowPlant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(Seeds, {\n      seeds: seeds,\n      className: \"App-header\",\n      selectSeed: selectSeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(Worlds, {\n      className: \"App-header\",\n      newWorld: props.newWorld,\n      saveWorld: props.saveWorld\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 99\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SeedBank, \"cqAnKOUN4erkLl4KP0JQFMT6R6Q=\");\n\n_c = SeedBank;\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["React","useState","useEffect","Seeds","Garden","Worlds","calculateAchievement","saveGarden","createPlant","getBalloons","Balloon","SeedBank","props","achievement","plants","setPlants","garden","chosenSeed","setChosenseed","seeds","setSeeds","seedIndex","setSeedindex","balloons","setBalloons","lastLogin","today","console","log","sowPlant","event","newPlant","prev","updateSeeds","selectSeed","selectedSeed","index","seed","quantity","increment","updatedSeeds","removeBalloon","removedBalloon","claimed","filter","balloon","id","checkAchievements","fivePlants","length","newSeeds","world","worldChosen","newWorld","saveWorld"],"mappings":";;;AAAA,OAAO,kBAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,MAAxB,QAAsC,eAAtC;AACA,SAASC,oBAAT,EAA+BC,UAA/B,EAA2CC,WAA3C,QAA8D,cAA9D;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,gBAArC,C,CAEA;AACA;AAGA;AACA;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAEvB,MAAIC,WAAW,GAAG,IAAlB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAACW,KAAK,CAACI,MAAP,CAApC,CAHuB,CAG4B;;AACnD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C,CAJuB,CAI0B;;AACjD,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAACW,KAAK,CAACO,KAAP,CAAlC,CALuB,CAKyB;;AAChD,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,IAAD,CAA1C,CANuB,CAM0B;;AACjD,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAACQ,WAAW,CAACK,MAAD,EAASK,KAAT,EAAgBP,KAAK,CAACa,SAAtB,EAAiCb,KAAK,CAACc,KAAvC,CAAZ,CAAxC;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;;AAGA,QAAMU,QAAQ,GAAKC,KAAF,IAAa;AAC5B,QAAIb,UAAJ,EAAgB;AACdJ,MAAAA,WAAW,GAAG,IAAd;AACA,YAAMkB,QAAQ,GAAGvB,WAAW,CAACsB,KAAD,EAAQb,UAAR,CAA5B;AACAC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAH,MAAAA,SAAS,CAAGiB,IAAD,IAAU;AACnB,eAAO,CAACD,QAAD,EAAW,GAAGC,IAAd,CAAP;AACD,OAFQ,CAAT;AAGAC,MAAAA,WAAW,CAAC,CAAC,CAAF,CAAX;AACD;AACF,GAVD;;AAYA,QAAMC,UAAU,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyB;AAC1C,UAAMC,IAAI,GAAGlB,KAAK,CAACiB,KAAD,CAAlB;;AACA,QAAIjB,KAAK,CAACiB,KAAD,CAAL,CAAaE,QAAb,GAAwB,CAA5B,EAA+B;AAC/BpB,MAAAA,aAAa,CAACiB,YAAD,CAAb;AACAb,MAAAA,YAAY,CAACc,KAAD,CAAZ;AACC;AACF,GAND;;AAQA,QAAMH,WAAW,GAAG,CAACM,SAAD,EAAYH,KAAK,GAAGf,SAApB,KAAkC;AACpDM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA,UAAMqB,YAAY,GAAG,CAAC,GAAGrB,KAAJ,CAArB;AACAqB,IAAAA,YAAY,CAACJ,KAAD,CAAZ,CAAoBE,QAApB,IAAgCC,SAAhC;AACAnB,IAAAA,QAAQ,CAACoB,YAAD,CAAR;AACAlB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAPD;;AASA,QAAMmB,aAAa,GAAIL,KAAD,IAAW;AAC/B,QAAIM,cAAc,GAAGnB,QAAQ,CAACa,KAAD,CAA7B;AACAM,IAAAA,cAAc,CAACC,OAAf,GAAyB,IAAzB,CAF+B,CAG/B;;AACAnB,IAAAA,WAAW,CACRQ,IAAD,IAAU;AACR,aAAO,CAACA,IAAI,CAACY,MAAL,CAAYC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeJ,cAAc,CAACI,EAArD,CAAD,EAA2DJ,cAA3D,CAAP;AACD,KAHQ,CAAX;AAKAf,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACD,GAVD;;AAYA,QAAMwB,iBAAiB,GAAG,MAAM;AAC9BpB,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,UAAMoB,UAAU,GAAGlC,MAAM,CAACmC,MAAP,GAAgB,CAAnC;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYoB,UAAZ;;AACA,QAAIA,UAAU,KAAK,CAAf,IAAoBlC,MAAM,CAACmC,MAAP,GAAgB,CAApC,IAAyCpC,WAA7C,EAA0D;AACxDc,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,YAAMsB,QAAQ,GAAG5C,oBAAoB,CAACa,KAAD,CAArC;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYsB,QAAZ;AACA9B,MAAAA,QAAQ,CAAC8B,QAAD,CAAR;AACArC,MAAAA,WAAW,GAAG,KAAd;AAED;;AACDc,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACD,GAhBD;;AAmBAjB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACArB,IAAAA,UAAU,CAACK,KAAK,CAACkC,EAAP,EAAWhC,MAAX,EAAmBF,KAAK,CAACuC,KAAzB,EAAgCvC,KAAK,CAACwC,WAAtC,EAAmDjC,KAAnD,CAAV;AACA4B,IAAAA,iBAAiB;AAClB,GALQ,CAAT;AAQA,sBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AACA,MAAA,MAAM,EAAEjC,MADR;AAEA,MAAA,QAAQ,EAAES,QAFV;AAGA,MAAA,KAAK,EAAEX,KAAK,CAACuC,KAHb;AAIA,MAAA,KAAK,EAAEhC,KAJP;AAKA,MAAA,UAAU,EAAEe,UALZ;AAMA,MAAA,aAAa,EAAEO,aANf;AAOA,MAAA,WAAW,EAAER,WAPb;AAQA,MAAA,QAAQ,EAAEJ;AARV;AAAA;AAAA;AAAA;AAAA,YADF,EAUGjB,KAAK,CAACwC,WAAN,gBAAoB,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEjC,KAAd;AAAqB,MAAA,SAAS,EAAC,YAA/B;AAA4C,MAAA,UAAU,EAAEe;AAAxD;AAAA;AAAA;AAAA;AAAA,YAApB,gBAA6F,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,QAAQ,EAAEtB,KAAK,CAACyC,QAA/C;AAAyD,MAAA,SAAS,EAAGzC,KAAK,CAAC0C;AAA3E;AAAA;AAAA;AAAA;AAAA,YAVhG;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAcD;;GAhGQ3C,Q;;KAAAA,Q;AAkGT,eAAeA,QAAf","sourcesContent":["import '../style/App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { Seeds, Garden, Worlds } from '../components';\nimport { calculateAchievement, saveGarden, createPlant } from '../functions'\nimport { getBalloons, Balloon } from '../gameObjects'\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n  let achievement = true\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState(getBalloons(plants, seeds, props.lastLogin, props.today))\n\n\n  console.log(\"SEEDS IN SEEDBANK IS\")\n  console.log(seeds)\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      achievement = true\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(\"\")\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      updateSeeds(-1)\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n    setChosenseed(selectedSeed)\n    setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    console.log(\"UPDATING SEEDS\")\n    console.log(seeds)\n    const updatedSeeds = [...seeds]\n    updatedSeeds[index].quantity += increment\n    setSeeds(updatedSeeds)\n    setSeedindex(null)\n  }\n\n  const removeBalloon = (index) => {\n    let removedBalloon = balloons[index]\n    removedBalloon.claimed = true\n    // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n    setBalloons(\n      (prev) => {\n        return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon]\n      }\n    )\n    console.log(balloons)\n  }\n\n  const checkAchievements = () => {\n    console.log(\"Checking achievements\")\n    const fivePlants = plants.length % 5\n    console.log(seeds)\n    console.log(fivePlants)\n    if (fivePlants === 0 && plants.length > 0 && achievement) {\n      console.log(\"Achievement!\")\n      const newSeeds = calculateAchievement(seeds)\n      console.log(\"New seeds is\")\n      console.log(newSeeds)\n      setSeeds(newSeeds)\n      achievement = false\n\n    }\n    console.log(\"SEEDS is\")\n    console.log(seeds)\n  }\n\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n    checkAchievements()\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Garden\n    plants={plants}\n    balloons={balloons}\n    world={props.world}\n    seeds={seeds}\n    selectSeed={selectSeed}\n    removeBalloon={removeBalloon}\n    updateSeeds={updateSeeds}\n    sowPlant={sowPlant} />\n    {props.worldChosen ? <Seeds seeds={seeds} className=\"App-header\" selectSeed={selectSeed} /> : <Worlds className=\"App-header\" newWorld={props.newWorld} saveWorld={ props.saveWorld } />}\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}