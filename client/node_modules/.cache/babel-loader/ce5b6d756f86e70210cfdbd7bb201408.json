{"ast":null,"code":"import { sendBalloon, sample } from './'; // This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP/DRY\n\nexport default function calculateAchievement(seeds, id, plantCount) {\n  console.log(\"In Achievement Calculator seeds are:\");\n  console.log(seeds);\n  let duplicate = true;\n  let newSeed = {};\n\n  if (seeds.length === seedBank.length) {\n    let bonusSeed = sample(seeds);\n    console.log(\"bonusSeeds\");\n    sendBalloon(id, bonusSeed.type, 3, `${plantCount} plants! Bonus ${bonusSeed.type} seeds!`); //userId, type, quantity = 0, message, sender = \"SeedBank\")\n\n    return; // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n    while (duplicate) {\n      newSeed = sample(seedBank);\n      duplicate = checkDuplicate(newSeed, seeds, id, plantCount);\n    }\n  }\n\n  sendBalloon(id, newSeed.type, 3, `${plantCount} plants! ${'\\n'} ${newSeed.type} unlocked!`);\n  return newSeed;\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      return true;\n    }\n  }\n\n  return false;\n} //\n// function updateSeeds(seeds, newSeed, id, plantCount) {\n//   const updatedSeeds = []\n//   for (let index = 0; index < seeds.length; index++) {\n//     const seed = seeds[index]\n//     if (seed.type === newSeed.type) {\n//       seed.quantity += newSeed.quantity\n//     }\n//     updatedSeeds.push(seed)\n//   }\n//   newSeed.quantity = 0\n//   updatedSeeds.push(newSeed)\n//   return updatedSeeds\n// }\n\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}, {\n  type: \"snowdrop\",\n  quantity: 3\n}, {\n  type: \"rose\",\n  quantity: 3\n}, {\n  type: \"venusFlyTrap\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["sendBalloon","sample","calculateAchievement","seeds","id","plantCount","console","log","duplicate","newSeed","length","seedBank","bonusSeed","type","checkDuplicate","index","seed","quantity"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,IAApC,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,EAArC,EAAyCC,UAAzC,EAAqD;AAClEC,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,MAAIK,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIN,KAAK,CAACO,MAAN,KAAiBC,QAAQ,CAACD,MAA9B,EAAsC;AACpC,QAAIE,SAAS,GAAGX,MAAM,CAACE,KAAD,CAAtB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAP,IAAAA,WAAW,CAACI,EAAD,EAAKQ,SAAS,CAACC,IAAf,EAAqB,CAArB,EAAyB,GAAER,UAAW,kBAAiBO,SAAS,CAACC,IAAK,SAAtE,CAAX,CAHoC,CAGyD;;AAC7F,WAJoC,CAKpC;AACA;AACA;AACD,GARD,MAQO;AACP,WAAOL,SAAP,EAAkB;AAChBC,MAAAA,OAAO,GAAGR,MAAM,CAACU,QAAD,CAAhB;AACAH,MAAAA,SAAS,GAAGM,cAAc,CAACL,OAAD,EAAUN,KAAV,EAAiBC,EAAjB,EAAqBC,UAArB,CAA1B;AACD;AACF;;AACCL,EAAAA,WAAW,CAACI,EAAD,EAAKK,OAAO,CAACI,IAAb,EAAmB,CAAnB,EAAuB,GAAER,UAAW,YAAW,IAAK,IAAGI,OAAO,CAACI,IAAK,YAApE,CAAX;AACA,SAAOJ,OAAP;AACD;;AAED,SAASK,cAAT,CAAwBL,OAAxB,EAAiCN,KAAjC,EAAwC;AACtC,OAAK,IAAIY,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGZ,KAAK,CAACO,MAAlC,EAA0CK,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGb,KAAK,CAACY,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACH,IAAL,KAAcJ,OAAO,CAACI,IAA1B,EAAgC;AAC9B,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMF,QAAQ,GAAG,CACf;AAACE,EAAAA,IAAI,EAAE,eAAP;AAAwBI,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACJ,EAAAA,IAAI,EAAE,OAAP;AAAgBI,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACJ,EAAAA,IAAI,EAAE,WAAP;AAAoBI,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACJ,EAAAA,IAAI,EAAE,QAAP;AAAiBI,EAAAA,QAAQ,EAAE;AAA3B,CAJe,EAKf;AAACJ,EAAAA,IAAI,EAAE,UAAP;AAAmBI,EAAAA,QAAQ,EAAE;AAA7B,CALe,EAMf;AAACJ,EAAAA,IAAI,EAAE,MAAP;AAAeI,EAAAA,QAAQ,EAAE;AAAzB,CANe,EAOf;AAACJ,EAAAA,IAAI,EAAE,cAAP;AAAuBI,EAAAA,QAAQ,EAAE;AAAjC,CAPe,CAAjB","sourcesContent":["import { sendBalloon, sample } from './'\n\n// This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP/DRY\n\nexport default function calculateAchievement(seeds, id, plantCount) {\n  console.log(\"In Achievement Calculator seeds are:\")\n  console.log(seeds)\n  let duplicate = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    let bonusSeed = sample(seeds)\n    console.log(\"bonusSeeds\")\n    sendBalloon(id, bonusSeed.type, 3, `${plantCount} plants! Bonus ${bonusSeed.type} seeds!`  ) //userId, type, quantity = 0, message, sender = \"SeedBank\")\n    return\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds, id, plantCount)\n  }\n}\n  sendBalloon(id, newSeed.type, 3, `${plantCount} plants! ${'\\n'} ${newSeed.type} unlocked!`)\n  return newSeed\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n//\n// function updateSeeds(seeds, newSeed, id, plantCount) {\n//   const updatedSeeds = []\n//   for (let index = 0; index < seeds.length; index++) {\n//     const seed = seeds[index]\n//     if (seed.type === newSeed.type) {\n//       seed.quantity += newSeed.quantity\n//     }\n//     updatedSeeds.push(seed)\n//   }\n//   newSeed.quantity = 0\n//   updatedSeeds.push(newSeed)\n//   return updatedSeeds\n// }\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}