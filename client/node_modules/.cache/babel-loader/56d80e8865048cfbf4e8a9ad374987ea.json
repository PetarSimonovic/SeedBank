{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { calculateAchievement, saveGarden, createPlant, loadBalloons } from '../functions';\nimport { Balloon } from '../gameObjects';\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Cloud, Balloons, SeedBox, IntroBalloons } from '../components'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  const [plants, setPlants] = useState(props.garden); //  an array of plant components\n\n  const [chosenSeed, setChosenseed] = useState(\"\"); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seeds, setSeeds] = useState(props.seeds); //  an array of the player's available seeds\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [seedList, setSeedlist] = useState(false);\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed);\n      setChosenseed(\"\");\n      setPlants(prev => {\n        return [newPlant, ...prev];\n      });\n      updateSeeds(-1);\n    }\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"Looking for \" + type);\n    const updatedSeeds = [...seeds];\n    console.log(updatedSeeds);\n    const index = updatedSeeds.findIndex(seed => seed.type === type);\n    console.log(\"Index \" + index);\n    updatedSeeds[index].quantity += increment;\n    setSeeds(updatedSeeds);\n    setSeedindex(null);\n  }; // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n\n\n  setBalloons(prev => {\n    return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon];\n  });\n}\n\n_s(SeedBank, \"J7iyWn3UBwfqjzKLN22MCrulmLc=\");\n\n_c = SeedBank;\n\nconst checkAchievements = () => {\n  _s2();\n\n  console.log(\"Checking achievements\");\n  console.log(plants.length);\n  const fivePlants = plants.length % 5;\n  const achievementCount = plants.length / 5; // how many multuples of five?\n\n  const startingSeeds = 2; // offset for the starting seeds\n\n  if (fivePlants === 0 && plants.length > 0 && seeds.length < achievementCount + startingSeeds) {\n    console.log(\"Achievement!\");\n    const newSeeds = calculateAchievement(seeds);\n    console.log(\"New seeds is\");\n    console.log(newSeeds);\n    setSeeds(newSeeds);\n  }\n\n  const toggleSeeds = () => {\n    setSeedlist(prevState => !prevState);\n    console.log(\"TOGGLE \" + seedList);\n  };\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\");\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds);\n    setSeedlist(seedList);\n    setBalloons(balloons);\n    checkAchievements();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"canvas\",\n      camera: {\n        position: [0, 2, 3.5]\n      },\n      children: [/*#__PURE__*/_jsxDEV(Camera, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: console.log(\"loading\"),\n        children: [/*#__PURE__*/_jsxDEV(Garden, {\n          sowPlant: sowPlant,\n          position: [0, 0, 0],\n          world: props.world,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }, this), plants, /*#__PURE__*/_jsxDEV(Balloons, {\n          removeBalloon: removeBalloon,\n          updateSeeds: updateSeeds,\n          balloons: balloons,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Sun, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Firmament, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(Cloud, {\n        seeds: seeds,\n        chosenSeed: chosenSeed,\n        seedList: seedList,\n        position: [-1, -1, 1.9],\n        selectSeed: selectSeed,\n        toggleSeeds: toggleSeeds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(IntroBalloons, {\n        saveWorld: props.saveWorld,\n        newWorld: props.newWorld\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 172\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(checkAchievements, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["React","useState","useEffect","Suspense","calculateAchievement","saveGarden","createPlant","loadBalloons","Balloon","Canvas","Garden","Camera","Sun","World","Firmament","Cloud","Balloons","SeedBox","IntroBalloons","SeedBank","props","plants","setPlants","garden","chosenSeed","setChosenseed","seeds","setSeeds","seedIndex","setSeedindex","seedList","setSeedlist","sowPlant","event","newPlant","prev","updateSeeds","selectSeed","selectedSeed","index","seed","quantity","increment","type","console","log","updatedSeeds","findIndex","setBalloons","filter","balloon","id","removedBalloon","checkAchievements","length","fivePlants","achievementCount","startingSeeds","newSeeds","toggleSeeds","prevState","world","worldChosen","balloons","position","removeBalloon","saveWorld","newWorld"],"mappings":";;;;AAAA,OAAO,kBAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,oBAAT,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwDC,YAAxD,QAA4E,cAA5E;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,GAAzB,EAA8BC,KAA9B,EAAqCC,SAArC,EAAgDC,KAAhD,EAAuDC,QAAvD,EAAiEC,OAAjE,EAA0EC,aAA1E,QAA+F,eAA/F,C,CAIA;AACA;AAGA;AACA;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAGvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAACmB,KAAK,CAACG,MAAP,CAApC,CAHuB,CAG4B;;AACnD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BxB,QAAQ,CAAC,EAAD,CAA5C,CAJuB,CAI0B;;AACjD,QAAM,CAACyB,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAACmB,KAAK,CAACM,KAAP,CAAlC,CALuB,CAKyB;;AAChD,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CAAC,IAAD,CAA1C,CANuB,CAM0B;;AACjD,QAAM,CAAC6B,QAAD,EAAWC,WAAX,IAA0B9B,QAAQ,CAAC,KAAD,CAAxC;;AAGA,QAAM+B,QAAQ,GAAKC,KAAF,IAAa;AAC5B,QAAIT,UAAJ,EAAgB;AACd,YAAMU,QAAQ,GAAG5B,WAAW,CAAC2B,KAAD,EAAQT,UAAR,CAA5B;AACAC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAH,MAAAA,SAAS,CAAGa,IAAD,IAAU;AACnB,eAAO,CAACD,QAAD,EAAW,GAAGC,IAAd,CAAP;AACD,OAFQ,CAAT;AAGAC,MAAAA,WAAW,CAAC,CAAC,CAAF,CAAX;AACD;AACF,GATD;;AAWA,QAAMC,UAAU,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyB;AAC1C,UAAMC,IAAI,GAAGd,KAAK,CAACa,KAAD,CAAlB;;AACA,QAAIb,KAAK,CAACa,KAAD,CAAL,CAAaE,QAAb,GAAwB,CAA5B,EAA+B;AAC7BhB,MAAAA,aAAa,CAACa,YAAD,CAAb;AACAT,MAAAA,YAAY,CAACU,KAAD,CAAZ;AACD;AACF,GAND;;AAQA,QAAMH,WAAW,GAAG,CAACM,SAAD,EAAYC,IAAZ,KAAqB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBF,IAA7B;AACA,UAAMG,YAAY,GAAG,CAAC,GAAGpB,KAAJ,CAArB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACA,UAAMP,KAAK,GAAGO,YAAY,CAACC,SAAb,CAAuBP,IAAI,IAAIA,IAAI,CAACG,IAAL,KAAcA,IAA7C,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWN,KAAvB;AACAO,IAAAA,YAAY,CAACP,KAAD,CAAZ,CAAoBE,QAApB,IAAgCC,SAAhC;AACAf,IAAAA,QAAQ,CAACmB,YAAD,CAAR;AACAjB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GATD,CA7BuB,CAwCrB;;;AACAmB,EAAAA,WAAW,CACRb,IAAD,IAAU;AACR,WAAO,CAACA,IAAI,CAACc,MAAL,CAAYC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeC,cAAc,CAACD,EAArD,CAAD,EAA2DC,cAA3D,CAAP;AACD,GAHQ,CAAX;AAKD;;GA9CMjC,Q;;KAAAA,Q;;AAgDP,MAAMkC,iBAAiB,GAAG,MAAM;AAAA;;AAC9BT,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYxB,MAAM,CAACiC,MAAnB;AACA,QAAMC,UAAU,GAAGlC,MAAM,CAACiC,MAAP,GAAgB,CAAnC;AACA,QAAME,gBAAgB,GAAGnC,MAAM,CAACiC,MAAP,GAAgB,CAAzC,CAJ8B,CAIa;;AAC3C,QAAMG,aAAa,GAAG,CAAtB,CAL8B,CAKN;;AACxB,MAAIF,UAAU,KAAK,CAAf,IAAoBlC,MAAM,CAACiC,MAAP,GAAgB,CAApC,IAAyC5B,KAAK,CAAC4B,MAAN,GAAgBE,gBAAgB,GAAGC,aAAhF,EAAgG;AAC9Fb,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,UAAMa,QAAQ,GAAGtD,oBAAoB,CAACsB,KAAD,CAArC;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYa,QAAZ;AACA/B,IAAAA,QAAQ,CAAC+B,QAAD,CAAR;AAED;;AAEH,QAAMC,WAAW,GAAG,MAAM;AACxB5B,IAAAA,WAAW,CAAE6B,SAAD,IAAe,CAACA,SAAjB,CAAX;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYf,QAAxB;AACD,GAHD;;AAKA5B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA0C,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAxC,IAAAA,UAAU,CAACe,KAAK,CAAC+B,EAAP,EAAW9B,MAAX,EAAmBD,KAAK,CAACyC,KAAzB,EAAgCzC,KAAK,CAAC0C,WAAtC,EAAmDpC,KAAnD,CAAV;AACAK,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAkB,IAAAA,WAAW,CAACe,QAAD,CAAX;AACAV,IAAAA,iBAAiB;AAClB,GAPQ,CAAT;AAUA,sBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAoB,MAAA,MAAM,EAAE;AAAEW,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP;AAAZ,OAA5B;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEpB,OAAO,CAACC,GAAR,CAAY,SAAZ,CAApB;AAAA,gCACA,QAAC,MAAD;AACA,UAAA,QAAQ,EAAEb,QADV;AAEA,UAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFV;AAGA,UAAA,KAAK,EAAEZ,KAAK,CAACyC,KAHb;AAIA,UAAA,KAAK,EAAEnC;AAJP;AAAA;AAAA;AAAA;AAAA,gBADA,EAOCL,MAPD,eAQA,QAAC,QAAD;AACA,UAAA,aAAa,EAAE4C,aADf;AAEA,UAAA,WAAW,EAAE7B,WAFb;AAGA,UAAA,QAAQ,EAAE2B,QAHV;AAIA,UAAA,KAAK,EAAErC;AAJP;AAAA;AAAA;AAAA;AAAA,gBARA,eAaA,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,gBAbA,eAcA,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBAdA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAkBEN,KAAK,CAAC0C,WAAN,gBAAoB,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEpC,KAAd;AAAqB,QAAA,UAAU,EAAEF,UAAjC;AAA6C,QAAA,QAAQ,EAAEM,QAAvD;AAAiE,QAAA,QAAQ,EAAE,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,GAAT,CAA3E;AAA0F,QAAA,UAAU,EAAEO,UAAtG;AAAkH,QAAA,WAAW,EAAEsB;AAA/H;AAAA;AAAA;AAAA;AAAA,cAApB,gBAAqK,QAAE,aAAF;AAAgB,QAAA,SAAS,EAAEvC,KAAK,CAAC8C,SAAjC;AAA4C,QAAA,QAAQ,EAAE9C,KAAK,CAAC+C;AAA5D;AAAA;AAAA;AAAA;AAAA,cAlBvK;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADA;AAwBD,CAtDC;;IAAMd,iB;;AAwDR,eAAelC,QAAf","sourcesContent":["import '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { calculateAchievement, saveGarden, createPlant, loadBalloons } from '../functions'\nimport { Balloon } from '../gameObjects'\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Cloud, Balloons, SeedBox, IntroBalloons } from '../components';\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [seedList, setSeedlist] = useState(false)\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(\"\")\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      updateSeeds(-1)\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed)\n      setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"Looking for \" + type)\n    const updatedSeeds = [...seeds]\n    console.log(updatedSeeds)\n    const index = updatedSeeds.findIndex(seed => seed.type === type)\n    console.log(\"Index \" + index)\n    updatedSeeds[index].quantity += increment\n    setSeeds(updatedSeeds)\n    setSeedindex(null)\n  }\n\n    // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n    setBalloons(\n      (prev) => {\n        return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon]\n      }\n    )\n  }\n\n  const checkAchievements = () => {\n    console.log(\"Checking achievements\")\n    console.log(plants.length)\n    const fivePlants = plants.length % 5\n    const achievementCount = plants.length / 5 // how many multuples of five?\n    const startingSeeds = 2 // offset for the starting seeds\n    if (fivePlants === 0 && plants.length > 0 && seeds.length < (achievementCount + startingSeeds)) {\n      console.log(\"Achievement!\")\n      const newSeeds = calculateAchievement(seeds)\n      console.log(\"New seeds is\")\n      console.log(newSeeds)\n      setSeeds(newSeeds)\n\n    }\n\n  const toggleSeeds = () => {\n    setSeedlist((prevState) => !prevState)\n    console.log(\"TOGGLE \" + seedList)\n  }\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n    setSeedlist(seedList)\n    setBalloons(balloons)\n    checkAchievements()\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n      <Garden\n      sowPlant={sowPlant}\n      position={[0, 0, 0]}\n      world={props.world}\n      seeds={seeds}\n       />\n      {plants}\n      <Balloons\n      removeBalloon={removeBalloon}\n      updateSeeds={updateSeeds}\n      balloons={balloons}\n      seeds={seeds} />\n      <Sun />\n      <Firmament />\n     </Suspense>\n     {props.worldChosen ? <Cloud seeds={seeds} chosenSeed={chosenSeed} seedList={seedList} position={[-1, -1, 1.9]} selectSeed={selectSeed} toggleSeeds={toggleSeeds} /> : < IntroBalloons saveWorld={props.saveWorld} newWorld={props.newWorld} /> }\n    </Canvas>\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}