{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$();\n\nimport '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { calculateAchievement, saveGarden, sendBalloon, createPlant, loadBalloons, makeFriendRequest, makeFriends, sample } from '../functions';\nimport { Balloon } from '../gameObjects';\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Friends, Cloud, Balloons, SeedBox, IntroBalloons } from '../components'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  const [seeds, setSeeds] = useState(props.seeds); //  an array of the player's available seeds\n\n  const [plants, setPlants] = useState(props.garden); //  an array of plant components\n\n  const [chosenSeed, setChosenseed] = useState(\"\"); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [balloons, setBalloons] = useState([]);\n  useEffect(() => {\n    console.log(\"USE EFFECT PLANTS!\");\n    checkAchievements();\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds);\n  }, [plants]); // useEffect(() => {\n  //   console.log(\"USE EFFECT SEEDS!\")\n  //   setSeeds(seeds)\n  //   saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n  // }, [seeds])\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      console.log(\"SOW PLANT\");\n      const newPlant = createPlant(event, chosenSeed);\n      setPlants(prev => {\n        return [newPlant, ...prev];\n      });\n      removeSeed();\n    }\n  };\n\n  const removeSeed = () => {\n    console.log(\"REMOVE SEED\");\n    setChosenseed(\"\");\n    updateSeeds(-1, chosenSeed);\n    console.log(\"In removeSeed\");\n    console.log(seeds);\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"UPDATE SEEDS...\");\n    const updatedSeeds = [...seeds];\n    const index = updatedSeeds.findIndex(seed => seed.type === type);\n\n    if (index === -1) {\n      console.log(\"NEW SEED in UPDATE SEEDS\");\n      console.log(\"adding newSeed \" + type);\n      setSeeds(prev => {\n        return [...prev, {\n          type: type,\n          quantity: increment\n        }];\n      });\n    } else {\n      console.log(\"INCREMENT SEEDS\");\n      updatedSeeds[index].quantity += increment;\n      setSeeds(updatedSeeds);\n    }\n\n    setSeedindex(null);\n  };\n\n  const checkAchievements = () => {\n    console.log(\"CHECK ACHIEVEMENTS\");\n    const plantCount = plants.length;\n    console.log(\"Plants \" + plantCount);\n    console.log(\"Seeds \" + seeds.length);\n    console.log(plantCount);\n    const fivePlants = plantCount % 5;\n    const achievementCount = plantCount / 5; // how many multuples of five?\n\n    const startingSeeds = 2; // offset for the starting seeds\n\n    const achievementTracker = achievementCount + startingSeeds;\n    console.log(\"AchievementTracker \" + achievementTracker);\n\n    if (fivePlants === 0 && plantCount !== 0 && seeds.length < achievementTracker) {\n      // if statement checks if plantCount is multiple of 5 and whether the seeds for that multiple have been awarded\n      console.log(\"Achievement!\");\n      const newSeed = calculateAchievement(seeds, props.id, plantCount);\n      updateSeeds(0, newSeed.type);\n    }\n  };\n\n  const sendFriendRequest = sentence => {\n    makeFriendRequest(props.id, props.userName, sentence, props.world);\n  };\n\n  const acceptFriend = friendName => {\n    makeFriends(props.id, props.userName, friendName, props.world);\n  };\n\n  const sendPlant = (friendName, friendId) => {\n    if (chosenSeed) {\n      const message = `${props.userName} sent you ${'\\n'} a ${chosenSeed} seed!`;\n      sendBalloon(friendId, chosenSeed, 1, message, props.userName);\n      console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`);\n      removeSeed();\n    } else {\n      console.log(\"No seed selected\");\n    }\n  };\n\n  const buyBalloon = colour => {\n    const seed = sample(seeds);\n    const message = `Bought: ${seed.type} x 3!`;\n    sendBalloon(props.id, seed.type, 3, message, \"SeedBank\", colour);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"canvas\",\n      camera: {\n        position: [0, 2, 3.5]\n      },\n      children: [/*#__PURE__*/_jsxDEV(Camera, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: console.log(\"loading\"),\n        children: [/*#__PURE__*/_jsxDEV(Garden, {\n          friend: false,\n          sowPlant: sowPlant,\n          position: [0, 0, 0],\n          world: props.world,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }, this), plants, /*#__PURE__*/_jsxDEV(Sun, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Firmament, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Friends, {\n          sendPlant: sendPlant,\n          userId: props.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Balloons, {\n          updateSeeds: updateSeeds,\n          acceptFriend: acceptFriend,\n          userId: props.id,\n          today: props.today,\n          lastLogin: props.lastLogin,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Cloud, {\n          seeds: seeds,\n          chosenSeed: chosenSeed,\n          buyBalloon: buyBalloon,\n          position: [0, -0.8, 1],\n          sendFriendRequest: sendFriendRequest,\n          selectSeed: selectSeed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(IntroBalloons, {\n        saveWorld: props.saveWorld,\n        newWorld: props.newWorld\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SeedBank, \"aJmltE+nwCclThymHmdrx24e5FQ=\");\n\n_c = SeedBank;\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["React","useState","useEffect","Suspense","calculateAchievement","saveGarden","sendBalloon","createPlant","loadBalloons","makeFriendRequest","makeFriends","sample","Balloon","Canvas","Garden","Camera","Sun","World","Firmament","Friends","Cloud","Balloons","SeedBox","IntroBalloons","SeedBank","props","seeds","setSeeds","plants","setPlants","garden","chosenSeed","setChosenseed","seedIndex","setSeedindex","balloons","setBalloons","console","log","checkAchievements","id","world","worldChosen","sowPlant","event","newPlant","prev","removeSeed","updateSeeds","selectSeed","selectedSeed","index","seed","quantity","increment","type","updatedSeeds","findIndex","plantCount","length","fivePlants","achievementCount","startingSeeds","achievementTracker","newSeed","sendFriendRequest","sentence","userName","acceptFriend","friendName","sendPlant","friendId","message","buyBalloon","colour","position","today","lastLogin","saveWorld","newWorld"],"mappings":"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","sourcesContent":["import '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { calculateAchievement, saveGarden, sendBalloon, createPlant, loadBalloons, makeFriendRequest, makeFriends, sample } from '../functions'\nimport { Balloon } from '../gameObjects'\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Friends, Cloud, Balloons, SeedBox, IntroBalloons } from '../components';\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState([])\n\n  useEffect(() => {\n    console.log(\"USE EFFECT PLANTS!\")\n    checkAchievements()\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n  }, [plants])\n\n  // useEffect(() => {\n  //   console.log(\"USE EFFECT SEEDS!\")\n  //   setSeeds(seeds)\n  //   saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n  // }, [seeds])\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      console.log(\"SOW PLANT\")\n      const newPlant = createPlant(event, chosenSeed)\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      removeSeed()\n    }\n  }\n\n  const removeSeed = () => {\n    console.log(\"REMOVE SEED\")\n    setChosenseed(\"\")\n    updateSeeds(-1, chosenSeed)\n    console.log(\"In removeSeed\")\n    console.log(seeds)\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed)\n      setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"UPDATE SEEDS...\")\n    const updatedSeeds = [...seeds]\n    const index = updatedSeeds.findIndex(seed => seed.type === type)\n    if (index === -1) {\n      console.log(\"NEW SEED in UPDATE SEEDS\")\n      console.log(\"adding newSeed \" + type)\n      setSeeds( (prev) => {\n        return [...prev, {type: type, quantity: increment}]\n      })\n    } else {\n      console.log(\"INCREMENT SEEDS\")\n      updatedSeeds[index].quantity += increment\n      setSeeds(updatedSeeds)\n    }\n    setSeedindex(null)\n  }\n\n\n  const checkAchievements = () => {\n    console.log(\"CHECK ACHIEVEMENTS\")\n    const plantCount = plants.length\n    console.log(\"Plants \" + plantCount)\n    console.log(\"Seeds \" + seeds.length)\n    console.log(plantCount)\n    const fivePlants = plantCount % 5\n    const achievementCount = plantCount / 5 // how many multuples of five?\n    const startingSeeds = 2 // offset for the starting seeds\n    const achievementTracker = achievementCount + startingSeeds\n    console.log(\"AchievementTracker \" + achievementTracker)\n    if (fivePlants === 0 && plantCount !== 0 && seeds.length < achievementTracker) { // if statement checks if plantCount is multiple of 5 and whether the seeds for that multiple have been awarded\n      console.log(\"Achievement!\")\n      const newSeed = calculateAchievement(seeds, props.id, plantCount)\n      updateSeeds(0, newSeed.type)\n    }\n  }\n\n  const sendFriendRequest = (sentence) => {\n    makeFriendRequest(props.id, props.userName, sentence, props.world)\n  }\n\n  const acceptFriend = (friendName) => {\n    makeFriends(props.id, props.userName, friendName, props.world)\n  }\n\n  const sendPlant = (friendName, friendId) =>{\n    if (chosenSeed) {\n      const message = `${props.userName} sent you ${'\\n'} a ${chosenSeed} seed!`\n      sendBalloon(friendId, chosenSeed, 1, message, props.userName)\n      console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`)\n      removeSeed()\n    } else {\n      console.log(\"No seed selected\")\n    }\n\n  }\n\n  const buyBalloon = (colour) => {\n    const seed = sample(seeds)\n    const message = `Bought: ${seed.type} x 3!`\n    sendBalloon(props.id, seed.type, 3, message, \"SeedBank\", colour)\n  }\n\n\n\n  return (\n  <div className=\"App\">\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n      <Garden\n      friend={false}\n      sowPlant={sowPlant}\n      position={[0, 0, 0]}\n      world={props.world}\n      seeds={seeds}\n       />\n      {plants}\n      <Sun />\n      <Firmament />\n      <Friends sendPlant={sendPlant} userId={props.id}/>\n     </Suspense>\n     {props.worldChosen ?\n       <>\n       <Balloons\n        updateSeeds={updateSeeds}\n        acceptFriend={acceptFriend}\n        userId={props.id}\n        today={props.today}\n        lastLogin={props.lastLogin}\n        seeds={seeds} />\n       <Cloud\n        seeds={seeds}\n        chosenSeed={chosenSeed}\n        buyBalloon={buyBalloon}\n        position={[0, -0.8, 1]}\n        sendFriendRequest={sendFriendRequest}\n        selectSeed={selectSeed} />\n        </> :\n        < IntroBalloons\n          saveWorld={props.saveWorld}\n          newWorld={props.newWorld}\n        /> }\n    </Canvas>\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}