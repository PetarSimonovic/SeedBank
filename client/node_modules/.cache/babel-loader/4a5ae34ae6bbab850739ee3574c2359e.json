{"ast":null,"code":"import { sample } from './';\nexport default function calculateAchievement(seeds) {\n  let unlockedSeed = true;\n  let newSeed = sample(seedBank);\n\n  if (seeds.length === seedBank.length) {\n    console.log(\"All seeds collected\");\n    const newSeed = sample(seedBank);\n    unlockedSeed = false;\n  } else {\n    let duplicate = true;\n    let newSeed = {};\n\n    while (duplicate) {\n      duplicate = checkDuplicate(newSeed, seeds);\n      newSeed = sample(seedBank);\n    }\n  }\n\n  console.log(\"Chosen seed is\");\n  console.log(newSeed);\n  return updateSeeds(seeds, newSeed, unlockedSeed);\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateSeeds(seeds, newSeed, unlockedSeed) {\n  const updatedSeeds = [];\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (newSeed.type === seed.type) {\n      seed.quantity += newSeed.quantity;\n    }\n\n    updatedSeeds.push(seed);\n  }\n\n  if (unlockedSeed) {\n    updatedSeeds.push(newSeed);\n  }\n\n  return updatedSeeds;\n}\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["sample","calculateAchievement","seeds","unlockedSeed","newSeed","seedBank","length","console","log","duplicate","checkDuplicate","updateSeeds","index","seed","type","updatedSeeds","quantity","push"],"mappings":"AAAA,SAASA,MAAT,QAAuB,IAAvB;AAEA,eAAe,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AAClD,MAAIC,YAAY,GAAG,IAAnB;AACA,MAAIC,OAAO,GAAGJ,MAAM,CAACK,QAAD,CAApB;;AACA,MAAIH,KAAK,CAACI,MAAN,KAAiBD,QAAQ,CAACC,MAA9B,EAAsC;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,UAAMJ,OAAO,GAAGJ,MAAM,CAACK,QAAD,CAAtB;AACAF,IAAAA,YAAY,GAAG,KAAf;AACD,GAJD,MAIO;AACP,QAAIM,SAAS,GAAG,IAAhB;AACA,QAAIL,OAAO,GAAG,EAAd;;AACA,WAAOK,SAAP,EAAkB;AAChBA,MAAAA,SAAS,GAAGC,cAAc,CAACN,OAAD,EAAUF,KAAV,CAA1B;AACAE,MAAAA,OAAO,GAAGJ,MAAM,CAACK,QAAD,CAAhB;AACD;AACF;;AACCE,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,SAAOO,WAAW,CAACT,KAAD,EAAQE,OAAR,EAAiBD,YAAjB,CAAlB;AACD;;AAGD,SAASO,cAAT,CAAwBN,OAAxB,EAAiCF,KAAjC,EAAwC;AACtC,OAAK,IAAIU,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,KAAK,CAACI,MAAlC,EAA0CM,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGX,KAAK,CAACU,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACC,IAAL,KAAcV,OAAO,CAACU,IAA1B,EAAgC;AAC9B,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED;;AAED,SAASH,WAAT,CAAqBT,KAArB,EAA4BE,OAA5B,EAAqCD,YAArC,EAAmD;AACjD,QAAMY,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,KAAK,CAACI,MAAlC,EAA0CM,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGX,KAAK,CAACU,KAAD,CAAlB;;AACA,QAAIR,OAAO,CAACU,IAAR,KAAiBD,IAAI,CAACC,IAA1B,EAAgC;AAC9BD,MAAAA,IAAI,CAACG,QAAL,IAAiBZ,OAAO,CAACY,QAAzB;AACD;;AACDD,IAAAA,YAAY,CAACE,IAAb,CAAkBJ,IAAlB;AACD;;AACD,MAAIV,YAAJ,EAAkB;AAAEY,IAAAA,YAAY,CAACE,IAAb,CAAkBb,OAAlB;AAA4B;;AAChD,SAAOW,YAAP;AACD;;AAGD,MAAMV,QAAQ,GAAG,CACf;AAACS,EAAAA,IAAI,EAAE,eAAP;AAAwBE,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACF,EAAAA,IAAI,EAAE,OAAP;AAAgBE,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACF,EAAAA,IAAI,EAAE,WAAP;AAAoBE,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACF,EAAAA,IAAI,EAAE,QAAP;AAAiBE,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB","sourcesContent":["import { sample } from './'\n\nexport default function calculateAchievement(seeds) {\n  let unlockedSeed = true\n  let newSeed = sample(seedBank)\n  if (seeds.length === seedBank.length) {\n    console.log(\"All seeds collected\")\n    const newSeed = sample(seedBank)\n    unlockedSeed = false\n  } else {\n  let duplicate = true\n  let newSeed = {}\n  while (duplicate) {\n    duplicate = checkDuplicate(newSeed, seeds)\n    newSeed = sample(seedBank)\n  }\n}\n  console.log(\"Chosen seed is\")\n  console.log(newSeed)\n  return updateSeeds(seeds, newSeed, unlockedSeed)\n}\n\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed, unlockedSeed) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (newSeed.type === seed.type) {\n      seed.quantity += newSeed.quantity\n    }\n    updatedSeeds.push(seed)\n  }\n  if (unlockedSeed) { updatedSeeds.push(newSeed) }\n  return updatedSeeds\n}\n\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}