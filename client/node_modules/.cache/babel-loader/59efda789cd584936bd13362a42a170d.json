{"ast":null,"code":"export default function calculateAchievement(seeds) {\n  console.log(seeds);\n  let duplicate = true;\n  let newSeed = {};\n\n  while (duplicate) {\n    newSeed = sample(seedBank);\n    duplicate = checkDuplicate(newSeed, seeds);\n  }\n\n  console.log(\"Chosen seed is\");\n  console.log(newSeed);\n  return updateSeeds(seeds, newSeed);\n}\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      console.log(seed.type + \" \" + newSeed.type);\n      console.log(\"Duplicate \" + seed.type + \" \" + newSeed.type);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateSeeds(seed, newSeed) {\n  const updatedSeeds = [];\n\n  for (let index = 0; index < seeds.length; index++) {\n    updatedSeeds.push(seeds[index]);\n  }\n\n  updatedSeeds.push(newSeed);\n}\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["calculateAchievement","seeds","console","log","duplicate","newSeed","sample","seedBank","checkDuplicate","updateSeeds","array","Math","floor","random","length","index","seed","type","updatedSeeds","push","quantity"],"mappings":"AAAA,eAAe,SAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,MAAIG,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,SAAOD,SAAP,EAAkB;AAChBC,IAAAA,OAAO,GAAGC,MAAM,CAACC,QAAD,CAAhB;AACAH,IAAAA,SAAS,GAAGI,cAAc,CAACH,OAAD,EAAUJ,KAAV,CAA1B;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AACA,SAAOI,WAAW,CAACR,KAAD,EAAQI,OAAR,CAAlB;AACD;;AAGD,SAASC,MAAT,CAAgBI,KAAhB,EAAuB;AACrB,SAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACI,MAAjC,CAAD,CAAZ;AACD;;AAED,SAASN,cAAT,CAAwBH,OAAxB,EAAiCJ,KAAjC,EAAwC;AACtC,OAAK,IAAIc,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGd,KAAK,CAACa,MAAlC,EAA0CC,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGf,KAAK,CAACc,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACC,IAAL,KAAcZ,OAAO,CAACY,IAA1B,EAAgC;AAC9Bf,MAAAA,OAAO,CAACC,GAAR,CAAYa,IAAI,CAACC,IAAL,GAAY,GAAZ,GAAkBZ,OAAO,CAACY,IAAtC;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAea,IAAI,CAACC,IAApB,GAA2B,GAA3B,GAAiCZ,OAAO,CAACY,IAArD;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED;;AAED,SAASR,WAAT,CAAqBO,IAArB,EAA2BX,OAA3B,EAAoC;AAClC,QAAMa,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGd,KAAK,CAACa,MAAlC,EAA0CC,KAAK,EAA/C,EAAmD;AACjDG,IAAAA,YAAY,CAACC,IAAb,CAAkBlB,KAAK,CAACc,KAAD,CAAvB;AACD;;AACDG,EAAAA,YAAY,CAACC,IAAb,CAAkBd,OAAlB;AACD;;AAGD,MAAME,QAAQ,GAAG,CACf;AAACU,EAAAA,IAAI,EAAE,eAAP;AAAwBG,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACH,EAAAA,IAAI,EAAE,OAAP;AAAgBG,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACH,EAAAA,IAAI,EAAE,WAAP;AAAoBG,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACH,EAAAA,IAAI,EAAE,QAAP;AAAiBG,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB","sourcesContent":["export default function calculateAchievement(seeds) {\n  console.log(seeds)\n  let duplicate = true\n  let newSeed = {}\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n  console.log(\"Chosen seed is\")\n  console.log(newSeed)\n  return updateSeeds(seeds, newSeed)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      console.log(seed.type + \" \" + newSeed.type )\n      console.log(\"Duplicate \" + seed.type + \" \" + newSeed.type)\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seed, newSeed) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    updatedSeeds.push(seeds[index])\n  }\n  updatedSeeds.push(newSeed)\n}\n\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}