{"ast":null,"code":"import { sendBalloon } from './'; // This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP/DRY\n\nexport default function calculateAchievement(seeds, id, plantCount) {\n  console.log(\"In Achievement Calculator seeds are:\");\n  console.log(seeds);\n  let duplicate = true;\n  let newSeed = {};\n\n  if (seeds.length === seedBank.length) {\n    let bonusSeed = sample(seeds);\n    console.log(\"bonusSeeds\");\n    sendBalloon(id, bonusSeed.type, 3, `${plantCount} plants! Bonus ${bonusSeed.type} seeds!`); //userId, type, quantity = 0, message, sender = \"SeedBank\")\n\n    return seeds; // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n    while (duplicate) {\n      newSeed = sample(seedBank);\n      duplicate = checkDuplicate(newSeed, seeds, id, plantCount);\n    }\n  }\n\n  return updateSeeds(seeds, newSeed, id, plantCount);\n}\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateSeeds(seeds, newSeed, id, plantCount) {\n  const updatedSeeds = [];\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      seed.quantity += newSeed.quantity;\n    }\n\n    updatedSeeds.push(seed);\n  }\n\n  newSeed.quantity = 0;\n  updatedSeeds.push(newSeed);\n  sendBalloon(id, newSeed.type, 3, `${plantCount} plants! ${'\\n'} ${newSeed.type} unlocked!`);\n  return updatedSeeds;\n}\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}, {\n  type: \"snowdrop\",\n  quantity: 3\n}, {\n  type: \"rose\",\n  quantity: 3\n}, {\n  type: \"venusFlyTrap\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["sendBalloon","calculateAchievement","seeds","id","plantCount","console","log","duplicate","newSeed","length","seedBank","bonusSeed","sample","type","checkDuplicate","updateSeeds","array","Math","floor","random","index","seed","updatedSeeds","quantity","push"],"mappings":"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","sourcesContent":["import { sendBalloon } from './'\n\n// This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP/DRY\n\nexport default function calculateAchievement(seeds, id, plantCount) {\n  console.log(\"In Achievement Calculator seeds are:\")\n  console.log(seeds)\n  let duplicate = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    let bonusSeed = sample(seeds)\n    console.log(\"bonusSeeds\")\n    sendBalloon(id, bonusSeed.type, 3, `${plantCount} plants! Bonus ${bonusSeed.type} seeds!`  ) //userId, type, quantity = 0, message, sender = \"SeedBank\")\n    return seeds\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds, id, plantCount)\n  }\n}\n  return updateSeeds(seeds, newSeed, id, plantCount)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed, id, plantCount) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      seed.quantity += newSeed.quantity\n    }\n    updatedSeeds.push(seed)\n  }\n  newSeed.quantity = 0\n  updatedSeeds.push(newSeed)\n  sendBalloon(id, newSeed.type, 3, `${plantCount} plants! ${'\\n'} ${newSeed.type} unlocked!`)\n  return updatedSeeds\n}\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}