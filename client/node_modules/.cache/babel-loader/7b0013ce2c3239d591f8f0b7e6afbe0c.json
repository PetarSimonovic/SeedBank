{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/World.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions';\nimport { Grass } from './';\nimport * as THREE from \"three\"; // The plane on which plants grow\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction World(props) {\n  _s();\n\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  console.log(\"WORLD in EARTH is\");\n  console.log(props); // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      scale: 1,\n      children: createStalactites(props)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(World, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c = World;\n\nfunction createStalactites(props) {\n  console.log(\"In create stalactites\");\n  const world = props.world;\n  console.log(world);\n  const createdStalactites = [];\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index];\n    createdStalactites.push( /*#__PURE__*/_jsxDEV(Stalactite, {\n      args: stalactite.geometry,\n      position: stalactite.position,\n      colour: stalactite.colour\n    }, createId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 30\n    }, this));\n  }\n\n  return createdStalactites;\n}\n\nfunction Stalactite(props) {\n  _s2();\n\n  const mesh = useRef();\n  console.log(\"PROPS\");\n  console.log(props);\n  let [top, bottom, depth, sections] = props.args;\n  console.log(\"DEPTH\");\n  console.log(depth);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(Rock, {\n      args: props.args,\n      color: props.colour\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grass, {\n      sowPlant: props.sowPlant,\n      position: [0, depth / 2, 0],\n      args: [top, top, 0.01, sections]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Stalactite, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c2 = Stalactite;\n\nfunction Rock(props) {\n  _s3();\n\n  const mesh = useRef();\n\n  const handleClick = event => {\n    event.stopPropagation();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    scale: 1,\n    onClick: event => handleClick(event),\n    children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n      args: props.args\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: props.color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(Rock, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c3 = Rock;\nexport default World;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"World\");\n$RefreshReg$(_c2, \"Stalactite\");\n$RefreshReg$(_c3, \"Rock\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/World.jsx"],"names":["React","useRef","useState","useMemo","useFrame","createId","Grass","THREE","World","props","mesh","console","log","createStalactites","world","createdStalactites","index","stalactites","length","stalactite","push","geometry","position","colour","Stalactite","top","bottom","depth","sections","args","sowPlant","Rock","handleClick","event","stopPropagation","color"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,OAAlC,QAAiD,OAAjD;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,KAAT,QAAsB,IAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAGA;;;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB;AACA,QAAMC,IAAI,GAAGT,MAAM,EAAnB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAJoB,CAKpB;AACA;AACA;;AAKA,sBACE;AAAA,2BACA,qBACMA,KADN;AAEE,MAAA,GAAG,EAAEC,IAFP;AAGE,MAAA,KAAK,EAAE,CAHT;AAAA,gBAKGG,iBAAiB,CAACJ,KAAD;AALpB;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAWD;;GAvBQD,K;;KAAAA,K;;AAyBT,SAASK,iBAAT,CAA2BJ,KAA3B,EAAkC;AAChCE,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAME,KAAK,GAAGL,KAAK,CAACK,KAApB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,QAAMC,kBAAkB,GAAG,EAA3B;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,KAAK,CAACG,WAAN,CAAkBC,MAA9C,EAAsDF,KAAK,EAA3D,EAA+D;AAC7D,UAAMG,UAAU,GAAGL,KAAK,CAACG,WAAN,CAAkBD,KAAlB,CAAnB;AACAD,IAAAA,kBAAkB,CAACK,IAAnB,eAAyB,QAAC,UAAD;AAA6B,MAAA,IAAI,EAAED,UAAU,CAACE,QAA9C;AAAwD,MAAA,QAAQ,EAAEF,UAAU,CAACG,QAA7E;AAAuF,MAAA,MAAM,EAAEH,UAAU,CAACI;AAA1G,OAAiBlB,QAAQ,EAAzB;AAAA;AAAA;AAAA;AAAA,YAAzB;AACD;;AAED,SAAOU,kBAAP;AACD;;AAED,SAASS,UAAT,CAAoBf,KAApB,EAA2B;AAAA;;AACzB,QAAMC,IAAI,GAAGT,MAAM,EAAnB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,MAAI,CAACgB,GAAD,EAAMC,MAAN,EAAcC,KAAd,EAAqBC,QAArB,IAAiCnB,KAAK,CAACoB,IAA3C;AACAlB,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AAGA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAElB,KAAK,CAACoB,IAAlB;AAAwB,MAAA,KAAK,EAAEpB,KAAK,CAACc;AAArC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAEd,KAAK,CAACqB,QAAvB;AAAiC,MAAA,QAAQ,EAAE,CAAC,CAAD,EAAIH,KAAK,GAAC,CAAV,EAAa,CAAb,CAA3C;AAA4D,MAAA,IAAI,EAAE,CAACF,GAAD,EAAMA,GAAN,EAAW,IAAX,EAAiBG,QAAjB;AAAlE;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;IAfQJ,U;;MAAAA,U;;AAiBT,SAASO,IAAT,CAActB,KAAd,EAAqB;AAAA;;AAEnB,QAAMC,IAAI,GAAGT,MAAM,EAAnB;;AAEA,QAAM+B,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,eAAN;AACD,GAFD;;AAIA,sBACE,qBACMzB,KADN;AAEE,IAAA,GAAG,EAAEC,IAFP;AAGE,IAAA,KAAK,EAAE,CAHT;AAIE,IAAA,OAAO,EAAGuB,KAAD,IAAWD,WAAW,CAACC,KAAD,CAJjC;AAAA,4BAME;AAAkB,MAAA,IAAI,EAAExB,KAAK,CAACoB;AAA9B;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAkB,MAAA,KAAK,EAAEpB,KAAK,CAAC0B;AAA/B;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;IApBQJ,I;;MAAAA,I;AAsBT,eAAevB,KAAf","sourcesContent":["import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions'\nimport { Grass } from './'\nimport * as THREE from \"three\";\n\n\n// The plane on which plants grow\n\nfunction World(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  console.log(\"WORLD in EARTH is\")\n  console.log(props)\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      {createStalactites(props)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createStalactites(props) {\n  console.log(\"In create stalactites\")\n  const world = props.world\n  console.log(world)\n  const createdStalactites = []\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index]\n    createdStalactites.push( <Stalactite key={createId()} args={stalactite.geometry} position={stalactite.position} colour={stalactite.colour} />)\n  }\n\n  return createdStalactites\n}\n\nfunction Stalactite(props) {\n  const mesh = useRef()\n  console.log(\"PROPS\")\n  console.log(props)\n  let [top, bottom, depth, sections] = props.args\n  console.log(\"DEPTH\")\n  console.log(depth)\n\n\n  return (\n    <group>\n      <Rock args={props.args} color={props.colour} />\n      <Grass sowPlant={props.sowPlant} position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} />\n    </group>\n  )\n}\n\nfunction Rock(props) {\n\n  const mesh = useRef()\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n  }\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={props.color}  />\n    </mesh>\n  )\n\n}\n\nexport default World\n"]},"metadata":{},"sourceType":"module"}