{"ast":null,"code":"import{sendBalloon,sample}from'./';// This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP/DRY\nexport default function calculateAchievement(seeds,id,plantCount){console.log(\"ACHIEVEMENT CALCULATOR:\");console.log(seeds);var duplicate=true;var newSeed={};if(seeds.length===seedBank.length){var bonusSeed=sample(seeds);console.log(\"bonusSeeds\");sendBalloon(id,bonusSeed.type,3,\"\".concat(plantCount,\" plants! Bonus \").concat(bonusSeed.type,\" seeds!\"));//userId, type, quantity = 0, message, sender = \"SeedBank\")\nreturn null;// newSeed = sample(seedBank)\n// console.log(\"FULL BANK\")\n// unlock = false\n}else{while(duplicate){newSeed=sample(seedBank);duplicate=checkDuplicate(newSeed,seeds,id,plantCount);}}sendBalloon(id,newSeed.type,3,\"\".concat(plantCount,\" plants! \",'\\n',\" \").concat(newSeed.type,\" unlocked!\"));return newSeed;}function checkDuplicate(newSeed,seeds){for(var index=0;index<seeds.length;index++){var seed=seeds[index];if(seed.type===newSeed.type){return true;}}return false;}//\n// function updateSeeds(seeds, newSeed, id, plantCount) {\n//   const updatedSeeds = []\n//   for (let index = 0; index < seeds.length; index++) {\n//     const seed = seeds[index]\n//     if (seed.type === newSeed.type) {\n//       seed.quantity += newSeed.quantity\n//     }\n//     updatedSeeds.push(seed)\n//   }\n//   newSeed.quantity = 0\n//   updatedSeeds.push(newSeed)\n//   return updatedSeeds\n// }\nvar seedBank=[{type:\"generic_plant\",quantity:3},{type:\"tulip\",quantity:3},{type:\"sunflower\",quantity:3},{type:\"crocus\",quantity:3},{type:\"snowdrop\",quantity:3},{type:\"rose\",quantity:3},{type:\"venusFlyTrap\",quantity:3}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["sendBalloon","sample","calculateAchievement","seeds","id","plantCount","console","log","duplicate","newSeed","length","seedBank","bonusSeed","type","checkDuplicate","index","seed","quantity"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,MAAtB,KAAoC,IAApC,CAEA;AACA;AACA;AACA;AACA;AAEA,cAAe,SAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqCC,EAArC,CAAyCC,UAAzC,CAAqD,CAClEC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EACAD,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EACA,GAAIK,CAAAA,SAAS,CAAG,IAAhB,CACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIN,KAAK,CAACO,MAAN,GAAiBC,QAAQ,CAACD,MAA9B,CAAsC,CACpC,GAAIE,CAAAA,SAAS,CAAGX,MAAM,CAACE,KAAD,CAAtB,CACAG,OAAO,CAACC,GAAR,CAAY,YAAZ,EACAP,WAAW,CAACI,EAAD,CAAKQ,SAAS,CAACC,IAAf,CAAqB,CAArB,WAA2BR,UAA3B,2BAAuDO,SAAS,CAACC,IAAjE,YAAX,CAA6F;AAC7F,MAAO,KAAP,CACA;AACA;AACA;AACD,CARD,IAQO,CACP,MAAOL,SAAP,CAAkB,CAChBC,OAAO,CAAGR,MAAM,CAACU,QAAD,CAAhB,CACAH,SAAS,CAAGM,cAAc,CAACL,OAAD,CAAUN,KAAV,CAAiBC,EAAjB,CAAqBC,UAArB,CAA1B,CACD,CACF,CACCL,WAAW,CAACI,EAAD,CAAKK,OAAO,CAACI,IAAb,CAAmB,CAAnB,WAAyBR,UAAzB,aAA+C,IAA/C,aAAuDI,OAAO,CAACI,IAA/D,eAAX,CACA,MAAOJ,CAAAA,OAAP,CACD,CAED,QAASK,CAAAA,cAAT,CAAwBL,OAAxB,CAAiCN,KAAjC,CAAwC,CACtC,IAAK,GAAIY,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGZ,KAAK,CAACO,MAAlC,CAA0CK,KAAK,EAA/C,CAAmD,CACjD,GAAMC,CAAAA,IAAI,CAAGb,KAAK,CAACY,KAAD,CAAlB,CACA,GAAIC,IAAI,CAACH,IAAL,GAAcJ,OAAO,CAACI,IAA1B,CAAgC,CAC9B,MAAO,KAAP,CACD,CACF,CACD,MAAO,MAAP,CAED,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMF,CAAAA,QAAQ,CAAG,CACf,CAACE,IAAI,CAAE,eAAP,CAAwBI,QAAQ,CAAE,CAAlC,CADe,CAEf,CAACJ,IAAI,CAAE,OAAP,CAAgBI,QAAQ,CAAE,CAA1B,CAFe,CAGf,CAACJ,IAAI,CAAE,WAAP,CAAoBI,QAAQ,CAAE,CAA9B,CAHe,CAIf,CAACJ,IAAI,CAAE,QAAP,CAAiBI,QAAQ,CAAE,CAA3B,CAJe,CAKf,CAACJ,IAAI,CAAE,UAAP,CAAmBI,QAAQ,CAAE,CAA7B,CALe,CAMf,CAACJ,IAAI,CAAE,MAAP,CAAeI,QAAQ,CAAE,CAAzB,CANe,CAOf,CAACJ,IAAI,CAAE,cAAP,CAAuBI,QAAQ,CAAE,CAAjC,CAPe,CAAjB","sourcesContent":["import { sendBalloon, sample } from './'\n\n// This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP/DRY\n\nexport default function calculateAchievement(seeds, id, plantCount) {\n  console.log(\"ACHIEVEMENT CALCULATOR:\")\n  console.log(seeds)\n  let duplicate = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    let bonusSeed = sample(seeds)\n    console.log(\"bonusSeeds\")\n    sendBalloon(id, bonusSeed.type, 3, `${plantCount} plants! Bonus ${bonusSeed.type} seeds!`  ) //userId, type, quantity = 0, message, sender = \"SeedBank\")\n    return null\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds, id, plantCount)\n  }\n}\n  sendBalloon(id, newSeed.type, 3, `${plantCount} plants! ${'\\n'} ${newSeed.type} unlocked!`)\n  return newSeed\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n//\n// function updateSeeds(seeds, newSeed, id, plantCount) {\n//   const updatedSeeds = []\n//   for (let index = 0; index < seeds.length; index++) {\n//     const seed = seeds[index]\n//     if (seed.type === newSeed.type) {\n//       seed.quantity += newSeed.quantity\n//     }\n//     updatedSeeds.push(seed)\n//   }\n//   newSeed.quantity = 0\n//   updatedSeeds.push(newSeed)\n//   return updatedSeeds\n// }\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}