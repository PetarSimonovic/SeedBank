{"ast":null,"code":"import api from '../api';\nimport { WorldData } from '../gameObjects'; // strips out react components from the state garden array and saves plant props as an object that's easy to parse\n// Needs error handling!\n\nexport default async function saveGarden(id, plants, newWorld, chosen, savedSeeds) {\n  let savedGarden = extractPlants(plants);\n  const garden = {\n    \"garden\": savedGarden\n  };\n  const world = {\n    \"world\": JSON.stringify(newWorld)\n  };\n  const seeds = {\n    \"seeds\": JSON.stringify(savedSeeds)\n  };\n  const worldChosen = {\n    \"worldChosen\": chosen\n  };\n  const payload = {\n    garden,\n    world,\n    worldChosen,\n    seeds\n  };\n  console.log(\"PAYLOAD\");\n  console.log(payload);\n  console.log(worldChosen);\n  console.log(\"Attempting to save garden\");\n  await api.updateGarden(id, payload).then(res => {\n    console.log('Garden updated successfully');\n  });\n  console.log(\"SAVED GARDEN\");\n  console.log(savedGarden);\n}\n\nfunction extractPlants(plants) {\n  let extractedPlants = [];\n\n  for (let plant = 0; plant < plants.length; plant++) {\n    const key = plants[plant].key;\n    const parsedPlant = plants[plant].props;\n    const savedPlant = {\n      key: key,\n      growth: parsedPlant.growth,\n      date: parsedPlant.date,\n      position: parsedPlant.position,\n      type: parsedPlant.type\n    };\n    extractedPlants.push(savedPlant);\n  }\n\n  return extractedPlants;\n}","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/SaveGarden.js"],"names":["api","WorldData","saveGarden","id","plants","newWorld","chosen","savedSeeds","savedGarden","extractPlants","garden","world","JSON","stringify","seeds","worldChosen","payload","console","log","updateGarden","then","res","extractedPlants","plant","length","key","parsedPlant","props","savedPlant","growth","date","position","type","push"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,SAASC,SAAT,QAA0B,gBAA1B,C,CAEA;AACA;;AAGA,eAAe,eAAeC,UAAf,CAA0BC,EAA1B,EAA8BC,MAA9B,EAAsCC,QAAtC,EAAgDC,MAAhD,EAAwDC,UAAxD,EAAmE;AAChF,MAAIC,WAAW,GAAGC,aAAa,CAACL,MAAD,CAA/B;AACA,QAAMM,MAAM,GAAG;AAAC,cAAWF;AAAZ,GAAf;AACA,QAAMG,KAAK,GAAG;AAAC,aAAUC,IAAI,CAACC,SAAL,CAAeR,QAAf;AAAX,GAAd;AACA,QAAMS,KAAK,GAAG;AAAC,aAASF,IAAI,CAACC,SAAL,CAAeN,UAAf;AAAV,GAAd;AACA,QAAMQ,WAAW,GAAG;AAAC,mBAAgBT;AAAjB,GAApB;AACA,QAAMU,OAAO,GAAG;AAACN,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBI,IAAAA,WAAhB;AAA6BD,IAAAA;AAA7B,GAAhB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,QAAMlB,GAAG,CAACmB,YAAJ,CAAiBhB,EAAjB,EAAqBa,OAArB,EAA8BI,IAA9B,CAAmCC,GAAG,IAAI;AAC1CJ,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH,GAFG,CAAN;AAGAD,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ;AACD;;AAED,SAASC,aAAT,CAAuBL,MAAvB,EAA+B;AAC7B,MAAIkB,eAAe,GAAG,EAAtB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGnB,MAAM,CAACoB,MAAnC,EAA2CD,KAAK,EAAhD,EAAqD;AACnD,UAAME,GAAG,GAAGrB,MAAM,CAACmB,KAAD,CAAN,CAAcE,GAA1B;AACA,UAAMC,WAAW,GAAGtB,MAAM,CAACmB,KAAD,CAAN,CAAcI,KAAlC;AACA,UAAMC,UAAU,GAAG;AAACH,MAAAA,GAAG,EAAEA,GAAN;AAAWI,MAAAA,MAAM,EAAEH,WAAW,CAACG,MAA/B;AAAuCC,MAAAA,IAAI,EAAEJ,WAAW,CAACI,IAAzD;AAA+DC,MAAAA,QAAQ,EAAEL,WAAW,CAACK,QAArF;AAA+FC,MAAAA,IAAI,EAAEN,WAAW,CAACM;AAAjH,KAAnB;AACAV,IAAAA,eAAe,CAACW,IAAhB,CAAqBL,UAArB;AACD;;AACD,SAAON,eAAP;AACD","sourcesContent":["import api from '../api';\nimport { WorldData } from '../gameObjects'\n\n// strips out react components from the state garden array and saves plant props as an object that's easy to parse\n// Needs error handling!\n\n\nexport default async function saveGarden(id, plants, newWorld, chosen, savedSeeds){\n  let savedGarden = extractPlants(plants)\n  const garden = {\"garden\" : savedGarden}\n  const world = {\"world\" : JSON.stringify(newWorld)}\n  const seeds = {\"seeds\": JSON.stringify(savedSeeds)}\n  const worldChosen = {\"worldChosen\" : chosen}\n  const payload = {garden, world, worldChosen, seeds}\n  console.log(\"PAYLOAD\")\n  console.log(payload)\n  console.log(worldChosen)\n  console.log(\"Attempting to save garden\")\n  await api.updateGarden(id, payload).then(res => {\n        console.log('Garden updated successfully')\n    })\n  console.log(\"SAVED GARDEN\")\n  console.log(savedGarden)\n}\n\nfunction extractPlants(plants) {\n  let extractedPlants = []\n  for (let plant = 0; plant < plants.length; plant ++) {\n    const key = plants[plant].key\n    const parsedPlant = plants[plant].props\n    const savedPlant = {key: key, growth: parsedPlant.growth, date: parsedPlant.date, position: parsedPlant.position, type: parsedPlant.type}\n    extractedPlants.push(savedPlant)\n  }\n  return extractedPlants\n}\n"]},"metadata":{},"sourceType":"module"}