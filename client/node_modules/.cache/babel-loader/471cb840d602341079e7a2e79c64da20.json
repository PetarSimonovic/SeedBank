{"ast":null,"code":"export default function calculateAchievement(seeds) {\n  console.log(seeds);\n  let duplicate = true;\n  let newSeed = {};\n\n  while (duplicate) {\n    newSeed = sample(seedBank);\n    duplicate = checkDuplicate(newSeed, seeds);\n  }\n\n  return newSeed;\n}\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index];\n\n    if (seed.type === newSeed.type) {\n      console.log(seed.type + \" \" + newSeed.type);\n      console.log(\"Duplicate \" + seed.type + \" \" + newSeed.type);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateSeeds(seeds, newSeed) {\n  const updatedSeeds = [];\n  console.log(\"In updateSeeds\");\n  console.log(seeds);\n  console.log(\"SEEDS LENGTH\");\n  console.log(seeds.length);\n\n  for (let index = 0; index < seeds.length; index++) {\n    console.log(\"In loop!\");\n    const seed = seeds[index];\n    console.log(\"Pushing\");\n    console.log(seed);\n    updatedSeeds.push(seed);\n    console.log(updatedSeeds);\n  }\n\n  updatedSeeds.push(newSeed);\n  return updatedSeeds;\n}\n\nconst seedBank = [{\n  type: \"generic_plant\",\n  quantity: 3\n}, {\n  type: \"tulip\",\n  quantity: 3\n}, {\n  type: \"sunflower\",\n  quantity: 3\n}, {\n  type: \"crocus\",\n  quantity: 3\n}];","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/CalculateAchievement.js"],"names":["calculateAchievement","seeds","console","log","duplicate","newSeed","sample","seedBank","checkDuplicate","array","Math","floor","random","length","index","seed","type","updateSeeds","updatedSeeds","push","quantity"],"mappings":"AAAA,eAAe,SAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,MAAIG,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,SAAOD,SAAP,EAAkB;AAChBC,IAAAA,OAAO,GAAGC,MAAM,CAACC,QAAD,CAAhB;AACAH,IAAAA,SAAS,GAAGI,cAAc,CAACH,OAAD,EAAUJ,KAAV,CAA1B;AACD;;AAED,SAAQI,OAAR;AACD;;AAGD,SAASC,MAAT,CAAgBG,KAAhB,EAAuB;AACrB,SAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACI,MAAjC,CAAD,CAAZ;AACD;;AAED,SAASL,cAAT,CAAwBH,OAAxB,EAAiCJ,KAAjC,EAAwC;AACtC,OAAK,IAAIa,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,KAAK,CAACY,MAAlC,EAA0CC,KAAK,EAA/C,EAAmD;AACjD,UAAMC,IAAI,GAAGd,KAAK,CAACa,KAAD,CAAlB;;AACA,QAAIC,IAAI,CAACC,IAAL,KAAcX,OAAO,CAACW,IAA1B,EAAgC;AAC9Bd,MAAAA,OAAO,CAACC,GAAR,CAAYY,IAAI,CAACC,IAAL,GAAY,GAAZ,GAAkBX,OAAO,CAACW,IAAtC;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeY,IAAI,CAACC,IAApB,GAA2B,GAA3B,GAAiCX,OAAO,CAACW,IAArD;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AAED;;AAED,SAASC,WAAT,CAAqBhB,KAArB,EAA4BI,OAA5B,EAAqC;AACnC,QAAMa,YAAY,GAAG,EAArB;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACY,MAAlB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,KAAK,CAACY,MAAlC,EAA0CC,KAAK,EAA/C,EAAmD;AACjDZ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMY,IAAI,GAAGd,KAAK,CAACa,KAAD,CAAlB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ;AACAG,IAAAA,YAAY,CAACC,IAAb,CAAkBJ,IAAlB;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYe,YAAZ;AACD;;AACDA,EAAAA,YAAY,CAACC,IAAb,CAAkBd,OAAlB;AACA,SAAOa,YAAP;AACD;;AAGD,MAAMX,QAAQ,GAAG,CACf;AAACS,EAAAA,IAAI,EAAE,eAAP;AAAwBI,EAAAA,QAAQ,EAAE;AAAlC,CADe,EAEf;AAACJ,EAAAA,IAAI,EAAE,OAAP;AAAgBI,EAAAA,QAAQ,EAAE;AAA1B,CAFe,EAGf;AAACJ,EAAAA,IAAI,EAAE,WAAP;AAAoBI,EAAAA,QAAQ,EAAE;AAA9B,CAHe,EAIf;AAACJ,EAAAA,IAAI,EAAE,QAAP;AAAiBI,EAAAA,QAAQ,EAAE;AAA3B,CAJe,CAAjB","sourcesContent":["export default function calculateAchievement(seeds) {\n  console.log(seeds)\n  let duplicate = true\n  let newSeed = {}\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n\n  return (newSeed)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      console.log(seed.type + \" \" + newSeed.type )\n      console.log(\"Duplicate \" + seed.type + \" \" + newSeed.type)\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed) {\n  const updatedSeeds = []\n  console.log(\"In updateSeeds\")\n  console.log(seeds)\n  console.log(\"SEEDS LENGTH\")\n  console.log(seeds.length)\n  for (let index = 0; index < seeds.length; index++) {\n    console.log(\"In loop!\")\n    const seed = seeds[index]\n    console.log(\"Pushing\")\n    console.log(seed)\n    updatedSeeds.push(seed)\n    console.log(updatedSeeds)\n  }\n  updatedSeeds.push(newSeed)\n  return updatedSeeds\n}\n\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3}\n]\n"]},"metadata":{},"sourceType":"module"}