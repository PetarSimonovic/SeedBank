{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$();\n\nimport '../style/App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { Seeds, Garden, Worlds } from '../components';\nimport { saveGarden, createPlant } from '../functions';\nimport { getBalloons } from '../gameObjects'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  const [plants, setPlants] = useState(props.garden); //  an array of plant components\n\n  const [chosenSeed, setChosenseed] = useState(null); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seeds, setSeeds] = useState(props.seeds); //  an array of the player's available seeds\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [balloons, setBalloons] = useState(getBalloons(plants, seeds, props.lastLogin, props.today));\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed);\n      setChosenseed(null); // setPlants( (prev) => {\n      //   return [newPlant, ...prev]\n      // })\n\n      updateSeeds(-1);\n    }\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    let updatedSeed = seeds[index];\n    console.log(updatedSeed);\n    updatedSeed.quantity += increment;\n    setSeeds(prev => ({ ...prev,\n      [index]: updatedSeed\n    }));\n    console.log(\"SEEDS\");\n    console.log(seeds);\n    setSeedindex(null);\n  };\n\n  const removeBalloon = index => {\n    let removedBalloon = balloons[index];\n    removedBalloon.claimed = true; // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n\n    setBalloons(prev => {\n      return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon];\n    });\n    console.log(balloons);\n  };\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\");\n    saveGarden(props.id, plants, props.world, props.worldChosen, props.seeds);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Garden, {\n      plants: plants,\n      balloons: balloons,\n      world: props.world,\n      seeds: props.seeds,\n      selectSeed: selectSeed,\n      removeBalloon: removeBalloon,\n      updateSeeds: updateSeeds,\n      sowPlant: sowPlant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(Seeds, {\n      seeds: props.seeds,\n      className: \"App-header\",\n      selectSeed: selectSeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(Worlds, {\n      className: \"App-header\",\n      newWorld: props.newWorld,\n      saveWorld: props.saveWorld\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 105\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SeedBank, \"jSqAUxiD6GSZ/4Py9UFQsyIglwA=\");\n\n_c = SeedBank;\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["React","useState","useEffect","Seeds","Garden","Worlds","saveGarden","createPlant","getBalloons","SeedBank","props","plants","setPlants","garden","chosenSeed","setChosenseed","seeds","setSeeds","seedIndex","setSeedindex","balloons","setBalloons","lastLogin","today","sowPlant","event","newPlant","updateSeeds","selectSeed","selectedSeed","index","seed","quantity","increment","updatedSeed","console","log","prev","removeBalloon","removedBalloon","claimed","filter","balloon","id","world","worldChosen","newWorld","saveWorld"],"mappings":"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","sourcesContent":["import '../style/App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { Seeds, Garden, Worlds } from '../components';\nimport { saveGarden, createPlant } from '../functions'\nimport { getBalloons } from '../gameObjects'\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(null) // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState(getBalloons(plants, seeds, props.lastLogin, props.today))\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(null)\n      // setPlants( (prev) => {\n      //   return [newPlant, ...prev]\n      // })\n     updateSeeds(-1)\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n    setChosenseed(selectedSeed)\n    setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    let updatedSeed = seeds[index]\n    console.log(updatedSeed)\n    updatedSeed.quantity += increment\n    setSeeds(prev =>({\n      ...prev,\n      [index]: updatedSeed\n    }))\n    console.log(\"SEEDS\")\n    console.log(seeds)\n    setSeedindex(null)\n  }\n\n  const removeBalloon = (index) => {\n    let removedBalloon = balloons[index]\n    removedBalloon.claimed = true\n    // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n    setBalloons(\n      (prev) => {\n        return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon]\n      }\n    )\n    console.log(balloons)\n  }\n\n\n\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, props.seeds)\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Garden\n    plants={plants}\n    balloons={balloons}\n    world={props.world}\n    seeds={props.seeds}\n    selectSeed={selectSeed}\n    removeBalloon={removeBalloon}\n    updateSeeds={updateSeeds}\n    sowPlant={sowPlant} />\n    {props.worldChosen ? <Seeds seeds={props.seeds} className=\"App-header\" selectSeed={selectSeed} /> : <Worlds className=\"App-header\" newWorld={props.newWorld} saveWorld={ props.saveWorld } />}\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}