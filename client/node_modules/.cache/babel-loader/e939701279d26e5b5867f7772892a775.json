{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Plant.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { createId } from '../functions'; // Creates a Plant based on the props that it receives\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Plant(props) {\n  _s();\n\n  // Retrieve the x, y and z position of the plant\n  console.log(\"PLANT PROPS\");\n  console.log(props);\n  const {\n    x,\n    y,\n    z\n  } = props.plantData.position;\n  const mesh = useRef(); // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = event => {\n    event.stopPropagation();\n    console.log(\"This plant is:\");\n    console.log(props);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      onClick: event => handleClick(event) //  onPointerOver={(event) => setHover(true)}\n      //  onPointerOut={(event) => setHover(false)}\n      ,\n      children: buildPlant(props)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n} // buildPlant constructs an array of plant components that can be rendered\n// Order that components are added may affect rendering order/layering - check?\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\n\n_s(Plant, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c = Plant;\n\nfunction buildPlant(props) {\n  let {\n    growth,\n    bloom\n  } = props;\n  let flower = false; // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom;\n  } // the length of the stem is based on the plant's growth\n\n\n  const stemLength = growth / 6; // push the Base and Stem into the plant array\n\n  let plant = [/*#__PURE__*/_jsxDEV(Base, {}, createId(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Stem, {\n    stemLength: stemLength\n  }, createId(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this)]; // Add leaves relative to the plant's growth level\n\n  for (let leaves = 0; leaves <= growth; leaves++) {\n    plant.push( /*#__PURE__*/_jsxDEV(Leaf, {\n      color: \"#377F34\",\n      position: [0.02, 0.15 + leaves / 12, 0.05]\n    }, createId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Leaf, {\n      color: \"#377F34\",\n      position: [-0.02, 0.15 + leaves / 12, -0.05]\n    }, createId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this));\n  } // Add a flower to the array if it's in bloom\n\n\n  if (growth >= bloom) {\n    plant.push( /*#__PURE__*/_jsxDEV(Flower, {\n      color: \"#832134\",\n      position: [0, 0.15 + growth / 8, 0]\n    }, createId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this));\n  }\n\n  return plant;\n}\n\nfunction Base(props) {\n  _s2();\n\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"dodecahedronGeometry\", {\n      args: [0.08, 2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: '#947352'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(Base, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c2 = Base;\n\nfunction Stem(props) {\n  _s3();\n\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n      args: [0.02, 0.02, 0.3 + props.stemLength, 7]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: '#499B4A'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 3\n  }, this);\n}\n\n_s3(Stem, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c3 = Stem;\n\nfunction Leaf(props) {\n  _s4();\n\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n      args: [0.02, 0.05, 0.02, 6]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: props.color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(Leaf, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c4 = Leaf;\n\nfunction Flower(props) {\n  _s5();\n\n  const mesh = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"dodecahedronGeometry\", {\n      args: [0.06]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: props.color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s5(Flower, \"aRahgypgjBEMoEIvg4ElXdLutjM=\");\n\n_c5 = Flower;\nexport default Plant;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Plant\");\n$RefreshReg$(_c2, \"Base\");\n$RefreshReg$(_c3, \"Stem\");\n$RefreshReg$(_c4, \"Leaf\");\n$RefreshReg$(_c5, \"Flower\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Plant.jsx"],"names":["React","useRef","useState","useMemo","useFrame","useThree","createId","Plant","props","console","log","x","y","z","plantData","position","mesh","handleClick","event","stopPropagation","buildPlant","growth","bloom","flower","stemLength","plant","leaves","push","Base","Stem","Leaf","color","Flower"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { createId } from '../functions'\n\n\n// Creates a Plant based on the props that it receives\n\nfunction Plant(props) {\n  // Retrieve the x, y and z position of the plant\n  console.log(\"PLANT PROPS\")\n  console.log(props)\n  const {x, y, z} = props.plantData.position\n\n  const mesh = useRef()\n\n  // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"This plant is:\")\n    console.log(props)\n  }\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      onClick={(event) => handleClick(event)}\n    //  onPointerOver={(event) => setHover(true)}\n    //  onPointerOut={(event) => setHover(false)}\n    >\n      {buildPlant(props)}\n    </mesh>\n    </group>\n\n  )\n}\n\n// buildPlant constructs an array of plant components that can be rendered\n// Order that components are added may affect rendering order/layering - check?\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\nfunction buildPlant(props) {\n\n  let {growth, bloom} = props\n  let flower = false\n\n  // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom\n  }\n\n  // the length of the stem is based on the plant's growth\n\n  const stemLength = growth/6\n\n  // push the Base and Stem into the plant array\n\n  let plant = [\n    <Base key={createId()} />,\n    <Stem key={createId()} stemLength={stemLength}/>,\n  ]\n\n  // Add leaves relative to the plant's growth level\n\n  for (let leaves = 0; leaves <= growth; leaves++) {\n    plant.push(\n    <Leaf key={createId()} color=\"#377F34\" position={[0.02, 0.15 + (leaves/12), 0.05]}/>,\n    <Leaf key={createId()} color=\"#377F34\" position={[-0.02, 0.15 + (leaves/12), -0.05]}/>,\n  )\n  }\n\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n  plant.push(\n    <Flower key={createId()} color=\"#832134\" position={[0, 0.15 + (growth/8), 0]} />\n  )\n}\n\n  return plant\n\n}\n\nfunction Base(props) {\n\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n     >\n    <dodecahedronGeometry args={[0.08, 2]} />\n    <meshToonMaterial color={'#947352'} />\n  </mesh>\n)\n\n\n}\n\nfunction Stem(props) {\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n    >\n    <cylinderGeometry args={[0.02, 0.02, 0.3 + props.stemLength, 7]} />\n    <meshToonMaterial color={'#499B4A'} />\n    </mesh>\n  )\n}\n\n\nfunction Leaf(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <cylinderGeometry args={[0.02, 0.05, 0.02, 6]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\nfunction Flower(props) {\n\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <dodecahedronGeometry args={[0.06]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\n\n\nexport default Plant\n"]},"metadata":{},"sourceType":"module"}