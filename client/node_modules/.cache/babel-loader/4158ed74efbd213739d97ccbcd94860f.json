{"ast":null,"code":"import { sample, randomiser, createId, calculateDays } from './';\nimport { Balloon } from '../gameObjects';\nimport api from '../api';\nconst defaultQuantity = 3; // default quantity for a pack of new seeds\n\nexport default async function loadBalloons(seeds, login, id, today) {\n  const dateDifference = calculateDays(login, today);\n  let loadedBalloons = await api.getBalloons(id);\n  let balloonData = loadedBalloons.data.data;\n  let balloons = parseBalloons(balloonData); // NO LONGER SENDING A 'DAILY BALLOON'\n  // if (seeds.length > 0) {\n  //   balloons.push(dailyBalloon(seeds))\n  // }\n\n  return balloons;\n}\n\nfunction parseBalloons(balloonData) {\n  let parsedBalloons = [];\n\n  for (let index = 0; index < balloonData.length; index++) {\n    const balloon = balloonData[index];\n    balloon.balloonId = balloon._id; // Can only get the DB to findOne using its own _id!\n\n    console.log(balloon);\n\n    if (balloon.claimed) {\n      continue;\n    }\n\n    parsedBalloons.push(Object.assign(new Balloon(), balloon));\n  }\n\n  return parsedBalloons;\n} //NOT IN USE ANYMORE\n\n\nfunction dailyBalloon(seeds, id) {\n  // This is not being added to the balloon database at the moment\n  const sampleSeeds = sample(seeds);\n  const newSeeds = {\n    type: sampleSeeds.type,\n    quantity: defaultQuantity\n  };\n  const dailyMessage = `${newSeeds.quantity} x ${newSeeds.type}!`;\n  return new Balloon(id, newSeeds.type, newSeeds.quantity, dailyMessage);\n}","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/functions/LoadBalloons.js"],"names":["sample","randomiser","createId","calculateDays","Balloon","api","defaultQuantity","loadBalloons","seeds","login","id","today","dateDifference","loadedBalloons","getBalloons","balloonData","data","balloons","parseBalloons","parsedBalloons","index","length","balloon","balloonId","_id","console","log","claimed","push","Object","assign","dailyBalloon","sampleSeeds","newSeeds","type","quantity","dailyMessage"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,aAAtC,QAA0D,IAA1D;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,eAAe,GAAG,CAAxB,C,CAA0B;;AAE1B,eAAe,eAAeC,YAAf,CAA4BC,KAA5B,EAAmCC,KAAnC,EAA0CC,EAA1C,EAA8CC,KAA9C,EAAqD;AAElE,QAAMC,cAAc,GAAGT,aAAa,CAACM,KAAD,EAAQE,KAAR,CAApC;AACA,MAAIE,cAAc,GAAG,MAAMR,GAAG,CAACS,WAAJ,CAAgBJ,EAAhB,CAA3B;AACA,MAAIK,WAAW,GAAGF,cAAc,CAACG,IAAf,CAAoBA,IAAtC;AAGA,MAAIC,QAAQ,GAAGC,aAAa,CAACH,WAAD,CAA5B,CAPkE,CASlE;AACA;AACA;AACA;;AAEA,SAAOE,QAAP;AACD;;AAED,SAASC,aAAT,CAAuBH,WAAvB,EAAoC;AAClC,MAAII,cAAc,GAAG,EAArB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,WAAW,CAACM,MAAxC,EAAgDD,KAAK,EAArD,EAAyD;AACvD,UAAME,OAAO,GAAGP,WAAW,CAACK,KAAD,CAA3B;AACAE,IAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACE,GAA5B,CAFuD,CAEvB;;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;;AACA,QAAIA,OAAO,CAACK,OAAZ,EAAqB;AAClB;AAAU;;AACbR,IAAAA,cAAc,CAACS,IAAf,CAAoBC,MAAM,CAACC,MAAP,CAAc,IAAI1B,OAAJ,EAAd,EAA6BkB,OAA7B,CAApB;AACD;;AACD,SAAOH,cAAP;AACD,C,CAGD;;;AACA,SAASY,YAAT,CAAsBvB,KAAtB,EAA6BE,EAA7B,EAAiC;AAE/B;AACA,QAAMsB,WAAW,GAAGhC,MAAM,CAACQ,KAAD,CAA1B;AACA,QAAMyB,QAAQ,GAAG;AAACC,IAAAA,IAAI,EAAEF,WAAW,CAACE,IAAnB;AAAyBC,IAAAA,QAAQ,EAAE7B;AAAnC,GAAjB;AACA,QAAM8B,YAAY,GAAI,GAAEH,QAAQ,CAACE,QAAS,MAAKF,QAAQ,CAACC,IAAK,GAA7D;AACA,SAAO,IAAI9B,OAAJ,CAAYM,EAAZ,EAAgBuB,QAAQ,CAACC,IAAzB,EAA+BD,QAAQ,CAACE,QAAxC,EAAkDC,YAAlD,CAAP;AACD","sourcesContent":["import {sample, randomiser, createId, calculateDays} from './'\nimport { Balloon } from '../gameObjects'\nimport api from '../api';\n\nconst defaultQuantity = 3 // default quantity for a pack of new seeds\n\nexport default async function loadBalloons(seeds, login, id, today) {\n\n  const dateDifference = calculateDays(login, today)\n  let loadedBalloons = await api.getBalloons(id)\n  let balloonData = loadedBalloons.data.data\n\n\n  let balloons = parseBalloons(balloonData)\n\n  // NO LONGER SENDING A 'DAILY BALLOON'\n  // if (seeds.length > 0) {\n  //   balloons.push(dailyBalloon(seeds))\n  // }\n\n  return balloons\n}\n\nfunction parseBalloons(balloonData) {\n  let parsedBalloons = []\n  for (let index = 0; index < balloonData.length; index++) {\n    const balloon = balloonData[index]\n    balloon.balloonId = balloon._id // Can only get the DB to findOne using its own _id!\n    console.log(balloon)\n    if (balloon.claimed) {\n       continue }\n    parsedBalloons.push(Object.assign(new Balloon(), balloon))\n  }\n  return parsedBalloons\n}\n\n\n//NOT IN USE ANYMORE\nfunction dailyBalloon(seeds, id) {\n\n  // This is not being added to the balloon database at the moment\n  const sampleSeeds = sample(seeds)\n  const newSeeds = {type: sampleSeeds.type, quantity: defaultQuantity}\n  const dailyMessage = `${newSeeds.quantity} x ${newSeeds.type}!`\n  return new Balloon(id, newSeeds.type, newSeeds.quantity, dailyMessage)\n}\n"]},"metadata":{},"sourceType":"module"}