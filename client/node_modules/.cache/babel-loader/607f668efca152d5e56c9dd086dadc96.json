{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$();\n\nimport '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { addSeeds, createPlants, createPlantComponent, createId, addPlant, loadPlants, loadSeeds, updateSeed, calculateAchievement, saveGarden, sendBalloon, createPlant, loadBalloons, makeFriendRequest, makeFriends, sample } from '../functions';\nimport { Balloon, Plant } from '../gameObjects';\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Friends, Clouds, Balloons, SeedBox, IntroBalloons } from '../components'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  const [plants, setPlants] = useState([]); //  an array of plant components\n\n  const [seeds, setSeeds] = useState([]); //  an array of the player's available seeds\n\n  const [chosenSeed, setChosenseed] = useState(\"\"); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [balloons, setBalloons] = useState([]); // useEffect Hooks run after all the other code, and are then called in order\n  // This loads the seeds from the DB - it does it only once\n\n  useEffect(() => {\n    loadSeeds(props.id).then(data => setSeeds(data));\n  }, []); // This useEffect runs when seeds change\n\n  useEffect(() => {\n    console.log(\"USE EFFECT SEEDS!\");\n    console.log(\"UPDATED SEEDS ARE:\");\n    console.log(seeds);\n  }, [seeds]); // This loads the plants from the DB - it does it only once\n\n  useEffect(() => {\n    loadPlants(props.id).then(data => setPlants(createPlants(data)));\n  }, []); // This useEffect runs when plant is changed\n\n  useEffect(() => {\n    console.log(\"USE EFFECT PLANTS!\");\n    console.log(\"NOW CHECKING ACHIEVEMENTS\");\n    console.log(plants.length); //  saveGarden(props.id, plants, props.world, props.worldChosen)\n\n    plants.length % 5 === 0 && plants.length !== 0 ? checkAchievements() : console.log(false);\n  }, [plants]);\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      console.log(\"SOW PLANT\");\n      const position = [event.point.x, event.point.y, event.point.z];\n      const plant = new Plant(props.id, position, chosenSeed);\n      const plantComponent = createPlantComponent(plant);\n      setPlants(prev => {\n        return [plantComponent, ...prev];\n      });\n      removeSeed();\n      addPlant(plant);\n    }\n  };\n\n  const removeSeed = () => {\n    console.log(\"REMOVE SEED\");\n    setChosenseed(\"\");\n    updateSeeds(-1, chosenSeed);\n    console.log(seeds);\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"UPDATE SEEDS...\");\n    const index = seeds.findIndex(seed => seed.type === type);\n\n    if (index === -1) {\n      console.log(\"NEW SEED in UPDATE SEEDS\");\n      console.log(\"adding newSeed \" + type);\n      setSeeds(prev => {\n        return [...prev, {\n          type: type,\n          quantity: increment\n        }];\n      });\n      addSeeds(props.id, type, increment);\n    } else {\n      console.log(\"INCREMENT SEEDS\");\n      let amendedSeed = seeds[index];\n      console.log(amendedSeed);\n      amendedSeed.quantity += increment;\n      setSeeds(prev => {\n        return [...prev.filter(seed => seed.type !== type), amendedSeed];\n      });\n      updateSeed(props.id, amendedSeed);\n    }\n\n    setSeedindex(null);\n  };\n\n  const checkAchievements = () => {\n    console.log(\"CHECK ACHIEVEMENTS\");\n    let achievementCount = plants.length / 5;\n    let startingSeeds = 2;\n\n    if (seeds.length < achievementCount + startingSeeds) {\n      const newSeed = calculateAchievement(seeds, props.id, plants.length);\n\n      if (newSeed !== null) {\n        updateSeeds(0, newSeed.type);\n      }\n    }\n  };\n\n  const sendFriendRequest = sentence => {\n    makeFriendRequest(props.id, props.userName, sentence, props.world);\n  };\n\n  const acceptFriend = friendName => {\n    makeFriends(props.id, props.userName, friendName, props.world);\n  };\n\n  const sendPlant = (friendName, friendId) => {\n    if (chosenSeed) {\n      const message = `${props.userName} sent you ${'\\n'} a ${chosenSeed} seed!`;\n      sendBalloon(friendId, chosenSeed, 1, message, props.userName);\n      console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`);\n      removeSeed();\n    } else {\n      console.log(\"No seed selected\");\n    }\n  };\n\n  const buyBalloon = colour => {\n    const seed = sample(seeds);\n    const message = `Bought: ${seed.type} x 3!`;\n    sendBalloon(props.id, seed.type, 3, message, \"SeedBank\", colour);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"canvas\",\n      children: [/*#__PURE__*/_jsxDEV(Camera, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: console.log(\"loading\"),\n        children: [/*#__PURE__*/_jsxDEV(Garden, {\n          friend: false,\n          sowPlant: sowPlant,\n          position: [0, 0, 0],\n          world: props.world,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 7\n        }, this), plants, /*#__PURE__*/_jsxDEV(Sun, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Firmament, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Friends, {\n          sendPlant: sendPlant,\n          userId: props.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Balloons, {\n          updateSeeds: updateSeeds,\n          acceptFriend: acceptFriend,\n          userId: props.id,\n          today: props.today,\n          lastLogin: props.lastLogin,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Clouds, {\n          seeds: seeds,\n          chosenSeed: chosenSeed,\n          buyBalloon: buyBalloon,\n          position: [0, -0.8, 1],\n          sendFriendRequest: sendFriendRequest,\n          selectSeed: selectSeed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(IntroBalloons, {\n        saveWorld: props.saveWorld,\n        newWorld: props.newWorld\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SeedBank, \"vjstT6CAYhyS29+hAh2f4HenJTU=\");\n\n_c = SeedBank;\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["React","useState","useEffect","Suspense","addSeeds","createPlants","createPlantComponent","createId","addPlant","loadPlants","loadSeeds","updateSeed","calculateAchievement","saveGarden","sendBalloon","createPlant","loadBalloons","makeFriendRequest","makeFriends","sample","Balloon","Plant","Canvas","Garden","Camera","Sun","World","Firmament","Friends","Clouds","Balloons","SeedBox","IntroBalloons","SeedBank","props","plants","setPlants","seeds","setSeeds","chosenSeed","setChosenseed","seedIndex","setSeedindex","balloons","setBalloons","id","then","data","console","log","length","checkAchievements","sowPlant","event","position","point","x","y","z","plant","plantComponent","prev","removeSeed","updateSeeds","selectSeed","selectedSeed","index","seed","quantity","increment","type","findIndex","amendedSeed","filter","achievementCount","startingSeeds","newSeed","sendFriendRequest","sentence","userName","world","acceptFriend","friendName","sendPlant","friendId","message","buyBalloon","colour","worldChosen","today","lastLogin","saveWorld","newWorld"],"mappings":";;;AAAA,OAAO,kBAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,oBAAjC,EAAuDC,QAAvD,EAAiEC,QAAjE,EAA2EC,UAA3E,EAAuFC,SAAvF,EAAkGC,UAAlG,EAA8GC,oBAA9G,EAAoIC,UAApI,EAAgJC,WAAhJ,EAA6JC,WAA7J,EAA0KC,YAA1K,EAAwLC,iBAAxL,EAA2MC,WAA3M,EAAwNC,MAAxN,QAAsO,cAAtO;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,gBAA/B;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,GAAzB,EAA8BC,KAA9B,EAAqCC,SAArC,EAAgDC,OAAhD,EAAyDC,MAAzD,EAAiEC,QAAjE,EAA2EC,OAA3E,EAAoFC,aAApF,QAAyG,eAAzG,C,CAIA;AACA;AAGA;AACA;;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAEvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBnC,QAAQ,CAAC,EAAD,CAApC,CAFuB,CAEkB;;AACzC,QAAM,CAACoC,KAAD,EAAQC,QAAR,IAAoBrC,QAAQ,CAAC,EAAD,CAAlC,CAHuB,CAGgB;;AACvC,QAAM,CAACsC,UAAD,EAAaC,aAAb,IAA8BvC,QAAQ,CAAC,EAAD,CAA5C,CAJuB,CAI0B;;AACjD,QAAM,CAACwC,SAAD,EAAYC,YAAZ,IAA4BzC,QAAQ,CAAC,IAAD,CAA1C,CALuB,CAK0B;;AACjD,QAAM,CAAC0C,QAAD,EAAWC,WAAX,IAA0B3C,QAAQ,CAAC,EAAD,CAAxC,CANuB,CAQvB;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,SAAS,CAACwB,KAAK,CAACW,EAAP,CAAT,CAAoBC,IAApB,CAAyBC,IAAI,IAAIT,QAAQ,CAACS,IAAD,CAAzC;AACD,GAFQ,EAEN,EAFM,CAAT,CAXuB,CAevB;;AACA7C,EAAAA,SAAS,CAAC,MAAM;AACd8C,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACD,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT,CAhBuB,CAuBvB;;AACAnC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,UAAU,CAACyB,KAAK,CAACW,EAAP,CAAV,CAAqBC,IAArB,CAA0BC,IAAI,IAAIX,SAAS,CAAC/B,YAAY,CAAC0C,IAAD,CAAb,CAA3C;AACD,GAFQ,EAEN,EAFM,CAAT,CAxBuB,CAgCvB;;AAEA7C,EAAAA,SAAS,CAAC,MAAM;AACd8C,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYd,MAAM,CAACe,MAAnB,EAHc,CAIhB;;AACEf,IAAAA,MAAM,CAACe,MAAP,GAAgB,CAAhB,KAAsB,CAAtB,IAA2Bf,MAAM,CAACe,MAAP,KAAkB,CAA7C,GAAiDC,iBAAiB,EAAlE,GAAuEH,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAvE;AACD,GANQ,EAMN,CAACd,MAAD,CANM,CAAT;;AASA,QAAMiB,QAAQ,GAAKC,KAAF,IAAa;AAC5B,QAAId,UAAJ,EAAgB;AACdS,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,YAAMK,QAAQ,GAAG,CAACD,KAAK,CAACE,KAAN,CAAYC,CAAb,EAAgBH,KAAK,CAACE,KAAN,CAAYE,CAA5B,EAA+BJ,KAAK,CAACE,KAAN,CAAYG,CAA3C,CAAjB;AACA,YAAMC,KAAK,GAAG,IAAItC,KAAJ,CAAUa,KAAK,CAACW,EAAhB,EAAoBS,QAApB,EAA8Bf,UAA9B,CAAd;AACA,YAAMqB,cAAc,GAAGtD,oBAAoB,CAACqD,KAAD,CAA3C;AACAvB,MAAAA,SAAS,CAAGyB,IAAD,IAAU;AACnB,eAAO,CAACD,cAAD,EAAiB,GAAGC,IAApB,CAAP;AACD,OAFQ,CAAT;AAGAC,MAAAA,UAAU;AACVtD,MAAAA,QAAQ,CAACmD,KAAD,CAAR;AACD;AACF,GAZD;;AAcA,QAAMG,UAAU,GAAG,MAAM;AACvBd,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAT,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAuB,IAAAA,WAAW,CAAC,CAAC,CAAF,EAAKxB,UAAL,CAAX;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACD,GALD;;AAOA,QAAM2B,UAAU,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyB;AAC1C,UAAMC,IAAI,GAAG9B,KAAK,CAAC6B,KAAD,CAAlB;;AACA,QAAI7B,KAAK,CAAC6B,KAAD,CAAL,CAAaE,QAAb,GAAwB,CAA5B,EAA+B;AAC7B5B,MAAAA,aAAa,CAACyB,YAAD,CAAb;AACAvB,MAAAA,YAAY,CAACwB,KAAD,CAAZ;AACD;AACF,GAND;;AAQA,QAAMH,WAAW,GAAG,CAACM,SAAD,EAAYC,IAAZ,KAAqB;AACvCtB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,UAAMiB,KAAK,GAAG7B,KAAK,CAACkC,SAAN,CAAgBJ,IAAI,IAAIA,IAAI,CAACG,IAAL,KAAcA,IAAtC,CAAd;;AACA,QAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBlB,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBqB,IAAhC;AACAhC,MAAAA,QAAQ,CAAGuB,IAAD,IAAU;AAClB,eAAO,CAAC,GAAGA,IAAJ,EAAU;AAACS,UAAAA,IAAI,EAAEA,IAAP;AAAaF,UAAAA,QAAQ,EAAEC;AAAvB,SAAV,CAAP;AACD,OAFO,CAAR;AAGAjE,MAAAA,QAAQ,CAAC8B,KAAK,CAACW,EAAP,EAAWyB,IAAX,EAAiBD,SAAjB,CAAR;AACD,KAPD,MAOO;AACLrB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,UAAIuB,WAAW,GAAGnC,KAAK,CAAC6B,KAAD,CAAvB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAYuB,WAAZ;AACAA,MAAAA,WAAW,CAACJ,QAAZ,IAAwBC,SAAxB;AACA/B,MAAAA,QAAQ,CAAGuB,IAAD,IAAU;AAClB,eAAO,CAAC,GAAGA,IAAI,CAACY,MAAL,CAAYN,IAAI,IAAIA,IAAI,CAACG,IAAL,KAAcA,IAAlC,CAAJ,EAA6CE,WAA7C,CAAP;AACD,OAFO,CAAR;AAGA7D,MAAAA,UAAU,CAACuB,KAAK,CAACW,EAAP,EAAW2B,WAAX,CAAV;AACD;;AACD9B,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GArBD;;AAyBA,QAAMS,iBAAiB,GAAG,MAAM;AAC9BH,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,QAAIyB,gBAAgB,GAAGvC,MAAM,CAACe,MAAP,GAAgB,CAAvC;AACA,QAAIyB,aAAa,GAAG,CAApB;;AACA,QAAItC,KAAK,CAACa,MAAN,GAAewB,gBAAgB,GAAGC,aAAtC,EAAqD;AACnD,YAAMC,OAAO,GAAGhE,oBAAoB,CAACyB,KAAD,EAAQH,KAAK,CAACW,EAAd,EAAkBV,MAAM,CAACe,MAAzB,CAApC;;AACA,UAAI0B,OAAO,KAAK,IAAhB,EAAuB;AAAEb,QAAAA,WAAW,CAAC,CAAD,EAAIa,OAAO,CAACN,IAAZ,CAAX;AAA8B;AACtD;AACF,GARH;;AAUA,QAAMO,iBAAiB,GAAIC,QAAD,IAAc;AACtC7D,IAAAA,iBAAiB,CAACiB,KAAK,CAACW,EAAP,EAAWX,KAAK,CAAC6C,QAAjB,EAA2BD,QAA3B,EAAqC5C,KAAK,CAAC8C,KAA3C,CAAjB;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAIC,UAAD,IAAgB;AACnChE,IAAAA,WAAW,CAACgB,KAAK,CAACW,EAAP,EAAWX,KAAK,CAAC6C,QAAjB,EAA2BG,UAA3B,EAAuChD,KAAK,CAAC8C,KAA7C,CAAX;AACD,GAFD;;AAIA,QAAMG,SAAS,GAAG,CAACD,UAAD,EAAaE,QAAb,KAAyB;AACzC,QAAI7C,UAAJ,EAAgB;AACd,YAAM8C,OAAO,GAAI,GAAEnD,KAAK,CAAC6C,QAAS,aAAY,IAAK,MAAKxC,UAAW,QAAnE;AACAzB,MAAAA,WAAW,CAACsE,QAAD,EAAW7C,UAAX,EAAuB,CAAvB,EAA0B8C,OAA1B,EAAmCnD,KAAK,CAAC6C,QAAzC,CAAX;AACA/B,MAAAA,OAAO,CAACC,GAAR,CAAa,WAAUV,UAAW,OAAM2C,UAAW,IAAGE,QAAS,EAA/D;AACAtB,MAAAA,UAAU;AACX,KALD,MAKO;AACLd,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;AAEF,GAVD;;AAYA,QAAMqC,UAAU,GAAIC,MAAD,IAAY;AAC7B,UAAMpB,IAAI,GAAGhD,MAAM,CAACkB,KAAD,CAAnB;AACA,UAAMgD,OAAO,GAAI,WAAUlB,IAAI,CAACG,IAAK,OAArC;AACAxD,IAAAA,WAAW,CAACoB,KAAK,CAACW,EAAP,EAAWsB,IAAI,CAACG,IAAhB,EAAsB,CAAtB,EAAyBe,OAAzB,EAAkC,UAAlC,EAA8CE,MAA9C,CAAX;AACD,GAJD;;AAQA,sBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEvC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAApB;AAAA,gCACA,QAAC,MAAD;AACA,UAAA,MAAM,EAAE,KADR;AAEA,UAAA,QAAQ,EAAEG,QAFV;AAGA,UAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHV;AAIA,UAAA,KAAK,EAAElB,KAAK,CAAC8C,KAJb;AAKA,UAAA,KAAK,EAAE3C;AALP;AAAA;AAAA;AAAA;AAAA,gBADA,EAQCF,MARD,eASA,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,gBATA,eAUA,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBAVA,eAWA,QAAC,OAAD;AAAS,UAAA,SAAS,EAAEgD,SAApB;AAA+B,UAAA,MAAM,EAAEjD,KAAK,CAACW;AAA7C;AAAA;AAAA;AAAA;AAAA,gBAXA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAeEX,KAAK,CAACsD,WAAN,gBACC;AAAA,gCACA,QAAC,QAAD;AACC,UAAA,WAAW,EAAEzB,WADd;AAEC,UAAA,YAAY,EAAEkB,YAFf;AAGC,UAAA,MAAM,EAAE/C,KAAK,CAACW,EAHf;AAIC,UAAA,KAAK,EAAEX,KAAK,CAACuD,KAJd;AAKC,UAAA,SAAS,EAAEvD,KAAK,CAACwD,SALlB;AAMC,UAAA,KAAK,EAAErD;AANR;AAAA;AAAA;AAAA;AAAA,gBADA,eAQA,QAAC,MAAD;AACC,UAAA,KAAK,EAAEA,KADR;AAEC,UAAA,UAAU,EAAEE,UAFb;AAGC,UAAA,UAAU,EAAE+C,UAHb;AAIC,UAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAC,GAAL,EAAU,CAAV,CAJX;AAKC,UAAA,iBAAiB,EAAET,iBALpB;AAMC,UAAA,UAAU,EAAEb;AANb;AAAA;AAAA;AAAA;AAAA,gBARA;AAAA,sBADD,gBAiBE,QAAE,aAAF;AACE,QAAA,SAAS,EAAE9B,KAAK,CAACyD,SADnB;AAEE,QAAA,QAAQ,EAAEzD,KAAK,CAAC0D;AAFlB;AAAA;AAAA;AAAA;AAAA,cAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADA;AAyCD;;GAhLQ3D,Q;;KAAAA,Q;AAkLT,eAAeA,QAAf","sourcesContent":["import '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { addSeeds, createPlants, createPlantComponent, createId, addPlant, loadPlants, loadSeeds, updateSeed, calculateAchievement, saveGarden, sendBalloon, createPlant, loadBalloons, makeFriendRequest, makeFriends, sample } from '../functions'\nimport { Balloon, Plant } from '../gameObjects'\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Friends, Clouds, Balloons, SeedBox, IntroBalloons } from '../components';\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n  const [plants, setPlants] = useState([]) //  an array of plant components\n  const [seeds, setSeeds] = useState([]) //  an array of the player's available seeds\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState([])\n\n  // useEffect Hooks run after all the other code, and are then called in order\n\n  // This loads the seeds from the DB - it does it only once\n  useEffect(() => {\n    loadSeeds(props.id).then(data => setSeeds(data))\n  }, [])\n\n  // This useEffect runs when seeds change\n  useEffect(() => {\n    console.log(\"USE EFFECT SEEDS!\")\n    console.log(\"UPDATED SEEDS ARE:\")\n    console.log(seeds)\n  }, [seeds])\n\n\n  // This loads the plants from the DB - it does it only once\n  useEffect(() => {\n    loadPlants(props.id).then(data => setPlants(createPlants(data)))\n  }, [])\n\n\n\n\n\n  // This useEffect runs when plant is changed\n\n  useEffect(() => {\n    console.log(\"USE EFFECT PLANTS!\")\n    console.log(\"NOW CHECKING ACHIEVEMENTS\")\n    console.log(plants.length)\n  //  saveGarden(props.id, plants, props.world, props.worldChosen)\n    plants.length % 5 === 0 && plants.length !== 0 ? checkAchievements() : console.log(false)\n  }, [plants])\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      console.log(\"SOW PLANT\")\n      const position = [event.point.x, event.point.y, event.point.z]\n      const plant = new Plant(props.id, position, chosenSeed)\n      const plantComponent = createPlantComponent(plant)\n      setPlants( (prev) => {\n        return [plantComponent, ...prev]\n      })\n      removeSeed()\n      addPlant(plant)\n    }\n  }\n\n  const removeSeed = () => {\n    console.log(\"REMOVE SEED\")\n    setChosenseed(\"\")\n    updateSeeds(-1, chosenSeed)\n    console.log(seeds)\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed)\n      setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"UPDATE SEEDS...\")\n    const index = seeds.findIndex(seed => seed.type === type)\n    if (index === -1) {\n      console.log(\"NEW SEED in UPDATE SEEDS\")\n      console.log(\"adding newSeed \" + type)\n      setSeeds( (prev) => {\n        return [...prev, {type: type, quantity: increment}]\n      })\n      addSeeds(props.id, type, increment)\n    } else {\n      console.log(\"INCREMENT SEEDS\")\n      let amendedSeed = seeds[index]\n      console.log(amendedSeed)\n      amendedSeed.quantity += increment\n      setSeeds( (prev) => {\n        return [...prev.filter(seed => seed.type !== type), amendedSeed]\n      })\n      updateSeed(props.id, amendedSeed)\n    }\n    setSeedindex(null)\n  }\n\n\n\n  const checkAchievements = () => {\n    console.log(\"CHECK ACHIEVEMENTS\")\n    let achievementCount = plants.length / 5\n    let startingSeeds = 2\n    if (seeds.length < achievementCount + startingSeeds) {\n      const newSeed = calculateAchievement(seeds, props.id, plants.length)\n      if (newSeed !== null ) { updateSeeds(0, newSeed.type) }\n      }\n    }\n\n  const sendFriendRequest = (sentence) => {\n    makeFriendRequest(props.id, props.userName, sentence, props.world)\n  }\n\n  const acceptFriend = (friendName) => {\n    makeFriends(props.id, props.userName, friendName, props.world)\n  }\n\n  const sendPlant = (friendName, friendId) =>{\n    if (chosenSeed) {\n      const message = `${props.userName} sent you ${'\\n'} a ${chosenSeed} seed!`\n      sendBalloon(friendId, chosenSeed, 1, message, props.userName)\n      console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`)\n      removeSeed()\n    } else {\n      console.log(\"No seed selected\")\n    }\n\n  }\n\n  const buyBalloon = (colour) => {\n    const seed = sample(seeds)\n    const message = `Bought: ${seed.type} x 3!`\n    sendBalloon(props.id, seed.type, 3, message, \"SeedBank\", colour)\n  }\n\n\n\n  return (\n  <div className=\"App\">\n    <Canvas id=\"canvas\" >\n      <Camera  />\n      <Suspense fallback={console.log(\"loading\")}>\n      <Garden\n      friend={false}\n      sowPlant={sowPlant}\n      position={[0, 0, 0]}\n      world={props.world}\n      seeds={seeds}\n       />\n      {plants}\n      <Sun />\n      <Firmament />\n      <Friends sendPlant={sendPlant} userId={props.id}/>\n     </Suspense>\n     {props.worldChosen ?\n       <>\n       <Balloons\n        updateSeeds={updateSeeds}\n        acceptFriend={acceptFriend}\n        userId={props.id}\n        today={props.today}\n        lastLogin={props.lastLogin}\n        seeds={seeds} />\n       <Clouds\n        seeds={seeds}\n        chosenSeed={chosenSeed}\n        buyBalloon={buyBalloon}\n        position={[0, -0.8, 1]}\n        sendFriendRequest={sendFriendRequest}\n        selectSeed={selectSeed} />\n        </> :\n        < IntroBalloons\n          saveWorld={props.saveWorld}\n          newWorld={props.newWorld}\n        /> }\n    </Canvas>\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}