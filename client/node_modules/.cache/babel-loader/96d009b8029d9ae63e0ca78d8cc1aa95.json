{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Garden.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport seedBankSoil from './seedBankSoil.png';\nimport GardenPlot from './GardenPlot.js';\nimport Plant from './Plant.js';\nimport styled from 'styled-components';\nimport api from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.table.attrs({})`\n    margin: 0 30px;\n`;\n_c = Wrapper;\n\nclass Garden extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.saveGarden = async () => {\n      console.log(\"Attempting to save garden\");\n      await api.updateGarden(this.props.id, JSON.stringify(this.state.garden)).then(res => {\n        window.alert(`Garden updated successfully`);\n      });\n    };\n\n    this.state = {\n      seed: \"\",\n      garden: this.props.garden,\n      infoPane: \"Choose seed\"\n    };\n    this.generateGarden = this.generateGarden.bind(this);\n    this.selectSeed = this.selectSeed.bind(this);\n    this.addPlot = this.addPlot.bind(this);\n    this.resetSeed = this.resetSeed.bind(this);\n    this.updateGarden = this.updateGarden.bind(this);\n    this.plantSeed = this.plantSeed.bind(this);\n    this.getPlant = this.getPlant.bind(this);\n  }\n\n  updatePlantInfo() {\n    //this.setState({ plantName: plant.name });\n    console.log(\"Button was Clicked\");\n  }\n\n  generateGarden() {\n    console.log(\"Generating Garden, size:\" + this.props.size + this.state.seed);\n    let newRows = [];\n\n    for (var i = 0; i < this.props.size; i++) {\n      //  console.log(\"adding row\" + i)\n      let uniqueKey = \"gardenRow_\" + i;\n      newRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        id: uniqueKey,\n        children: this.addPlot(i)\n      }, uniqueKey.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }, this));\n    }\n\n    console.log(this.state.garden);\n    return newRows;\n  }\n\n  addPlot(id) {\n    var plots = [];\n\n    for (var i = 0; i < this.props.size; i++) {\n      let uniqueKey = \"plot_\" + id + \"_\" + i;\n      let plantID = id + \"_\" + i;\n      let plant = this.getPlant(plantID);\n      plots.push( /*#__PURE__*/_jsxDEV(GardenPlot, {\n        id: id + \"_\" + i,\n        plantSeed: this.plantSeed,\n        plant: plant,\n        seed: this.state.seed\n      }, uniqueKey.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this));\n    }\n\n    return plots;\n  }\n\n  selectSeed() {\n    this.setState({\n      seed: \"Generic Plant\",\n      infoPane: \"Choose a plot for Generic Plant\"\n    });\n    console.log(\"Seed selected?\" + this.state.seed);\n  }\n\n  resetSeed() {\n    this.setState({\n      seed: \"\",\n      infoPane: \"Choose seed\"\n    });\n    console.log(\"Seed selected?\" + this.state.seed);\n  }\n\n  plantSeed(id) {\n    console.log(\"SEARCHING FOR\" + id);\n    let plant = this.state.garden.find(x => x.id === id);\n    console.log(\"Plant is \" + \" \" + plant.id + \" \" + plant.growth);\n    plant.growth += 1;\n    plant.updateImage();\n    console.log(\"Plant is \" + \" \" + plant.id + \" \" + plant.growth);\n    let newGarden = this.state.garden.filter(function (plant) {\n      return plant.id != id;\n    });\n    newGarden.push(plant);\n    this.setState({\n      garden: newGarden\n    });\n    console.log(\"PLANT UPDATED\");\n    this.resetSeed();\n  }\n\n  updateGarden(plant) {\n    var newGarden = this.state.garden;\n    newGarden.push(plant);\n    this.setState({\n      garden: newGarden\n    });\n    console.log(this.state.garden);\n  }\n\n  getPlant(plantID) {\n    if (!this.state.garden.some(plant => plant.id === plantID)) {\n      let newPlant = new Plant(plantID);\n      this.updateGarden(newPlant);\n    }\n\n    return this.state.garden.find(plant => plant.id === plantID);\n  }\n\n  componentDidUpdate() {\n    this.saveGarden();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.infoPane\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"garden\",\n        id: \"gardenTable\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.generateGarden()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this)\n      }, \"gardenTable\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"sowSeed\",\n        onClick: this.selectSeed,\n        children: \"Generic Plant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Garden;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrapper\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Garden.js"],"names":["React","ReactDOM","seedBankSoil","GardenPlot","Plant","styled","api","Wrapper","table","attrs","Garden","Component","constructor","props","saveGarden","console","log","updateGarden","id","JSON","stringify","state","garden","then","res","window","alert","seed","infoPane","generateGarden","bind","selectSeed","addPlot","resetSeed","plantSeed","getPlant","updatePlantInfo","size","newRows","i","uniqueKey","push","toString","plots","plantID","plant","setState","find","x","growth","updateImage","newGarden","filter","some","newPlant","componentDidUpdate","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAGA,MAAMC,OAAO,GAAGF,MAAM,CAACG,KAAP,CAAaC,KAAb,CAAmB,EAAnB,CACb;AACH;AACA,CAHA;KAAMF,O;;AAMN,MAAMG,MAAN,SAAqBV,KAAK,CAACW,SAA3B,CAAqC;AAEnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAwGlBC,UAxGkB,GAwGL,YAAY;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACC,YAAMV,GAAG,CAACW,YAAJ,CAAiB,KAAKJ,KAAL,CAAWK,EAA5B,EAAgCC,IAAI,CAACC,SAAL,CAAe,KAAKC,KAAL,CAAWC,MAA1B,CAAhC,EAAmEC,IAAnE,CAAwEC,GAAG,IAAI;AAC/EC,QAAAA,MAAM,CAACC,KAAP,CAAc,6BAAd;AACH,OAFG,CAAN;AAGF,KA7GiB;;AAEjB,SAAKL,KAAL,GAAa;AACXM,MAAAA,IAAI,EAAE,EADK;AAEXL,MAAAA,MAAM,EAAE,KAAKT,KAAL,CAAWS,MAFR;AAGXM,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,OAAL,GAAe,KAAKA,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKG,SAAL,GAAiB,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKb,YAAL,GAAoB,KAAKA,YAAL,CAAkBa,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKK,QAAL,GAAgB,KAAKA,QAAL,CAAcL,IAAd,CAAmB,IAAnB,CAAhB;AAED;;AAKDM,EAAAA,eAAe,GAAG;AAChB;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;AAEDa,EAAAA,cAAc,GAAI;AAChBd,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6B,KAAKH,KAAL,CAAWwB,IAAxC,GAA+C,KAAKhB,KAAL,CAAWM,IAAtE;AACA,QAAIW,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1B,KAAL,CAAWwB,IAA/B,EAAqCE,CAAC,EAAtC,EAA0C;AAC1C;AACE,UAAIC,SAAS,GAAG,eAAeD,CAA/B;AACAD,MAAAA,OAAO,CAACG,IAAR,eAAa;AAAI,QAAA,EAAE,EAAED,SAAR;AAAA,kBAA+C,KAAKR,OAAL,CAAaO,CAAb;AAA/C,SAAwBC,SAAS,CAACE,QAAV,EAAxB;AAAA;AAAA;AAAA;AAAA,cAAb;AACD;;AACD3B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,KAAL,CAAWC,MAAvB;AACA,WAAOgB,OAAP;AACD;;AAEDN,EAAAA,OAAO,CAACd,EAAD,EAAK;AACV,QAAIyB,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1B,KAAL,CAAWwB,IAA/B,EAAqCE,CAAC,EAAtC,EAA0C;AAC1C,UAAIC,SAAS,GAAG,UAAUtB,EAAV,GAAe,GAAf,GAAqBqB,CAArC;AACA,UAAIK,OAAO,GAAG1B,EAAE,GAAG,GAAL,GAAWqB,CAAzB;AACA,UAAIM,KAAK,GAAG,KAAKV,QAAL,CAAcS,OAAd,CAAZ;AACAD,MAAAA,KAAK,CAACF,IAAN,eACE,QAAC,UAAD;AAEA,QAAA,EAAE,EAAEvB,EAAE,GAAG,GAAL,GAAWqB,CAFf;AAGA,QAAA,SAAS,EAAE,KAAKL,SAHhB;AAIA,QAAA,KAAK,EAAEW,KAJP;AAKA,QAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWM;AALjB,SACKa,SAAS,CAACE,QAAV,EADL;AAAA;AAAA;AAAA;AAAA,cADF;AAOC;;AACD,WAAOC,KAAP;AACD;;AAEDZ,EAAAA,UAAU,GAAG;AACX,SAAKe,QAAL,CAAc;AACZnB,MAAAA,IAAI,EAAE,eADM;AAEZC,MAAAA,QAAQ,EAAE;AAFE,KAAd;AAIAb,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB,KAAKK,KAAL,CAAWM,IAA1C;AACF;;AAEAM,EAAAA,SAAS,GAAG;AACR,SAAKa,QAAL,CAAc;AACZnB,MAAAA,IAAI,EAAE,EADM;AAEZC,MAAAA,QAAQ,EAAE;AAFE,KAAd;AAIAb,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB,KAAKK,KAAL,CAAWM,IAA1C;AACF;;AAEDO,EAAAA,SAAS,CAAChB,EAAD,EAAK;AACZH,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBE,EAA9B;AACA,QAAI2B,KAAK,GAAG,KAAKxB,KAAL,CAAWC,MAAX,CAAkByB,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAAC9B,EAAF,KAASA,EAArC,CAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAc,GAAd,GAAoB6B,KAAK,CAAC3B,EAA1B,GAA+B,GAA/B,GAAqC2B,KAAK,CAACI,MAAvD;AACAJ,IAAAA,KAAK,CAACI,MAAN,IAAgB,CAAhB;AACAJ,IAAAA,KAAK,CAACK,WAAN;AACAnC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAc,GAAd,GAAoB6B,KAAK,CAAC3B,EAA1B,GAA+B,GAA/B,GAAqC2B,KAAK,CAACI,MAAvD;AACA,QAAIE,SAAS,GAAG,KAAK9B,KAAL,CAAWC,MAAX,CAAkB8B,MAAlB,CAAyB,UAASP,KAAT,EAAgB;AAAE,aAAOA,KAAK,CAAC3B,EAAN,IAAYA,EAAnB;AAAwB,KAAnE,CAAhB;AACAiC,IAAAA,SAAS,CAACV,IAAV,CAAeI,KAAf;AACA,SAAKC,QAAL,CAAc;AAAExB,MAAAA,MAAM,EAAE6B;AAAV,KAAd;AACApC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,SAAKiB,SAAL;AACD;;AAEDhB,EAAAA,YAAY,CAAC4B,KAAD,EAAQ;AAClB,QAAIM,SAAS,GAAG,KAAK9B,KAAL,CAAWC,MAA3B;AACA6B,IAAAA,SAAS,CAACV,IAAV,CAAeI,KAAf;AACA,SAAKC,QAAL,CAAc;AAAExB,MAAAA,MAAM,EAAE6B;AAAV,KAAd;AACApC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,KAAL,CAAWC,MAAvB;AACD;;AAEDa,EAAAA,QAAQ,CAACS,OAAD,EAAU;AACjB,QAAI,CAAC,KAAKvB,KAAL,CAAWC,MAAX,CAAkB+B,IAAlB,CAAuBR,KAAK,IAAIA,KAAK,CAAC3B,EAAN,KAAa0B,OAA7C,CAAL,EAA4D;AAC1D,UAAIU,QAAQ,GAAG,IAAIlD,KAAJ,CAAUwC,OAAV,CAAf;AACA,WAAK3B,YAAL,CAAkBqC,QAAlB;AACD;;AACD,WAAO,KAAKjC,KAAL,CAAWC,MAAX,CAAkByB,IAAlB,CAAuBF,KAAK,IAAIA,KAAK,CAAC3B,EAAN,KAAa0B,OAA7C,CAAP;AAEA;;AAEDW,EAAAA,kBAAkB,GAAG;AACnB,SAAKzC,UAAL;AACD;;AASF0C,EAAAA,MAAM,GAAG;AACP,wBACA,QAAC,OAAD;AAAA,8BACE;AAAA,kBAAI,KAAKnC,KAAL,CAAWO;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,SAAS,EAAC,QAAjB;AAA4C,QAAA,EAAE,EAAC,aAA/C;AAAA,+BACE;AAAA,oBACC,KAAKC,cAAL;AADD;AAAA;AAAA;AAAA;AAAA;AADF,SAA8B,aAA9B;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAQ,QAAA,EAAE,EAAC,SAAX;AAAqB,QAAA,OAAO,EAAE,KAAKE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAWF;;AA7HmC;;AAiIrC,eAAerB,MAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport seedBankSoil from './seedBankSoil.png';\nimport GardenPlot from './GardenPlot.js';\nimport Plant from './Plant.js'\nimport styled from 'styled-components';\nimport api from '../api';\n\n\nconst Wrapper = styled.table.attrs({\n})`\n    margin: 0 30px;\n`\n\n\nclass Garden extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      seed: \"\",\n      garden: this.props.garden,\n      infoPane: \"Choose seed\"\n    };\n    this.generateGarden = this.generateGarden.bind(this)\n    this.selectSeed = this.selectSeed.bind(this)\n    this.addPlot = this.addPlot.bind(this)\n    this.resetSeed = this.resetSeed.bind(this)\n    this.updateGarden = this.updateGarden.bind(this)\n    this.plantSeed = this.plantSeed.bind(this)\n    this.getPlant = this.getPlant.bind(this)\n\n  }\n\n\n\n\n  updatePlantInfo() {\n    //this.setState({ plantName: plant.name });\n    console.log(\"Button was Clicked\")\n  }\n\n  generateGarden () {\n    console.log(\"Generating Garden, size:\" + this.props.size + this.state.seed)\n    let newRows = []\n    for (var i = 0; i < this.props.size; i++) {\n    //  console.log(\"adding row\" + i)\n      let uniqueKey = \"gardenRow_\" + i\n      newRows.push(<tr id={uniqueKey} key={uniqueKey.toString()}>{this.addPlot(i)}</tr>);\n    }\n    console.log(this.state.garden)\n    return newRows\n  }\n\n  addPlot(id) {\n    var plots = []\n    for (var i = 0; i < this.props.size; i++) {\n    let uniqueKey = \"plot_\" + id + \"_\" + i\n    let plantID = id + \"_\" + i\n    let plant = this.getPlant(plantID)\n    plots.push(\n      <GardenPlot\n      key={uniqueKey.toString()}\n      id={id + \"_\" + i}\n      plantSeed={this.plantSeed}\n      plant={plant}\n      seed={this.state.seed} />)\n    }\n    return plots\n  }\n\n  selectSeed() {\n    this.setState({\n      seed: \"Generic Plant\",\n      infoPane: \"Choose a plot for Generic Plant\"\n    });\n    console.log(\"Seed selected?\" + this.state.seed)\n }\n\n  resetSeed() {\n      this.setState({\n        seed: \"\",\n        infoPane: \"Choose seed\"\n      });\n      console.log(\"Seed selected?\" + this.state.seed)\n   }\n\n   plantSeed(id) {\n     console.log(\"SEARCHING FOR\" + id)\n     let plant = this.state.garden.find(x => x.id === id);\n     console.log(\"Plant is \" + \" \" + plant.id + \" \" + plant.growth)\n     plant.growth += 1\n     plant.updateImage()\n     console.log(\"Plant is \" + \" \" + plant.id + \" \" + plant.growth)\n     let newGarden = this.state.garden.filter(function(plant) { return plant.id != id; });\n     newGarden.push(plant)\n     this.setState({ garden: newGarden })\n     console.log(\"PLANT UPDATED\")\n     this.resetSeed()\n   }\n\n   updateGarden(plant) {\n     var newGarden = this.state.garden\n     newGarden.push(plant)\n     this.setState({ garden: newGarden })\n     console.log(this.state.garden)\n   }\n\n   getPlant(plantID) {\n    if (!this.state.garden.some(plant => plant.id === plantID)) {\n      let newPlant = new Plant(plantID)\n      this.updateGarden(newPlant)\n    }\n    return this.state.garden.find(plant => plant.id === plantID);\n\n   }\n\n   componentDidUpdate() {\n     this.saveGarden()\n   }\n\n   saveGarden = async () => {\n     console.log(\"Attempting to save garden\")\n      await api.updateGarden(this.props.id, JSON.stringify(this.state.garden)).then(res => {\n            window.alert(`Garden updated successfully`)\n        })\n   }\n\n  render() {\n    return (\n    <Wrapper>\n      <p>{this.state.infoPane}</p>\n      <table className=\"garden\" key=\"gardenTable\" id=\"gardenTable\">\n        <tbody>\n        {this.generateGarden()}\n        </tbody>\n      </table>\n      <button id=\"sowSeed\" onClick={this.selectSeed}>Generic Plant</button>\n    </Wrapper>\n    )\n }\n\n}\n\nexport default Garden;\n"]},"metadata":{},"sourceType":"module"}