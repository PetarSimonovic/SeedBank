{"ast":null,"code":"import _slicedToArray from\"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useRef,useState,useMemo}from\"react\";import{useFrame,useThree}from\"@react-three/fiber\";import{createId}from'../functions';import{getSeed}from'../gameObjects';// Creates a Plant based on the props that it receives\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Plant(props){// Retrieve the x, y and z position of the plant\nvar x=props.x,y=props.y,z=props.z;var mesh=useRef();// Clicking on a plant should bring up its info\n// stopPropogation tells Three.js to only return info about the first mesh clicked\nvar handleClick=function handleClick(event){event.stopPropagation();console.log(\"This plant is:\");console.log(props);};return/*#__PURE__*/_jsx(\"group\",{children:/*#__PURE__*/_jsx(\"mesh\",_objectSpread(_objectSpread({},props),{},{ref:mesh,onClick:function onClick(event){return handleClick(event);},scale:0.2//  onPointerOver={(event) => setHover(true)}\n//  onPointerOut={(event) => setHover(false)}\n,children:buildPlant(props)}))});}// buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\nfunction buildPlant(props){console.log(\"Plant props\");var _props$position=_slicedToArray(props.position,3),x=_props$position[0],y=_props$position[1],z=_props$position[2];console.log(x);console.log(y);console.log(z);var _getSeed=getSeed(props.type),bloom=_getSeed.bloom,leafColour=_getSeed.leafColour,stemColour=_getSeed.stemColour,flowerColour=_getSeed.flowerColour;var growth=props.growth;// Stop plant from growing any further if it's in bloom\nif(growth>=bloom){growth=bloom;}// the length of the stem is based on the plant's growth\nvar stemLength=growth/12;// push the Base and Stem into the plant array\nvar plant=[/*#__PURE__*/_jsx(Base,{},createId()),/*#__PURE__*/_jsx(Stem,{stemColour:stemColour,stemLength:stemLength},createId())];// Add leaves relative to the plant's growth level\n// for (let leaves = 0; leaves <= growth; leaves++) {\n//   plant.push(\n//   <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n//   <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n// )\n// }\n// Add a flower to the array if it's in bloom\nif(growth>=bloom){plant.push(/*#__PURE__*/_jsx(Flower,{color:flowerColour,position:[0,0.1+growth/11,0]},createId()));}return plant;}function Base(props){var mesh=useRef();return/*#__PURE__*/_jsxs(\"mesh\",_objectSpread(_objectSpread({},props),{},{ref:mesh,children:[/*#__PURE__*/_jsx(\"dodecahedronGeometry\",{args:[0.035,2]}),/*#__PURE__*/_jsx(\"meshToonMaterial\",{color:'#947352'})]}));}function Stem(props){var mesh=useRef();return/*#__PURE__*/_jsxs(\"mesh\",_objectSpread(_objectSpread({},props),{},{ref:mesh,children:[/*#__PURE__*/_jsx(\"cylinderGeometry\",{args:[0.01,0.03,0.3+props.stemLength,12]}),/*#__PURE__*/_jsx(\"meshToonMaterial\",{color:props.stemColour})]}));}function Leaf(props){var mesh=useRef();return/*#__PURE__*/_jsxs(\"mesh\",_objectSpread(_objectSpread({},props),{},{ref:mesh,children:[/*#__PURE__*/_jsx(\"cylinderGeometry\",{args:[0.02,0.05,0.02,6]}),/*#__PURE__*/_jsx(\"meshToonMaterial\",{color:props.color})]}));}function Flower(props){var mesh=useRef();return/*#__PURE__*/_jsxs(\"mesh\",_objectSpread(_objectSpread({},props),{},{ref:mesh,children:[/*#__PURE__*/_jsx(\"dodecahedronGeometry\",{args:[0.06]}),/*#__PURE__*/_jsx(\"meshToonMaterial\",{color:props.color})]}));}export default Plant;","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/components/Plant.jsx"],"names":["React","useRef","useState","useMemo","useFrame","useThree","createId","getSeed","Plant","props","x","y","z","mesh","handleClick","event","stopPropagation","console","log","buildPlant","position","type","bloom","leafColour","stemColour","flowerColour","growth","stemLength","plant","push","Base","Stem","Leaf","color","Flower"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { createId } from '../functions'\nimport { getSeed } from '../gameObjects'\n\n\n// Creates a Plant based on the props that it receives\n\nfunction Plant(props) {\n  // Retrieve the x, y and z position of the plant\n\n  const {x, y, z} = props\n\n  const mesh = useRef()\n\n  // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"This plant is:\")\n    console.log(props)\n  }\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      onClick={(event) => handleClick(event)}\n      scale={0.2}\n    //  onPointerOver={(event) => setHover(true)}\n    //  onPointerOut={(event) => setHover(false)}\n    >\n      {buildPlant(props)}\n    </mesh>\n    </group>\n\n  )\n}\n\n// buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\nfunction buildPlant(props) {\n\n  console.log(\"Plant props\")\n  const [x, y, z] = props.position\n  console.log(x)\n  console.log(y)\n  console.log(z)\n  const {bloom, leafColour, stemColour, flowerColour} = getSeed(props.type)\n  let growth = props.growth\n\n  // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom\n  }\n\n  // the length of the stem is based on the plant's growth\n\n  const stemLength = growth/12\n\n  // push the Base and Stem into the plant array\n\n  let plant = [\n    <Base key={createId()} />,\n    <Stem key={createId()} stemColour={stemColour} stemLength={stemLength}/>,\n  ]\n\n  // Add leaves relative to the plant's growth level\n\n  // for (let leaves = 0; leaves <= growth; leaves++) {\n  //   plant.push(\n  //   <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n  //   <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n  // )\n  // }\n\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n  plant.push(\n    <Flower key={createId()} color={flowerColour} position={[0, 0.1 + (growth/11), 0]} />\n  )\n}\n\n  return plant\n\n}\n\nfunction Base(props) {\n\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n     >\n    <dodecahedronGeometry args={[0.035, 2]} />\n    <meshToonMaterial color={'#947352'} />\n  </mesh>\n)\n\n\n}\n\nfunction Stem(props) {\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n    >\n    <cylinderGeometry args={[0.01, 0.03, 0.3 + props.stemLength, 12]} />\n    <meshToonMaterial color={props.stemColour} />\n    </mesh>\n  )\n}\n\n\nfunction Leaf(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <cylinderGeometry args={[0.02, 0.05, 0.02, 6]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\nfunction Flower(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <dodecahedronGeometry args={[0.06]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\n\n\nexport default Plant\n"]},"metadata":{},"sourceType":"module"}