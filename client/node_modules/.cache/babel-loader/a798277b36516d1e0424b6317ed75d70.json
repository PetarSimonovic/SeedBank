{"ast":null,"code":"var _jsxFileName = \"/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx\",\n    _s = $RefreshSig$();\n\nimport '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { addSeeds, loadSeeds, updateSeed, calculateAchievement, saveGarden, sendBalloon, createPlant, loadBalloons, makeFriendRequest, makeFriends, sample } from '../functions';\nimport { Balloon } from '../gameObjects';\nimport { Canvas } from \"@react-three/fiber\";\nimport { Plants, Garden, Camera, Sun, World, Firmament, Friends, Cloud, Balloons, SeedBox, IntroBalloons } from '../components'; // Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SeedBank(props) {\n  _s();\n\n  const [plants, setPlants] = useState([]); //  an array of plant components\n\n  const [seeds, setSeeds] = useState([]); //  an array of the player's available seeds\n\n  const [chosenSeed, setChosenseed] = useState(\"\"); // contains the type of seed if chosen, or null if no seed is currently selected\n\n  const [seedIndex, setSeedindex] = useState(null); //  the index within seeds of the chosenSeed\n\n  const [balloons, setBalloons] = useState([]); // This loads the seeds from the DB - it does it only once\n\n  useEffect(() => {\n    loadSeeds(props.id).then(data => setSeeds(data));\n  }, []); // useEffect Hooks run after all the other code, and are then called in order\n  // This useEffect runs when seeds change\n\n  useEffect(() => {\n    console.log(\"USE EFFECT SEEDS!\");\n    console.log(\"UPDATED SEEDS ARE:\");\n    console.log(seeds);\n  }, [seeds]); // This useEffect runs when plant is changed\n\n  useEffect(() => {\n    console.log(\"USE EFFECT PLANTS!\");\n    console.log(\"NOW CHECKING ACHIEVEMENTS\");\n    console.log(plants.length);\n    saveGarden(props.id, plants, props.world, props.worldChosen);\n    plants.length % 5 === 0 && plants.length !== 0 ? console.log(true) : console.log(false);\n  }, [plants]);\n\n  const sowPlant = event => {\n    if (chosenSeed) {\n      console.log(\"SOW PLANT\");\n      const newPlant = createPlant(props.id, event, chosenSeed);\n      setPlants(prev => {\n        return [newPlant, ...prev];\n      });\n      removeSeed();\n    }\n  };\n\n  const removeSeed = () => {\n    console.log(\"REMOVE SEED\");\n    setChosenseed(\"\");\n    updateSeeds(-1, chosenSeed);\n    console.log(\"Seed removed\");\n    console.log(seeds);\n  };\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index];\n\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed);\n      setSeedindex(index);\n    }\n  };\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"UPDATE SEEDS...\");\n    const index = seeds.findIndex(seed => seed.type === type);\n\n    if (index === -1) {\n      console.log(\"NEW SEED in UPDATE SEEDS\");\n      console.log(\"adding newSeed \" + type);\n      setSeeds(prev => {\n        return [...prev, {\n          type: type,\n          quantity: increment\n        }];\n      });\n      addSeeds(props.id, type, increment);\n    } else {\n      console.log(\"INCREMENT SEEDS\");\n      let amendedSeed = seeds[index];\n      console.log(amendedSeed);\n      amendedSeed.quantity += increment;\n      setSeeds(prev => {\n        return [...prev.filter(seed => seed.type !== type), amendedSeed];\n      });\n      updateSeed(props.id, amendedSeed);\n    }\n\n    setSeedindex(null);\n  };\n\n  const checkAchievements = () => {\n    console.log(\"CHECK ACHIEVEMENTS\");\n    const newSeed = calculateAchievement(seeds, props.id, plants.length);\n    updateSeeds(0, newSeed.type);\n  };\n\n  const sendFriendRequest = sentence => {\n    makeFriendRequest(props.id, props.userName, sentence, props.world);\n  };\n\n  const acceptFriend = friendName => {\n    makeFriends(props.id, props.userName, friendName, props.world);\n  };\n\n  const sendPlant = (friendName, friendId) => {\n    if (chosenSeed) {\n      const message = `${props.userName} sent you ${'\\n'} a ${chosenSeed} seed!`;\n      sendBalloon(friendId, chosenSeed, 1, message, props.userName);\n      console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`);\n      removeSeed();\n    } else {\n      console.log(\"No seed selected\");\n    }\n  };\n\n  const buyBalloon = colour => {\n    const seed = sample(seeds);\n    const message = `Bought: ${seed.type} x 3!`;\n    sendBalloon(props.id, seed.type, 3, message, \"SeedBank\", colour);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"canvas\",\n      camera: {\n        position: [0, 2, 3.5]\n      },\n      children: [/*#__PURE__*/_jsxDEV(Camera, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: console.log(\"loading\"),\n        children: [/*#__PURE__*/_jsxDEV(Garden, {\n          friend: false,\n          sowPlant: sowPlant,\n          position: [0, 0, 0],\n          world: props.world,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Plants, {\n          plants: plants\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Sun, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Firmament, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Friends, {\n          sendPlant: sendPlant,\n          userId: props.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this), props.worldChosen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Balloons, {\n          updateSeeds: updateSeeds,\n          acceptFriend: acceptFriend,\n          userId: props.id,\n          today: props.today,\n          lastLogin: props.lastLogin,\n          seeds: seeds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Cloud, {\n          seeds: seeds,\n          chosenSeed: chosenSeed,\n          buyBalloon: buyBalloon,\n          position: [0, -0.8, 1],\n          sendFriendRequest: sendFriendRequest,\n          selectSeed: selectSeed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(IntroBalloons, {\n        saveWorld: props.saveWorld,\n        newWorld: props.newWorld\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SeedBank, \"meaBc9q5y77M8zkx6oDqDFo/S8k=\");\n\n_c = SeedBank;\nexport default SeedBank;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedBank\");","map":{"version":3,"sources":["/Users/petarsimonovic/Library/Mobile Documents/com~apple~CloudDocs/Pete/Coding/Projects/SeedBankServer/seedbank/client/src/pages/SeedBank.jsx"],"names":["React","useState","useEffect","Suspense","addSeeds","loadSeeds","updateSeed","calculateAchievement","saveGarden","sendBalloon","createPlant","loadBalloons","makeFriendRequest","makeFriends","sample","Balloon","Canvas","Plants","Garden","Camera","Sun","World","Firmament","Friends","Cloud","Balloons","SeedBox","IntroBalloons","SeedBank","props","plants","setPlants","seeds","setSeeds","chosenSeed","setChosenseed","seedIndex","setSeedindex","balloons","setBalloons","id","then","data","console","log","length","world","worldChosen","sowPlant","event","newPlant","prev","removeSeed","updateSeeds","selectSeed","selectedSeed","index","seed","quantity","increment","type","findIndex","amendedSeed","filter","checkAchievements","newSeed","sendFriendRequest","sentence","userName","acceptFriend","friendName","sendPlant","friendId","message","buyBalloon","colour","position","today","lastLogin","saveWorld","newWorld"],"mappings":"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","sourcesContent":["import '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { addSeeds, loadSeeds, updateSeed, calculateAchievement, saveGarden, sendBalloon, createPlant, loadBalloons, makeFriendRequest, makeFriends, sample } from '../functions'\nimport { Balloon } from '../gameObjects'\nimport { Canvas } from \"@react-three/fiber\";\nimport { Plants, Garden, Camera, Sun, World, Firmament, Friends, Cloud, Balloons, SeedBox, IntroBalloons } from '../components';\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n  const [plants, setPlants] = useState([]) //  an array of plant components\n  const [seeds, setSeeds] = useState([]) //  an array of the player's available seeds\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState([])\n\n  // This loads the seeds from the DB - it does it only once\n  useEffect(() => {\n    loadSeeds(props.id).then(data => setSeeds(data))\n  }, [])\n\n\n  // useEffect Hooks run after all the other code, and are then called in order\n  // This useEffect runs when seeds change\n  useEffect(() => {\n    console.log(\"USE EFFECT SEEDS!\")\n    console.log(\"UPDATED SEEDS ARE:\")\n    console.log(seeds)\n  }, [seeds])\n\n  // This useEffect runs when plant is changed\n\n  useEffect(() => {\n    console.log(\"USE EFFECT PLANTS!\")\n    console.log(\"NOW CHECKING ACHIEVEMENTS\")\n    console.log(plants.length)\n    saveGarden(props.id, plants, props.world, props.worldChosen)\n    plants.length % 5 === 0 && plants.length !== 0 ? console.log(true) : console.log(false)\n  }, [plants])\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      console.log(\"SOW PLANT\")\n      const newPlant = createPlant(props.id, event, chosenSeed)\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      removeSeed()\n    }\n  }\n\n  const removeSeed = () => {\n    console.log(\"REMOVE SEED\")\n    setChosenseed(\"\")\n    updateSeeds(-1, chosenSeed)\n    console.log(\"Seed removed\")\n    console.log(seeds)\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed)\n      setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"UPDATE SEEDS...\")\n    const index = seeds.findIndex(seed => seed.type === type)\n    if (index === -1) {\n      console.log(\"NEW SEED in UPDATE SEEDS\")\n      console.log(\"adding newSeed \" + type)\n      setSeeds( (prev) => {\n        return [...prev, {type: type, quantity: increment}]\n      })\n      addSeeds(props.id, type, increment)\n    } else {\n      console.log(\"INCREMENT SEEDS\")\n      let amendedSeed = seeds[index]\n      console.log(amendedSeed)\n      amendedSeed.quantity += increment\n      setSeeds( (prev) => {\n        return [...prev.filter(seed => seed.type !== type), amendedSeed]\n      })\n      updateSeed(props.id, amendedSeed)\n    }\n    setSeedindex(null)\n  }\n\n\n\n  const checkAchievements = () => {\n    console.log(\"CHECK ACHIEVEMENTS\")\n    const newSeed = calculateAchievement(seeds, props.id, plants.length)\n    updateSeeds(0, newSeed.type)\n    }\n\n  const sendFriendRequest = (sentence) => {\n    makeFriendRequest(props.id, props.userName, sentence, props.world)\n  }\n\n  const acceptFriend = (friendName) => {\n    makeFriends(props.id, props.userName, friendName, props.world)\n  }\n\n  const sendPlant = (friendName, friendId) =>{\n    if (chosenSeed) {\n      const message = `${props.userName} sent you ${'\\n'} a ${chosenSeed} seed!`\n      sendBalloon(friendId, chosenSeed, 1, message, props.userName)\n      console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`)\n      removeSeed()\n    } else {\n      console.log(\"No seed selected\")\n    }\n\n  }\n\n  const buyBalloon = (colour) => {\n    const seed = sample(seeds)\n    const message = `Bought: ${seed.type} x 3!`\n    sendBalloon(props.id, seed.type, 3, message, \"SeedBank\", colour)\n  }\n\n\n\n  return (\n  <div className=\"App\">\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n      <Garden\n      friend={false}\n      sowPlant={sowPlant}\n      position={[0, 0, 0]}\n      world={props.world}\n      seeds={seeds}\n       />\n      <Plants plants={plants} />\n      <Sun />\n      <Firmament />\n      <Friends sendPlant={sendPlant} userId={props.id}/>\n     </Suspense>\n     {props.worldChosen ?\n       <>\n       <Balloons\n        updateSeeds={updateSeeds}\n        acceptFriend={acceptFriend}\n        userId={props.id}\n        today={props.today}\n        lastLogin={props.lastLogin}\n        seeds={seeds} />\n       <Cloud\n        seeds={seeds}\n        chosenSeed={chosenSeed}\n        buyBalloon={buyBalloon}\n        position={[0, -0.8, 1]}\n        sendFriendRequest={sendFriendRequest}\n        selectSeed={selectSeed} />\n        </> :\n        < IntroBalloons\n          saveWorld={props.saveWorld}\n          newWorld={props.newWorld}\n        /> }\n    </Canvas>\n  </div>\n  );\n}\n\nexport default SeedBank;\n"]},"metadata":{},"sourceType":"module"}