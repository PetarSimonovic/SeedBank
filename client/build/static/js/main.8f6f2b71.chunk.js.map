{"version":3,"sources":["functions/CalculateAchievement.js","functions/CalculateDays.js","functions/CreateId.js","components/Balloons.jsx","components/Balloon.jsx","components/Cloud.jsx","components/Camera.jsx","components/Firmament.jsx","components/Grass.jsx","components/Garden.jsx","components/IntroBalloons.jsx","images/seedbankProto.png","components/Logo.jsx","components/Links.jsx","components/NavBar.jsx","components/Plant.jsx","gameObjects/GetSeed.js","components/SeedCloud.jsx","components/Seeds.jsx","components/Sun.jsx","functions/LoadGarden.js","functions/Sample.js","api/index.js","functions/SaveGarden.js","functions/SetDate.js","functions/Randomiser.js","gameObjects/Balloon.js","gameObjects/WorldData.js","pages/SignUp.jsx","gameObjects/newSeeds.js","pages/LogIn.jsx","pages/SeedBank.jsx","gameObjects/getBalloons.js","functions/CreatePlant.js","app/index.js","index.js"],"names":["calculateAchievement","seeds","array","duplicate","newSeed","length","seedBank","checkDuplicate","Math","floor","random","unlock","updatedSeeds","index","seed","type","console","log","quantity","push","updateSeeds","calculateDays","start","end","date1","Date","diffInTime","getTime","round","createId","uuidv4","createBalloons","props","balloonCollection","balloons","removeBalloon","balloon","claimed","position","handleClick","seedChoice","colour","Balloons","mesh","useRef","ref","scale","BalloonBody","args","color","BalloonString","BalloonCone","BalloonCrate","Balloon","ballonTextColour","useFrame","state","delta","current","rotation","y","onClick","Billboard","follow","lockX","lockY","lockZ","Text","fontSize","outlineWidth","outlineColor","message","displayOption","option","date","setDate","day","month","year","Cloud","useState","setOption","noticeTextColour","prev","selectSeed","toggleSeeds","chosenSeed","extend","OrbitControls","Camera","useThree","camera","domElement","gl","controls","update","autoRotate","autoRotateSpeed","enabled","Firmament","Sky","turbidity","distance","sunPosition","inclination","elevation","exposure","mieDirectionalG","mieCoefficient","rayleigh","azimuth","Grass","event","sowPlant","createStalactites","world","createdStalactites","stalactites","stalactite","Stalactite","geometry","top","depth","sections","stopPropagation","Garden","IntroBalloons","newWorld","saveWorld","Wrapper","styled","a","attrs","className","Logo","href","src","logo","height","alt","Component","Links","Fragment","to","this","user","Nav","nav","NavBar","setUser","buildPlant","bloom","leafColour","stemColour","flowerColour","getSeed","growth","stemLength","plant","Base","Stem","leaves","Leaf","Flower","Plant","seedTextColours","outline","selectedSeedTextColours","seedSelectors","fontX","colours","SeedText","NoSeedText","SeedCloud","button","div","Sun","sunRef","intensity","loadGarden","garden","parsedGarden","today","stamp","parsedPlant","calculateGrowth","key","plantDate","sample","api","axios","create","baseURL","apis","addUser","payload","post","getUser","name","get","updateGarden","id","put","saveGarden","plants","chosen","savedSeeds","savedGarden","extractPlants","JSON","stringify","worldChosen","lastLogin","then","res","extractedPlants","savedPlant","getDate","getMonth","getFullYear","randomiser","range","max","min","z","generatePosition","WorldData","generateStalactites","offset","generateStalactite","stalactiteGeometry","stalactitePosition","stalactiteMin","stalactiteY","stalactiteXZ","Title","h1","Label","label","InputText","input","Button","CancelButton","SignUp","handleChangeInputName","target","value","setState","handleChangeInputEmail","email","handleChangeInputPassword","password","handleAddUser","window","alert","data","onChange","LogIn","handleGetUser","_id","parse","SeedBank","setPlants","setChosenseed","setSeeds","seedIndex","setSeedindex","login","getBalloons","setBalloons","seedList","setSeedlist","increment","useEffect","fivePlants","achievementCount","newSeeds","checkAchievements","fallback","newPlant","point","x","createPlant","removedBalloon","filter","selectedSeed","prevState","App","userName","chosenWorld","bind","connecToServer","fetch","style","width","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f6f2b71.chunk.js","sourcesContent":["\nexport default function calculateAchievement(seeds) {\n  let duplicate = true\n  let unlock = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    return seeds\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n}\n  return updateSeeds(seeds, newSeed, unlock)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed, unlock) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      console.log(newSeed)\n      seed.quantity += newSeed.quantity\n      console.log(seed)\n    }\n    updatedSeeds.push(seed)\n  }\n  if (unlock) { updatedSeeds.push(newSeed) }\n  return updatedSeeds\n}\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n","\n// calculates the difference in days between two dates using ISO strings for start and end\n\nexport default function calculateDays(start, end) {\n    const date1 = new Date(start);\n    const date2 = new Date(end);\n\n    // One day in milliseconds\n    const oneDay = 1000 * 60 * 60 * 24;\n\n    // Calculating the time difference between two dates\n    const diffInTime = date2.getTime() - date1.getTime();\n    //console.log(\"Time diff\")\n    //console.log(diffInTime)\n\n    // Calculating the no. of days between two dates\n    const diffInDays = Math.round(diffInTime / oneDay);\n\n    return diffInDays;\n}\n","\n// generates a unique ID number \n\n\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport default function createId() {\n  return uuidv4()\n}\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions'\nimport { Balloon } from './'\n\n\n\nfunction Balloons(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return (\n    <>\n    <mesh\n      {...props }\n      ref={mesh}\n      scale={1}\n      >\n      {createBalloons(props)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createBalloons(props) {\n  const balloonCollection = []\n  const {balloons, removeBalloon, updateSeeds, seeds} = props\n\n  for (let index = 0; index < balloons.length; index++) {\n  const balloon = balloons[index]\n\n  const handleClick = (props) => {\n    if (!balloon.claimed) {\n    const seedChoice = Math.floor(Math.random() * seeds.length)\n    updateSeeds(3, seedChoice)\n    removeBalloon(index)\n  }\n  }\n\n  balloonCollection.push(\n    <Balloon\n    key={createId()}\n    claimed={balloon.claimed}\n    seeds={seeds}\n    position={balloon.position}\n    index={index}\n    handleClick={handleClick}\n    colour={balloon.colour} />\n  )\n  }\n  return balloonCollection\n}\n\n\nexport default Balloons\n","import React, { useRef } from \"react\";\nimport { Text, Billboard } from '@react-three/drei'\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions'\n\n\n\nfunction Balloon(props) {\n\n  const mesh = useRef()\n  const ballonTextColour = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  }\n\n\n  useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={0.8}\n      onClick={props.handleClick}\n      >\n      <BalloonBody colour={props.colour} />\n      <BalloonCone colour = {props.colour} position={[0, -0.18, 0]}/>\n      <BalloonString position={[0, -0.15, 0]}/>\n      <BalloonCrate position={[0, -0.48, 0]}/>\n      <Billboard\n      follow={true}\n      lockX={false}\n      lockY={false}\n      lockZ={false} >\n      <Text position={[0, -0.7, 0]} fontSize={0.09} outlineWidth={0.04} outlineColor={ballonTextColour.outline} color={ballonTextColour.message} claimed={true} > {props.message} </Text>\n      </Billboard>\n    </mesh>\n      </group>\n\n  )\n }\n\n\n function BalloonBody(props) {\n\n   const mesh = useRef()\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={1}\n       >\n   <dodecahedronGeometry args={[0.153, 8]} />\n   <meshToonMaterial color={props.colour} />\n   </mesh>\n )\n }\n\n function BalloonString(props) {\n   const mesh = useRef()\n   // Set up state for the hovered and active state\n\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={1}\n       >\n       <cylinderGeometry args={[0.005, 0.005, 0.5, 3]} />\n       <meshToonMaterial color={'#16161D'} />\n     </mesh>\n   )\n  }\n\n  function BalloonCone(props) {\n    const mesh = useRef()\n    // Set up state for the hovered and active state\n\n\n    return (\n      <mesh\n        {...props}\n        ref={mesh}\n        scale={1}\n        >\n        <cylinderGeometry args={[0.15, -0.01, 0.3, 16]} />\n        <meshToonMaterial color={props.colour} />\n      </mesh>\n    )\n   }\n\n   function BalloonCrate(props) {\n     const mesh = useRef()\n     // Set up state for the hovered and active state\n\n\n     return (\n       <mesh\n         {...props}\n         ref={mesh}\n         scale={1}\n         >\n         <boxGeometry args={[0.15, 0.15, 0.15]} />\n         <meshToonMaterial color={'#7f5539'} />\n       </mesh>\n     )\n    }\n\nexport default Balloon\n","import { Billboard, Text } from '@react-three/drei'\nimport { setDate } from '../functions'\nimport React, { Component, useState, useRef } from 'react';\nimport { SeedCloud } from './'\n\n\nconst position = [0.5, 1.7, 3]\nconst size = 0.5\n\nfunction Cloud(props) {\n  const mesh = useRef()\n  const [option, setOption] = useState(0)\n\n  const noticeTextColour = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  }\n\n  const handleClick = () => {\n    option >=1 ? setOption(0) : setOption(prev => prev + 1)\n    console.log(option)\n\n  }\n\nreturn (\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={1}\n    onClick={handleClick}\n    >\n  <Billboard\n    position={position}\n    follow={true}\n    lockX={false}\n    lockY={false}\n    lockZ={false} // Lock the rotation on the z axis (default=false)\n    >\n    <Text fontSize={size} outlineWidth={size} outlineColor={noticeTextColour.outline} color={noticeTextColour.message}>\n    {displayOption(option)}\n     </Text>\n    </Billboard>\n    {option === 1 ? <SeedCloud seeds={props.seeds} selectSeed={props.selectSeed} toggleSeeds={props.toggleSeeds} chosenSeed={props.chosenSeed} /> : ''}\n\n    </mesh>\n)\n}\n\nfunction displayOption(option) {\n\n  switch(option) {\n    case 0:\n      const date = setDate()\n      return `${date.day} ${date.month} ${date.year}`\n    case 1:\n      return 'Choose Seed'\n    default:\n     return \"hello\"\n  }\n\n}\n\nexport default Cloud\n","import { extend, useThree, useFrame } from \"@react-three/fiber\";\nimport React, { useRef } from \"react\";\nimport { OrbitControls } from 'three-stdlib';\nextend({ OrbitControls });\n\n\nconst Camera = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls component.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return <orbitControls\n          ref={controls}\n          position={[0, -10, 0]}\n          args={[camera, domElement]}\n          autoRotate={true}\n          autoRotateSpeed={0.2}\n          enabled={true}\n          />;\n};\n\nexport default Camera\n","import { Sky } from '@react-three/drei'\n\nexport default function Firmament(props) {\n  return (\n    <Sky\n      turbidity={0.01}\n      distance={450000} // Camera distance (default=450000)\n      sunPosition={[0, 1, 0]} // Sun position normal (defaults to inclination and azimuth if not set)\n      inclination={0.47} // Sun elevation angle from 0 to 1 (default=0)\n      elevation={0.6}\n      exposure={0.3}\n      mieDirectionalG={0.04}\n      mieCoefficient={0.0045}\n      rayleigh={0.1}\n      azimuth={0.6} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n      {...props} // All three/examples/jsm/objects/Sky props are valid\n    />  )\n}\n","import React, { useRef } from \"react\";\n\n\n\n// The plane on which plants grow\n\nfunction Grass(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => props.sowPlant(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={'#a7c957'} />\n    </mesh>\n  )\n}\n\nexport default Grass\n","import React, { useRef } from \"react\";\nimport { createId } from '../functions'\nimport { Grass, SeedBox } from './'\n\n\n// The plane on which plants grow\n\nfunction Garden(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      {createStalactites(props)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createStalactites(props) {\n  const world = props.world\n  const createdStalactites = []\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index]\n    createdStalactites.push( <Stalactite key={createId()} sowPlant={props.sowPlant} args={stalactite.geometry} position={stalactite.position} colour={stalactite.colour} />)\n  }\n\n  return createdStalactites\n}\n\nfunction Stalactite(props) {\n  const mesh = useRef()\n  let [top, bottom, depth, sections] = props.args\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n  }\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={props.colour}  />\n      <Grass sowPlant={props.sowPlant} position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} />\n    </mesh>\n    </group>\n  )\n}\n\n\nexport default Garden\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions'\nimport { Balloon } from './'\n\n\nfunction IntroBalloons(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      <Balloon position={[-0.6, 2, 0]} handleClick={props.newWorld} colour=\"#ee6055\" message=\"New world\" />\n      <Balloon position={[0.6, 2, 0]} handleClick={props.saveWorld} colour=\"#ffd97d\" message=\"Save world\" />\n    </mesh>\n    </>\n  )\n}\n\nexport default IntroBalloons\n","export default __webpack_public_path__ + \"static/media/seedbankProto.6cdc7966.png\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport logo from '../images/seedbankProto.png';\n\nconst Wrapper = styled.a.attrs({\n    className: 'navbar-brand',\n})``\n\nclass Logo extends Component {\n    render() {\n        return (\n            <Wrapper href=\"https://example.com\">\n                <img src={logo} height=\"50\" alt=\"seedbank\" />\n            </Wrapper>\n        )\n    }\n}\n\nexport default Logo\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\nclass Links extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Link to=\"/\" className=\"navbar-brand\">\n                    SeedBank\n                </Link>\n                    <Link to=\"/\" className=\"navbar-brand\">\n                     { this.props.user }\n                    </Link>\n              </React.Fragment>\n        )\n    }\n}\n\nexport default Links\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport Logo from './Logo';\nimport Links from './Links';\n\n\nconst Nav = styled.nav.attrs({\n    className: 'navbar navbar-expand-lg navbar-dark bg-dark',\n})`\n    margin-bottom: 20 px;\n`\n\nclass NavBar extends Component {\n    render() {\n        return (\n                <Nav height=\"50%\">\n                    <Logo />\n                    <Links user={this.props.user} setUser={this.props.setUser} />\n                </Nav>\n        )\n    }\n}\n\nexport default NavBar\n","import React, { useRef } from \"react\";\nimport { createId } from '../functions'\nimport { getSeed } from '../gameObjects'\n\n\n// Creates a Plant based on the props that it receives\n\nfunction Plant(props) {\n\n  const mesh = useRef()\n\n  // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"This plant is:\")\n    console.log(props)\n  }\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      onClick={(event) => handleClick(event)}\n      scale={0.2}\n    //  onPointerOver={(event) => setHover(true)}\n    //  onPointerOut={(event) => setHover(false)}\n    >\n      {buildPlant(props)}\n    </mesh>\n    </group>\n\n  )\n}\n\n// buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\nfunction buildPlant(props) {\n\n  const [x, y, z] = props.position\n  const {bloom, leafColour, stemColour, flowerColour} = getSeed(props.type)\n  let growth = props.growth\n\n  // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom\n  }\n\n  // the length of the stem is based on the plant's growth\n\n  const stemLength = growth/24\n\n\n  // push the Base and Stem into the plant array\n\n  let plant = [\n    <Base key={createId()} />,\n    <Stem key={createId()} stemColour={stemColour} stemLength={stemLength} position={[0, 0.05, 0]}/>,\n  ]\n\n  // Add leaves relative to the plant's growth level\n\n  for (let leaves = 0; leaves <= growth; leaves++) {\n    plant.push(\n    <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n    <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n  )\n  }\n\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n  plant.push(\n    <Flower key={createId()} color={flowerColour} position={[0, 0.1 + (growth/11), 0]} />\n  )\n}\n\n  return plant\n\n}\n\nfunction Base(props) {\n\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n     >\n    <dodecahedronGeometry args={[0.035, 2]} />\n    <meshToonMaterial color={'#947352'} />\n  </mesh>\n)\n\n\n}\n\nfunction Stem(props) {\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={0.5}\n\n    >\n    <cylinderGeometry args={[0.01, 0.03, 0.3 + props.stemLength, 12]} />\n    <meshToonMaterial color={props.stemColour} />\n    </mesh>\n  )\n}\n\n\nfunction Leaf(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <cylinderGeometry args={[0.02, 0.05, 0.02, 6]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\nfunction Flower(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <dodecahedronGeometry args={[0.06]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\n\n\nexport default Plant\n","\n export default function getSeed(seed) {\n\n   switch(seed) {\n     case \"generic_plant\":\n        return {bloom: 1, leafColour: '#377F34', stemColour: '#499B4A', flowerColour: '#832134'}\n     case \"tulip\":\n        return {bloom: 2, leafColour: '#2D5A27', stemColour: '#567d46', flowerColour: '#ff878d'}\n     case \"sunflower\":\n        return {bloom: 4, leafColour: '#75ae92', stemColour: '#82ac80', flowerColour: '#f8ec89'}\n    case \"crocus\":\n      return {bloom: 1, leafColour: '#76c893', stemColour: '#52b69a', flowerColour: '#3a0ca3'}\n    case \"snowdrop\":\n      return {bloom: 1, leafColour: '#76c893', stemColour: '#52b69a', flowerColour: '#f8f9fa'}\n    case \"rose\":\n      return {bloom: 5, leafColour: '#499B4A', stemColour: '#75ae92', flowerColour: '#9e0059'}\n    case \"venusFlyTrap\":\n      return {bloom: 7, leafColour: '#ccd5ae', stemColour: '#ccd5ae', flowerColour: '#ccd5ae'}\n     default:\n      return\n   }\n\n}\n","import { RoundedBox, Text, Billboard } from '@react-three/drei'\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { createId } from '../functions'\n\n// Creates a button that 'clicks'\n\nconst seedTextColours = {type: \"#293241\", outline: \"#b1b5c8\"}\nconst selectedSeedTextColours = {type: \"#b1b5c8\", outline: \"#293241\"}\nconst fontSize = 0.1\nconst fontZ = 2\nconst fontY = 1.5\n\nfunction SeedCloud(props) {\n\n  console.log(\"Props in SeedBox\")\n  console.log(props)\n\n  const mesh = useRef()\n\n\n\n  return (\n  <>\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={1}\n    >\n   {seedSelectors(props)}\n  </mesh>\n  </>\n\n)\n}\n\nfunction seedSelectors(props) {\n  console.log(\"PROPS in SEEDSELECTORS\")\n  console.log(props)\n  let seedSelectors = []\n  let fontX = 0\n  for (let index = 0; index < props.seeds.length; index++) {\n    console.log(\"Generating seedselectors\")\n    console.log(\"INDEX \" + index)\n    let seed = props.seeds[index]\n    if (seed.quantity === 0) { continue }\n    fontX += 1\n    let colours = {}\n    seed.type === props.chosenSeed ? colours = selectedSeedTextColours : colours = seedTextColours\n    seedSelectors.push( <SeedText selectSeed={props.selectSeed} toggleSeeds={props.toggleSeeds} seed={seed} colours={colours} index={index} fontX={fontX} />)\n  }\n  if (seedSelectors.length === 0) {\n    seedSelectors.push( <NoSeedText colours={seedTextColours} index={1} />)\n  }\n  console.log(seedSelectors)\n  return seedSelectors\n}\n\n\nfunction SeedText(props) {\n  const seed = props.seed\n  const mesh = useRef()\n  const [selected, setSelected] = useState(false)\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(seed.type)\n    props.selectSeed(seed.type, props.index)\n    props.toggleSeeds()\n  }\n\n\n  return (\n      <mesh\n        {...props}\n        ref={mesh}\n        >\n        <Billboard\n        follow={true}\n        lockX={false}\n        lockY={false}\n        lockZ={false} >\n        < Text\n        fontSize={fontSize}\n        onClick={(event) => handleClick(event)}\n        position={[props.fontX, fontY, fontZ]}\n        outlineWidth={fontSize}\n        outlineColor={props.colours.outline}\n        color={props.colours.type}\n        rotation={[0, 0, 0]} >\n          seed: {seed.type} {'\\n'}\n          quantity: {seed.quantity}\n        </ Text>\n        </ Billboard>\n      </mesh>\n      )\n    }\n\nfunction NoSeedText(props) {\n      const mesh = useRef()\n\n      return (\n          <mesh\n            {...props}\n            ref={mesh}\n            >\n            <Billboard\n            follow={true}\n            lockX={false}\n            lockY={false}\n            lockZ={false} >\n            < Text\n            fontSize={0.25}\n            position={[1, 3, 1]}\n            outlineWidth={0.25}\n            outlineColor={props.colours.outline}\n            color={props.colours.type}\n            rotation={[0, 0, 0]} >\n              No seeds available\n            </ Text>\n            </Billboard>\n          </mesh>\n        )\n  }\n\n\nexport default SeedCloud\n","import styled from 'styled-components';\nimport React from 'react';\nimport { createId } from '../functions'\n\n// Generates a panel that contains buttons of available Seeds\n// PROTOTYPE ONLY: need to design an interface that coould contain an indefinite number of seeds or objects\n\nconst SeedButton = styled.button`\ncolor: palevioletred;\nfont-size: 1em;\nmargin: 1em;\npadding: 0.25em 1em;\nborder: 2px solid palevioletred;\nborder-radius: 3px;\n`;\n\nconst Panel = styled.div`\n  background-color: lightgrey;\n  `;\n\n\nfunction Seeds(props) {\n\n  return (\n    <Panel>\n     {props.chosenSeed} \n    </Panel>\n  )\n}\n\nfunction seedCollection(props) {\n\n  const {seeds, selectSeed} = props\n  let seedCollection = []\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    seedCollection.push(\n      <SeedButton key={createId()} onClick={(event) => selectSeed(seed.type, index)} selectSeedtype={seed.type} quantity={seed.quantity} >\n      {seed.type} {seed.quantity}\n      </SeedButton>\n    )\n  }\n\n    return seedCollection\n}\n\nexport default Seeds\n","import { useRef } from 'react';\n// directionaLight is Three.js's daylight equivalent\n// values are arbitraty for now\n\nfunction Sun(props) {\n  const mesh = useRef()\n  const sunRef = useRef()\n\n  return (\n  <group>\n    <mesh\n      ref={sunRef}\n      {...props}\n      >\n    <directionalLight position={[0, 0.5, 1]} intensity={0.7} />\n    </mesh>\n\n  </group>\n  )\n}\n\nexport default Sun\n","import { Plant } from '../components'\nimport { setDate, calculateDays } from '../functions'\n\n// Reads a saved Garden and creates an array of plants ready to render\n\nexport default function loadGarden(garden) {\n  let parsedGarden = []\n  const today = setDate(Date()).stamp\n  for (let plant = 0; plant < garden.length; plant ++ ) {\n    const parsedPlant = garden[plant]\n    const growth = calculateGrowth(parsedPlant.date, today)\n    parsedGarden.push(<Plant key={parsedPlant.key} growth={growth} date={parsedPlant.date} position={parsedPlant.position} type={parsedPlant.type}/>)\n  }\n  console.log(parsedGarden)\n  return parsedGarden\n}\n\nfunction calculateGrowth(plantDate, today) {\n  console.log(plantDate.stamp)\n  console.log(today)\n  const days = calculateDays(plantDate.stamp, today)\n  return days\n}\n\n\n\n\n//module.exports = parseGarden;\n","\n\nexport default function sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n\n}\n","import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: \"/api\",\n})\n\nexport const addUser = payload => api.post(`/user`, payload)\nexport const getUser = name => api.get(`/user/${name}`)\nexport const updateGarden = (id, payload) => api.put(`/user/${id}`, payload)\n\n\nconst apis = {\n    addUser,\n    getUser,\n    updateGarden\n}\n\nexport default apis\n","import api from '../api';\nimport { setDate } from './'\n\n// strips out react components from the state garden array and saves plant props as an object that's easy to parse\n// Needs error handling!\n\n\nexport default async function saveGarden(id, plants, newWorld, chosen, savedSeeds){\n  let savedGarden = extractPlants(plants)\n  const garden = {\"garden\" : savedGarden}\n  const world = {\"world\" : JSON.stringify(newWorld)}\n  const seeds = {\"seeds\": savedSeeds}\n  const worldChosen = {\"worldChosen\" : chosen}\n  const date = setDate()\n  const lastLogin  = { \"lastLogin\" : date.stamp }\n  const payload = {garden, world, worldChosen, seeds, lastLogin}\n  console.log(\"Attempting to save garden\")\n  await api.updateGarden(id, payload).then(res => {\n        console.log('Garden updated successfully')\n    })\n}\n\nfunction extractPlants(plants) {\n  let extractedPlants = []\n  for (let plant = 0; plant < plants.length; plant ++) {\n    const key = plants[plant].key\n    const parsedPlant = plants[plant].props\n    const savedPlant = {key: key, growth: parsedPlant.growth, date: parsedPlant.date, position: parsedPlant.position, type: parsedPlant.type}\n    extractedPlants.push(savedPlant)\n  }\n  return extractedPlants\n}\n","\n\n// creates a date object that contains day, month, year and stamp in ISO format\n\nexport default function setDate() {\n  const date = new Date()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n  const stamp = `${year}/${month}/${day}`\n  return {year: year, month: month, day: day, stamp: stamp }\n}\n","\n// accepts a range object and returns a random number\n// useed to generate terrain and balloons\n\nexport default function randomiser(range) {\n  return Math.random() * (range.max - range.min) + range.min\n}\n","import {sample, randomiser, createId, calculateDays} from '../functions'\n\n\nexport default class Balloon {\n  constructor(seeds) {\n    this.id = createId()\n    this.colour = generateColour()\n    this.position = generatePosition()\n    this.claimed = false\n  }\n}\n\n\nfunction generateColour() {\n  const colours = [\n    \"#db504a\",\n    \"#ff6f59\",\n    \"#ffe200\",\n    \"#9bf6ff\",\n    '#ffd6a5',\n    '#caffbf',\n    '#ffc6ff',\n    '#bdb2ff',\n    '#e9ff70',\n    '#ff70a6',\n    '#ff9770'\n  ]\n  return sample(colours)\n}\n\nfunction generatePosition() {\n  const x = {max: 2, min: -2}\n  const y = {max: 1.8, min: 1.5}\n  const z = {max: 1.8, min: -1.8}\n\n  return [randomiser(x), randomiser(y), randomiser(z)]\n}\n","\n// creates the data used to generate the Stalactite components\n\nimport {sample, randomiser} from '../functions'\n\n\nconst stalactiteCount = 10\n\nexport default class WorldData {\n\n  constructor(stalactites = generateStalactites())  {\n    this.stalactites = stalactites\n  }\n\n}\n\n\n\nfunction generateStalactites() {\n  let stalactites = []\n  let offset = 0\n  for (let stalactite = 0; stalactite < stalactiteCount; stalactite++) {\n    stalactites.push(generateStalactite(offset))\n    offset += 0.1\n  }\n  return stalactites\n}\n\nfunction earthColour() {\n  const colours = [\n    '#6C6460',\n    '#8a817c',\n    '#6c757d',\n  ]\n\n    return sample(colours)\n}\n\nfunction generateStalactite(offset) {\n  return { geometry: stalactiteGeometry(offset), position: stalactitePosition(offset), colour: earthColour() }\n}\n\nfunction stalactiteGeometry(offset) {\n\n  const stalactiteMax = {max: 1.3 - offset, min: 1 - offset}\n  const stalactiteMin = {max: 0.8 - offset, min: 0.01}\n  const stalactiteDepth = {max: 2.3, min: 1}\n  const stalactiteSegments = {max: 12, min: 6}\n\n  return [\n    randomiser(stalactiteMax),\n    randomiser(stalactiteMin),\n    randomiser(stalactiteDepth),\n    randomiser(stalactiteSegments)\n  ]\n\n}\n\nfunction stalactitePosition(offset) {\n\n  const stalactiteY = {max: 0 + offset, min: 1 + offset }\n  const stalactiteXZ = {max: 0.5, min: -0.5  }\n  return [\n    randomiser(stalactiteXZ),\n    -randomiser(stalactiteY),\n    randomiser(stalactiteXZ)\n  ]\n\n}\n\n\n\n\n\n\n\n/*\n\nOriginal stalactite settings:\n\nEarth disc:\n<cylinderGeometry args={[1.65, 1, 0.68, 9]}  />\n<meshToonMaterial color={'#8a817c'} />\n\nfunction createStalactites() {\n  return [\n    <Stalactite args={[1.6, 0.8, 1, 8]} position={[0.1, -0.28, 0, ]} colour={'#6c757d'}/>,\n    <Stalactite args={[1.3, 0.7, 1, 7]} position={[0.12, -0.5, 0.1]} colour={'#8a817c'} />,\n    <Stalactite args={[1.4, 0.55, 1.3, 4]} position={[-0, -0.7, 0.05]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.3, 2, 8]} position={[0, -0.9, -0.2]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.01, 2, 4]} position={[0, -1.9, -0.5]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.03, 2, 12]} position={[0, -0.9, 1.0]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.2, 1, 8]} position={[-0, -1.3, .40]} colour={'#8a817c'} />,\n    <Stalactite args={[0.7, 0.1, 1, 9]} position={[-0, -1.9, 0.30]} colour={'#6c757d'}/>,\n    <Stalactite args={[0.4, 0.01, 3, 8]} position={[0, -2.3, 0]} colour={'#8a817c'} />,\n\n\n\n  ]\n}\n*/\n","import React, { Component } from 'react';\nimport { WorldData, newSeeds } from '../gameObjects'\nimport { setDate } from '../functions'\n\n\nimport api from '../api';\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputEmail = async event => {\n        const email = event.target.value\n        this.setState({ email })\n    }\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    handleAddUser = async () => {\n        const { name, email, password } = this.state\n        const newWorld = new WorldData()\n        const world = JSON.stringify(newWorld)\n        const seeds = newSeeds()\n        const worldChosen = false\n        const date = setDate()\n        const lastLogin = date.stamp\n        const payload = { name, email, password, world, worldChosen, seeds, lastLogin }\n        console.log(payload)\n\n        await api.addUser(payload).then(res => {\n            window.alert(`User added`)\n            this.setState({\n                name: '',\n                email: '',\n                password: '',\n            })\n            console.log(\"SEEDS on SIGN UP\")\n            console.log(seeds)\n            this.props.setUser(name, res.data.id, [], newWorld, false, seeds, lastLogin)\n        })\n\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Sign Up</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Email: </Label>\n                <InputText\n                    type=\"text\"\n                    value={email}\n                    onChange={this.handleChangeInputEmail}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleAddUser}>Sign Up</Button>\n                <CancelButton href={'/movies/list'}>Cancel</CancelButton>\n            </Wrapper>\n        )\n    }\n}\n\nexport default SignUp\n","export default function newSeeds() {\n\n  return [\n    {type: \"generic_plant\", quantity: 3},\n    {type: \"tulip\", quantity: 3}\n  ]\n\n}\n","import React, { Component } from 'react';\nimport { loadGarden } from '../functions'\nimport api from '../api';\n\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\n\nclass LogIn extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    handleGetUser = async () => {\n\n        await api.getUser(this.state.name).then(res => {\n          console.log(res)\n            console.log(\"Name is \" + res.data.data.name)\n            if (this.state.password === res.data.data.password) {\n              const name = res.data.data.name\n              const id = res.data.data._id\n              const garden = loadGarden(res.data.data.garden)\n              const world = JSON.parse(res.data.data.world)\n              const seeds =  res.data.data.seeds\n              const worldChosen = res.data.data.worldChosen\n              const lastLogin = res.data.data.lastLogin\n\n              window.alert(`Welcome back ${name}`)\n              this.props.setUser(name, id, garden, world, worldChosen, seeds, lastLogin)\n            } else {\n              window.alert(`Incorrect password`)\n            }\n        })\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Log In</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleGetUser}>Log In</Button>\n            </Wrapper>\n        )\n    }\n}\n\nexport default LogIn\n","import '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { calculateAchievement, saveGarden, createPlant } from '../functions'\nimport { getBalloons, Balloon } from '../gameObjects'\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Cloud, Balloons, SeedBox, IntroBalloons } from '../components';\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState(getBalloons(plants, seeds, props.lastLogin, props.today))\n  const [seedList, setSeedlist] = useState(false)\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(\"\")\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      updateSeeds(-1)\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed)\n      setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    const updatedSeeds = [...seeds]\n    updatedSeeds[index].quantity += increment\n    setSeeds(updatedSeeds)\n    setSeedindex(null)\n  }\n\n  const removeBalloon = (index) => {\n    let removedBalloon = balloons[index]\n    console.log(\"REMOVED BALLOON\")\n    console.log(removedBalloon)\n    removedBalloon.claimed = true\n\n    // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n    setBalloons(\n      (prev) => {\n        return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon]\n      }\n    )\n  }\n\n  const checkAchievements = () => {\n    console.log(\"Checking achievements\")\n    console.log(plants.length)\n    const fivePlants = plants.length % 5\n    const achievementCount = plants.length / 5 // how many multuples of five?\n    const startingSeeds = 2 // offset for the starting seeds\n    if (fivePlants === 0 && plants.length > 0 && seeds.length < (achievementCount + startingSeeds)) {\n      console.log(\"Achievement!\")\n      const newSeeds = calculateAchievement(seeds)\n      console.log(\"New seeds is\")\n      console.log(newSeeds)\n      setSeeds(newSeeds)\n\n    }\n  }\n\n  const toggleSeeds = () => {\n    setSeedlist((prevState) => !prevState)\n    console.log(\"TOGGLE \" + seedList)\n  }\n\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n    setSeedlist(seedList)\n    checkAchievements()\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n      <Garden\n      sowPlant={sowPlant}\n      position={[0, 0, 0]}\n      world={props.world}\n      seeds={seeds}\n       />\n      {plants}\n      <Balloons\n      removeBalloon={removeBalloon}\n      updateSeeds={updateSeeds}\n      balloons={balloons}\n      seeds={seeds} />\n      <Sun />\n      <Firmament />\n     </Suspense>\n     {props.worldChosen ? <Cloud seeds={seeds} chosenSeed={chosenSeed} seedList={seedList} position={[-1, -1, 1.9]} selectSeed={selectSeed} toggleSeeds={toggleSeeds} /> : < IntroBalloons saveWorld={props.saveWorld} newWorld={props.newWorld} /> }\n    </Canvas>\n  </div>\n  );\n}\n\nexport default SeedBank;\n","import {sample, randomiser, createId, calculateDays} from '../functions'\nimport { Balloon } from './'\n\n\nexport default function getBalloons(garden, seeds, login, today) {\n  const dateDifference = calculateDays(login, today)\n  let balloons = []\n  // if (garden.length % 6 === 0) {\n  //   console.log(\"Balloon incoming!\")\n  // }\n  if (calculateDays(login, today) > 0 ) {\n    console.log(\"BALLOON COMING!\")\n    balloons.push(new Balloon())\n}\n\n  return balloons\n}\n","import { setDate, createId } from './'\nimport { Plant } from '../components'\n\n// Creates a new Plant, with a uniqueID, growth initialised at 0 and a new date\n\nexport default function createPlant(event, seed) {\n  console.log(\"In createPlant\")\n\n  const position = [event.point.x, event.point.y, event.point.z]\n  const key = createId()\n  const date = setDate()\n  const newPlant = <Plant key={key} growth={0} date={date} position={position} type={seed} />\n\n  return newPlant\n}\n","import React from 'react'\nimport { WorldData } from '../gameObjects'\nimport { saveGarden, setDate } from '../functions'\n\n\nimport './App.css';\n\n\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { NavBar } from '../components'\nimport { SignUp, LogIn, SeedBank } from '../pages'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {\n        userName: \"\",\n        id: 0,\n        garden: [],\n        world: {},\n        chosenWorld: false,\n        seeds: [],\n        lastLogin: \"\"\n      }\n      this.setUser = this.setUser.bind(this)\n      this.newWorld = this.newWorld.bind(this)\n      this.saveWorld = this.saveWorld.bind(this)\n      this.connecToServer = this.connecToServer.bind(this)\n    }\n\n    componentDidMount() {\n      this.connecToServer();\n      }\n\n    connecToServer() {\n       fetch('/');\n     }\n\n\n    setUser(userName, id, garden, world, worldChosen, seeds, lastLogin) {\n      this.setState({\n        userName: userName,\n        id: id,\n        garden: garden,\n        world: world,\n        worldChosen: worldChosen,\n        seeds: seeds,\n        lastLogin: lastLogin,\n        today: setDate().stamp\n      })\n        }\n\n    newWorld() {\n      const newWorld = new WorldData()\n      this.setState({\n        world: newWorld\n      })\n    }\n\n    saveWorld() {\n      this.setState({\n        worldChosen: true\n      })\n      saveGarden(this.state.id, [], this.state.world, true, this.state.seeds)\n    }\n\n\n\n    render() {\n    return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n        <Router>\n            <NavBar user={this.state.userName} setUser={this.setUser} />\n          </Router>\n          {this.state.userName ?  <SeedBank id={this.state.id} newWorld={this.newWorld} world={this.state.world} worldChosen={this.state.worldChosen} saveWorld={this.saveWorld} seeds={this.state.seeds} garden={this.state.garden} lastLogin={this.state.lastLogin} today={this.state.today} /> : <div><LogIn setUser={this.setUser} /> <SignUp setUser={this.setUser} /></div> }\n    </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}