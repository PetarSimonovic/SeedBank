{"version":3,"sources":["functions/CalculateAchievement.js","functions/CalculateDays.js","functions/CreateId.js","components/Balloons/Balloons.jsx","functions/LoadBalloons.js","components/Balloons/Balloon.jsx","components/Cloud/BalloonShop.jsx","functions/BalloonColours.js","components/Cloud/Cloud.jsx","components/Cloud/CloudKeyBoard.jsx","components/Camera.jsx","components/Garden/FakeGrass.jsx","components/Sky/Firmament.jsx","components/Friends.jsx","functions/LoadFriends.js","components/Garden/Grass.jsx","components/Garden/Garden.jsx","components/Balloons/IntroBalloons.jsx","images/seedbankProto.png","components/Logo.jsx","components/Links.jsx","components/NavBar.jsx","components/Garden/Plant.jsx","gameObjects/GetSeed.js","components/Cloud/SeedCloud.jsx","components/Garden/Seeds.jsx","components/Sky/Sun.jsx","api/index.js","functions/Friend.js","functions/LoadGarden.js","functions/MakeFriendRequest.js","functions/MakeFriends.js","functions/Sample.js","functions/SaveGarden.js","functions/SetDate.js","functions/SendBalloon.js","functions/Randomiser.js","functions/UpdateBalloons.js","gameObjects/Balloon.js","gameObjects/WorldData.js","pages/SignUp.jsx","pages/LogIn.jsx","pages/SeedBank.jsx","functions/CreatePlant.js","app/index.js","index.js"],"names":["checkDuplicate","newSeed","seeds","index","length","type","seedBank","quantity","calculateDays","start","end","date1","Date","diffInTime","getTime","Math","round","createId","uuidv4","createBalloons","props","balloons","balloonCollection","updateSeeds","removeBalloon","acceptFriend","balloon","push","balloonId","position","handleClick","sender","updateBalloons","colour","message","Balloons","mesh","useRef","useState","setBalloons","useEffect","loadBalloons","lastLogin","userId","today","then","data","ref","scale","BalloonText","ballonTextColour","Text","fontSize","outlineWidth","outlineColor","color","displayMessage","BalloonBody","useFrame","state","delta","current","rotation","y","args","BalloonString","BalloonCone","BalloonCrate","Balloon","claimed","setClaimed","setDisplaymessage","onClick","prev","Billboard","follow","lockX","lockY","lockZ","balloonsForSale","console","log","colours","x","cos","PI","sin","BalloonForSale","buyBalloon","textColour","outline","setScale","event","stopPropagation","setTimeout","BalloonShop","displayText","option","setDate","displayFunctionality","selectSeed","toggleSeeds","chosenSeed","handleSubmit","sendFriendRequest","Cloud","setOption","noticeTextColour","alphabet","split","cloudKeyboardColours","cloudFunctionButtonColours","createCloudKeyboard","buildSentence","deleteCharacter","sentence","submit","userName","cloudKeyboard","fontX","fontY","column","char","character","CloudKey","FunctionKey","CloudText","CloudKeyBoard","sentenceArray","setSentencearray","setSentence","submitted","setSubmitted","join","previousLength","filter","extend","OrbitControls","Camera","useThree","camera","domElement","gl","controls","update","autoRotate","autoRotateSpeed","enabled","FakeGrass","Firmament","Sky","turbidity","distance","sunPosition","inclination","elevation","exposure","mieDirectionalG","mieCoefficient","rayleigh","azimuth","createFriends","friends","sendPlant","friendCollection","friend","name","friendId","world","Friends","setFriends","loadFriends","Grass","sowPlant","createStalactites","createdStalactites","stalactites","stalactite","Stalactite","geometry","top","depth","sections","GardenText","gardenTextColor","Garden","setName","IntroBalloons","newWorld","saveWorld","Wrapper","styled","a","attrs","className","Logo","href","src","logo","height","alt","Component","Links","Fragment","to","this","user","Nav","nav","NavBar","setUser","buildPlant","seed","bloom","leafColour","stemColour","flowerColour","getSeed","growth","stemLength","plant","Base","Stem","leaves","Leaf","Flower","Plant","seedTextColours","selectedSeedTextColours","seedSelectors","SeedText","NoSeedText","SeedCloud","button","div","Sun","sunRef","intensity","api","axios","create","baseURL","apis","addUser","payload","post","getUser","get","updateGarden","id","put","addBalloons","getBalloons","getFriends","addFriends","getFriendByName","friendName","Friend","friendWorld","login","loadedBalloons","balloonData","parseBalloons","parsedBalloons","_id","Object","assign","gardenX","max","min","gardenY","gardenZ","loadedFriends","friendsData","JSON","parse","randomiser","loadGarden","garden","parsedGarden","stamp","parsedPlant","calculateGrowth","date","key","plantDate","res","sendFriendBalloon","sendBalloon","myId","myName","myWorld","me","stringify","sample","array","floor","random","saveGarden","plants","chosen","savedSeeds","savedGarden","extractPlants","worldChosen","extractedPlants","savedPlant","day","getDate","month","getMonth","year","getFullYear","range","generatePosition","WorldData","generateStalactites","offset","generateStalactite","stalactiteGeometry","stalactitePosition","stalactiteMin","stalactiteY","stalactiteXZ","Title","h1","Label","label","InputText","input","Button","CancelButton","SignUp","handleChangeInputName","target","value","setState","handleChangeInputEmail","email","handleChangeInputPassword","password","handleAddUser","newUser","validUsername","status","window","alert","balloonOne","balloonTwo","onChange","LogIn","handleGetUser","SeedBank","setPlants","setChosenseed","setSeeds","setSeedindex","removeSeed","increment","updatedSeeds","findIndex","checkAchievements","plantCount","fivePlants","achievementTracker","duplicate","bonusSeed","calculateAchievement","fallback","newPlant","point","z","createPlant","makeFriends","makeFriendRequest","selectedSeed","App","chosenWorld","bind","connecToServer","fetch","style","width","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9391f896.chunk.js","sourcesContent":["import { sendBalloon, sample } from './'\n\n// This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP/DRY\n\nexport default function calculateAchievement(seeds, id, plantCount) {\n  console.log(\"In Achievement Calculator seeds are:\")\n  console.log(seeds)\n  let duplicate = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    let bonusSeed = sample(seeds)\n    console.log(\"bonusSeeds\")\n    sendBalloon(id, bonusSeed.type, 3, `${plantCount} plants! Bonus ${bonusSeed.type} seeds!`  ) //userId, type, quantity = 0, message, sender = \"SeedBank\")\n    return\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds, id, plantCount)\n  }\n}\n  sendBalloon(id, newSeed.type, 3, `${plantCount} plants! ${'\\n'} ${newSeed.type} unlocked!`)\n  return newSeed\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n//\n// function updateSeeds(seeds, newSeed, id, plantCount) {\n//   const updatedSeeds = []\n//   for (let index = 0; index < seeds.length; index++) {\n//     const seed = seeds[index]\n//     if (seed.type === newSeed.type) {\n//       seed.quantity += newSeed.quantity\n//     }\n//     updatedSeeds.push(seed)\n//   }\n//   newSeed.quantity = 0\n//   updatedSeeds.push(newSeed)\n//   return updatedSeeds\n// }\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n","\n// calculates the difference in days between two dates using ISO strings for start and end\n\nexport default function calculateDays(start, end) {\n    const date1 = new Date(start);\n    const date2 = new Date(end);\n\n    // One day in milliseconds\n    const oneDay = 1000 * 60 * 60 * 24;\n\n    // Calculating the time difference between two dates\n    const diffInTime = date2.getTime() - date1.getTime();\n    //console.log(\"Time diff\")\n    //console.log(diffInTime)\n\n    // Calculating the no. of days between two dates\n    const diffInDays = Math.round(diffInTime / oneDay);\n\n    return diffInDays;\n}\n","\n// generates a unique ID number \n\n\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport default function createId() {\n  return uuidv4()\n}\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId, loadBalloons, updateBalloons } from '../../functions'\nimport { Balloon } from '../'\n\n\n\nfunction Balloons(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  const [balloons, setBalloons] = useState([])\n\n  useEffect(() => {\n    loadBalloons(props.seeds, props.lastLogin, props.userId, props.today).then(data => setBalloons(data))\n  }, [])\n\n\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return (\n    <>\n    <mesh\n      {...props }\n      ref={mesh}\n      scale={1}\n      >\n      {createBalloons(props, balloons)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createBalloons(props, balloons) {\n  const balloonCollection = []\n  const {removeBalloon, updateSeeds, acceptFriend, seeds} = props\n\n  for (let index = 0; index < balloons.length; index++) {\n  const balloon = balloons[index]\n\n  if (balloon.type === \"friendRequest\") {\n\n  }\n  const handleClick = (props) => {\n    // handleClick for seed balloons\n    balloon.type === \"friendRequest\" ? acceptFriend(balloon.sender) : updateSeeds(balloon.quantity, balloon.type)\n  }\n\n\n\n  balloonCollection.push(\n    <Balloon\n    key={balloon.balloonId}\n    balloonId={balloon.balloonId}\n    seeds={seeds}\n    position={balloon.position}\n    index={index}\n    handleClick={handleClick}\n    updateBalloons={updateBalloons}\n    colour={balloon.colour}\n    type={balloon.type}\n    sender={balloon.sender}\n    quantity={balloon.quantity}\n    message={balloon.message} />\n  )\n  }\n  return balloonCollection\n}\n\n\nexport default Balloons\n","import {sample, randomiser, createId, calculateDays} from './'\nimport { Balloon } from '../gameObjects'\nimport api from '../api';\n\nconst defaultQuantity = 3 // default quantity for a pack of new seeds\n\nexport default async function loadBalloons(seeds, login, id, today) {\n  console.log(seeds)\n\n  const dateDifference = calculateDays(login, today)\n  let loadedBalloons = await api.getBalloons(id)\n  let balloonData = loadedBalloons.data.data\n  console.log(\"LOADED BALLOONS\")\n\n  console.log(balloonData)\n\n\n  let balloons = parseBalloons(balloonData)\n\n  // NO LONGER SENDING A 'DAILY BALLOON'\n  // if (seeds.length > 0) {\n  //   balloons.push(dailyBalloon(seeds))\n  // }\n\n  console.log(\"LOADED BALLOONS\")\n  console.log(balloons)\n  return balloons\n}\n\nfunction parseBalloons(balloonData) {\n  let parsedBalloons = []\n  for (let index = 0; index < balloonData.length; index++) {\n    console.log(\"In parsedballoons\")\n    const balloon = balloonData[index]\n    balloon.balloonId = balloon._id // Can only get the DB to findOne using its own _id!\n    console.log(balloon)\n    if (balloon.claimed) {\n       continue }\n    parsedBalloons.push(Object.assign(new Balloon(), balloon))\n  }\n  return parsedBalloons\n}\n\n\n//NOT IN USE ANYMORE\nfunction dailyBalloon(seeds, id) {\n\n  // This is not being added to the balloon database at the moment\n  const sampleSeeds = sample(seeds)\n  const newSeeds = {type: sampleSeeds.type, quantity: defaultQuantity}\n  const dailyMessage = `${newSeeds.quantity} x ${newSeeds.type}!`\n  return new Balloon(id, newSeeds.type, newSeeds.quantity, dailyMessage)\n}\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { Text, Billboard } from '@react-three/drei'\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId, updateBalloons } from '../../functions'\n\n\n\nfunction Balloon(props) {\n\n  const mesh = useRef()\n  const [claimed, setClaimed] = useState(false)\n  const [displayMessage, setDisplaymessage] = useState(false)\n\n\n  const handleClick = () => {\n    if (!claimed) {\n      props.handleClick()\n      if (props.type !== \"introBalloon\") {\n        setClaimed(prev => !prev)\n        updateBalloons(props.balloonId)\n      } // introballoons (save/new world) can't be claimed\n    }\n    setDisplaymessage(prev => !prev)\n  }\n\n  useEffect(() => {\n    setClaimed(claimed)\n    setDisplaymessage(displayMessage)\n  }, [])\n\n\n\n\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={0.8}\n      onClick={handleClick}\n      >\n      <BalloonBody colour={props.colour} />\n      <BalloonCone colour = {props.colour} position={[0, -0.18, 0]}/>\n      <BalloonString position={[0, -0.15, 0]}/>\n      <BalloonCrate position={[0, -0.48, 0]}/>\n      <Billboard\n      follow={true}\n      lockX={false}\n      lockY={false}\n      lockZ={false} >\n      <BalloonText type={props.type} displayMessage={displayMessage} position={[0, -0.9, 0]} claimed={claimed} message={props.message} />\n      </Billboard>\n    </mesh>\n      </group>\n\n  )\n }\n\n function BalloonText(props) {\n\n   const ballonTextColour = {\n     message: \"#293241\",\n     outline: \"#b1b5c8\"\n   }\n\n   const mesh = useRef()\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={0.8}\n       >\n       <Text fontSize={0.2} outlineWidth={0.2} outlineColor={ballonTextColour.outline} color={ballonTextColour.message} > {props.displayMessage || props.type === \"introBalloon\" ? props.message : \"\" } </Text>\n       </mesh>\n   )\n }\n\n\n function BalloonBody(props) {\n\n   const mesh = useRef()\n   useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={1}\n       >\n   <dodecahedronGeometry args={[0.153, 8]} />\n   <meshToonMaterial color={props.colour} />\n   </mesh>\n )\n }\n\n function BalloonString(props) {\n\n   const mesh = useRef()\n   useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n   // Set up state for the hovered and active state\n\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={1}\n       >\n       <cylinderGeometry args={[0.005, 0.005, 0.5, 3]} />\n       <meshToonMaterial color={'#16161D'} />\n     </mesh>\n   )\n  }\n\n  function BalloonCone(props) {\n    const mesh = useRef()\n    useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n    // Set up state for the hovered and active state\n\n\n    return (\n      <mesh\n        {...props}\n        ref={mesh}\n        scale={1}\n        >\n        <cylinderGeometry args={[0.15, -0.01, 0.3, 16]} />\n        <meshToonMaterial color={props.colour} />\n      </mesh>\n    )\n   }\n\n   function BalloonCrate(props) {\n     const mesh = useRef()\n     useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n     // Set up state for the hovered and active state\n\n\n     return (\n       <mesh\n         {...props}\n         ref={mesh}\n         scale={1}\n         >\n         <boxGeometry args={[0.15, 0.15, 0.15]} />\n         <meshToonMaterial color={'#7f5539'} />\n       </mesh>\n     )\n    }\n\nexport default Balloon\n","import { Billboard, Text } from '@react-three/drei'\nimport React, { Component, useState, useRef } from 'react';\nimport {balloonColours, sendBalloon, sample} from '../../functions'\nconst size = 0.1\n\nfunction BalloonShop(props) {\n  const mesh = useRef()\n\n  const handleClick = () => {\n\n  }\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={handleClick}\n      >\n    {balloonsForSale(props)}\n    </mesh>\n  )\n}\n\nfunction balloonsForSale(props) {\n  console.log(\"In balloonsForSale\" )\n  const colours = balloonColours()\n  let balloons = []\n  for (let balloon = 0; balloon < props.seeds.length; balloon++) {\n    const ballonTextColour = {\n      message: \"#293241\",\n      outline: \"#b1b5c8\"\n    }\n    const x = Math.cos(Math.PI * balloon / colours.length)\n    const y = 1 + Math.sin((Math.PI * balloon / colours.length  ))\n\n    balloons.push(<BalloonForSale buyBalloon={props.buyBalloon} textColour=\"#293241\" outline={colours[balloon]} position={[x, y, 0]}/>)\n  }\n  console.log(balloons)\n  return balloons\n}\n\nfunction BalloonForSale(props) {\n\n  const mesh = useRef()\n  const [scale, setScale] = useState(1)\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(props)\n    props.buyBalloon(props.outline)\n    setScale(0.95)\n    setTimeout(() => {\n      setScale(1)\n    }, 100)\n\n    //  constructor(userId, type, colour = sample(balloonColours()), quantity = 0, message, sender = \"SeedBank\") {\n  }\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={scale}\n      onClick={(event) => handleClick(event)}\n      >\n    <Billboard\n      position={props.position}\n      follow={true}\n      lockX={false}\n      lockY={false}\n      lockZ={false} // Lock the rotation on the z axis (default=false)\n      >\n      <Text fontSize={size} outlineWidth={size} outlineColor={props.outline} color={props.textColour}>\n      £1\n       </Text>\n      </Billboard>\n      </mesh>\n    )\n}\n\nexport default BalloonShop\n","import {sample} from './'\n\nexport default function balloonColours() {\n  return[\n    \"#db504a\",\n    \"#ff6f59\",\n    \"#ffe200\",\n    \"#9bf6ff\",\n    '#ffd6a5',\n    '#caffbf',\n    '#ffc6ff',\n    '#bdb2ff',\n    '#e9ff70',\n    '#ff70a6',\n    '#ff9770',\n    '#c64664',\n    '#54428e',\n    '#ef476f',\n    '#eb5e28'\n  ]\n}\n","import { Billboard, Text } from '@react-three/drei'\nimport { setDate } from '../../functions'\nimport React, { Component, useState, useRef } from 'react';\nimport { SeedCloud, CloudKeyBoard, BalloonShop } from '../'\n\n\nconst position = [0.5, 2.8, 5]\nconst size = 0.5\nconst options = 3 // 1 = Choose Seed, 2 = send Friend Request, 3 = buy balloon\n\nfunction Cloud(props) {\n  const mesh = useRef()\n  const [option, setOption] = useState(0)\n\n  const noticeTextColour = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  }\n\n  const handleClick = () => {\n    console.log(\"In handleClick!\")\n    option >= options ? setOption(0) : setOption(prev => prev + 1)\n    console.log(option)\n\n  }\n\n\nreturn (\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={1}\n    onClick={handleClick}\n    >\n  <Billboard\n    position={position}\n    follow={true}\n    lockX={false}\n    lockY={false}\n    lockZ={false} // Lock the rotation on the z axis (default=false)\n    >\n    <Text fontSize={size} outlineWidth={size} outlineColor={noticeTextColour.outline} color={noticeTextColour.message}>\n    {displayText(option)}\n     </Text>\n    </Billboard>\n    {displayFunctionality(option, props)}\n\n    </mesh>\n)\n}\n\nfunction displayText(option) {\n  console.log(\"OPTION \" + option )\n\n  switch(option) {\n    case 0:\n      const date = setDate()\n      return `   | | ${'\\n'} \\\\__/ `\n    case 1:\n      return 'Choose Seed'\n    case 2:\n      return 'Send friend request'\n    case 3:\n      return 'Buy balloon'\n    default:\n     return \"hello\"\n  }\n\n}\n\nfunction displayFunctionality(option, props) {\n\n  switch(option) {\n    case 1:\n      return <SeedCloud seeds={props.seeds} selectSeed={props.selectSeed} toggleSeeds={props.toggleSeeds} chosenSeed={props.chosenSeed} />\n    case 2:\n      return <CloudKeyBoard handleSubmit={props.sendFriendRequest} />\n    case 3:\n      if (props.seeds.length > 0) {\n        return <BalloonShop seeds={props.seeds} buyBalloon={props.buyBalloon} />\n      }\n    default:\n     return \"\"\n  }\n}\n\nexport default Cloud\n","\nimport { Text, Billboard } from '@react-three/drei'\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { createId } from '../../functions'\n\n\n\nconst characters = \"abcdefghijklmnopqrstuvwxyz0123456789\"\nconst alphabet = characters.split('')\nconst cloudKeyboardColours = {text: \"#293241\", outline: \"#b1b5c8\"}\nconst cloudFunctionButtonColours = {text: \"#b1b5c8\", outline: \"#293241\"}\nconst fontSize = 0.1\nconst fontZ = 1\n\n\n\n\nfunction CloudKeyBoard(props) {\n  const [sentenceArray, setSentencearray] = useState([])\n  const [sentence, setSentence] = useState('')\n  const [submitted, setSubmitted] = useState(false)\n\n  const buildSentence = (character) => {\n    setSentencearray( (prev) => {\n      return [...prev, character]\n    })\n  }\n\n  const deleteCharacter = () => {\n    console.log(sentenceArray)\n    let previousLength = sentenceArray.length - 1\n    setSentencearray (\n      (prev) => {\n        return prev.filter((character, index) => index !== previousLength)\n      }\n    )\n    console.log(sentenceArray)\n  }\n\n  const submit = () => {\n    setSubmitted(true)\n    props.handleSubmit(sentence)\n  }\n\n  useEffect(() => {\n\n    //\n    setSentence(sentenceArray.join(''))\n    setSubmitted(submitted)\n  });\n\n\n  const mesh = useRef()\n\n\n\n  return (\n  <>\n  {submitted ? < CloudText key={createId()} sentence={sentence} fontX={0.8} fontY={1.8} /> : createCloudKeyboard(props, buildSentence, deleteCharacter, sentence, submit) } />\n  </>\n\n)\n}\n\nfunction createCloudKeyboard(props, buildSentence, deleteCharacter, sentence, submit) {\n  console.log(\"User is \" + props.userName)\n  let cloudKeyboard = []\n  let fontX = 0.5\n  let fontY = 3\n  let column = 1\n  for (let char = 0; char < alphabet.length; char++) {\n    let character = alphabet[char]\n    fontX += 0.3\n    cloudKeyboard.push( < CloudKey key={createId()} buildSentence={buildSentence} character={character} fontX={fontX} fontY={fontY} /> )\n    if (column % 8 === 0) {\n      fontY -= 0.3\n      fontX = 0.5\n    }\n    column++\n\n  }\n  cloudKeyboard.push( <FunctionKey key={createId()} handleClick={deleteCharacter} fontX={fontX + 0.3} fontY={fontY} character='X' /> )\n  cloudKeyboard.push( <FunctionKey key={createId()} handleClick={submit} fontX={fontX + 0.6} fontY={fontY} character='+'/>)\n  cloudKeyboard.push( < CloudText key={createId()} sentence={sentence} fontX={0.8} fontY={fontY - 0.3} /> )\n\n  return cloudKeyboard\n\n\n}\n\nfunction CloudKey(props) {\n\n    const mesh = useRef()\n\n    const handleClick = (event, character) => {\n      event.stopPropagation()\n      props.buildSentence(character)\n    }\n\n    return (\n        <mesh\n          {...props}\n          ref={mesh}\n          onClick={(event) => handleClick(event, props.character)}\n          >\n          <Billboard\n          follow={true}\n          lockX={false}\n          lockY={false}\n          lockZ={false} >\n          < Text\n          fontSize={fontSize}\n          position={[props.fontX, props.fontY, fontZ]}\n          outlineWidth={fontSize}\n          outlineColor={cloudKeyboardColours.outline}\n          color={cloudKeyboardColours.text}\n           >\n           {props.character}\n          </ Text>\n          </ Billboard>\n        </mesh>\n        )\n      }\n\nfunction FunctionKey(props) {\n\n// FunctionKey Receives a 'handleclick' prop that can vary according to functions\n// Varies in colour to cloudkey but other than that the two could prob be merged into single component\n\nconst mesh = useRef()\n\nconst handleClick = (event) => {\nevent.stopPropagation()\nprops.handleClick()\n}\n\nreturn (\n  <mesh\n    {...props}\n    ref={mesh}\n    onClick={(event) => handleClick(event)}\n    >\n    <Billboard\n    follow={true}\n    lockX={false}\n    lockY={false}\n    lockZ={false} >\n    < Text\n    fontSize={fontSize}\n    position={[props.fontX, props.fontY, fontZ]}\n    outlineWidth={fontSize}\n    outlineColor={cloudFunctionButtonColours.outline}\n    color={cloudFunctionButtonColours.text}\n     >\n     {props.character}\n    </ Text>\n    </ Billboard>\n  </mesh>\n  )\n}\n\nfunction CloudText(props) {\n\n    const mesh = useRef()\n\n    const handleClick = (event, character) => {\n      event.stopPropagation()\n    }\n\n    return (\n        <mesh\n          {...props}\n          ref={mesh}\n          onClick={(event) => handleClick(event, props.character)}\n          >\n          <Billboard\n          follow={true}\n          lockX={false}\n          lockY={false}\n          lockZ={false} >\n          < Text\n          fontSize={fontSize}\n          position={[props.fontX, props.fontY, fontZ]}\n          outlineWidth={fontSize}\n          outlineColor={cloudFunctionButtonColours.outline}\n          color={cloudFunctionButtonColours.text}\n           >\n           {props.sentence}\n          </ Text>\n          </ Billboard>\n        </mesh>\n        )\n      }\n\nexport default CloudKeyBoard\n","import { extend, useThree, useFrame } from \"@react-three/fiber\";\nimport React, { useRef } from \"react\";\nimport { OrbitControls } from 'three-stdlib';\nextend({ OrbitControls });\n\n\nconst Camera = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls component.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return <orbitControls\n          ref={controls}\n          position={[0, -10, 0]}\n          args={[camera, domElement]}\n          autoRotate={false}\n          autoRotateSpeed={0.2}\n          enabled={true}\n          />;\n};\n\nexport default Camera\n","import React, { useRef } from \"react\";\n\n\n\n// The plane on which plants grow\n\nfunction FakeGrass(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={'#a7c957'} />\n    </mesh>\n  )\n}\n\nexport default FakeGrass\n","import { Sky } from '@react-three/drei'\n\nexport default function Firmament(props) {\n  return (\n    <Sky\n      turbidity={0.01}\n      distance={450000} // Camera distance (default=450000)\n      sunPosition={[0, 1, 0]} // Sun position normal (defaults to inclination and azimuth if not set)\n      inclination={0.47} // Sun elevation angle from 0 to 1 (default=0)\n      elevation={0.6}\n      exposure={0.3}\n      mieDirectionalG={0.04}\n      mieCoefficient={0.0045}\n      rayleigh={0.1}\n      azimuth={0.6} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n      {...props} // All three/examples/jsm/objects/Sky props are valid\n    />  )\n}\n","import { Billboard, Text } from '@react-three/drei'\nimport React, { Component, useState, useRef, useEffect } from 'react';\nimport { loadFriends } from '../functions'\nimport { Garden } from './'\n\n// generates a floating garden for each friend and places it in the background\n// uses the same Garden generation code as the user garden, except FakeGrass can't be planted (probably could merge this with Grass)\n\nfunction Friends(props) {\n\n  const [friends, setFriends] = useState([])\n  const mesh = useRef()\n\n  useEffect(() => {\n    loadFriends(props.userId).then(data => setFriends(data))\n  }, [])\n\n  return (\n    <>\n    <mesh\n      {...props }\n      ref={mesh}\n      scale={1}\n      >\n      {createFriends(props, friends)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createFriends(props, friends) {\n  console.log(\"In createFriends\")\n  console.log(props.sendPlant)\n  console.log(friends)\n  const friendCollection = []\n  for (let index = 0; index < friends.length; index++) {\n    const friend = friends[index]\n    console.log(friend)\n    friendCollection.push(<Garden sendPlant={props.sendPlant} friend={true} position={friend.position} name={friend.name} friendId={friend.friendId} world={friend.world} />)\n  }\n  console.log(\"CREATED FRIENDS\")\n  console.log(friendCollection)\n  return friendCollection\n}\n\n\nexport default Friends\n","import api from '../api';\nimport { randomiser } from './'\n\nconst gardenX = {max: 20, min: -20}\nconst gardenY = {max: 10, min: -10}\nconst gardenZ = {max: -10, min: -30}\n\n\nexport default async function loadFriends(id) {\n  console.log(\"LOADING FRIENDS FOR \" + id)\n  const loadedFriends = await api.getFriends(id)\n  const friendsData = loadedFriends.data.data\n  const friendCollection = []\n  for (let index = 0; index < friendsData.length; index++) {\n    const friend = friendsData[index]\n    friendCollection.push(\n      {\n        friendId: friend.friendId,\n        name: friend.friendName,\n        world: JSON.parse(friend.friendWorld),\n        position: [randomiser(gardenX), randomiser(gardenY), randomiser(gardenZ)]\n      }\n    )\n  }\n  return friendCollection\n}\n","import React, { useRef } from \"react\";\n\n\n\n// The plane on which plants grow\n\nfunction Grass(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => props.sowPlant(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={'#a7c957'} />\n    </mesh>\n  )\n}\n\nexport default Grass\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { createId } from '../../functions'\nimport { Grass, SeedBox, FakeGrass } from '../'\nimport { Text, Billboard } from '@react-three/drei'\n\n\n// The plane on which plants grow\n\nfunction Garden(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  const [name, setName] = useState(true)\n\n  const handleClick = (event) => {\n    if (props.friend) {\n  //  setName(prev => !prev)\n    event.stopPropagation()\n    props.sendPlant(props.name, props.friendId)\n    }\n  }\n\n  useEffect(() => {\n    setName(name)\n    console.log(\"name \" + name)\n    console.log(\"friend \" +  props.friend)\n  })\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      {createStalactites(props)}\n      {name && props.friend ? <GardenText name={props.name} position={[0, 2, 0]} /> : ''}\n    </mesh>\n    </>\n  )\n}\n\nfunction createStalactites(props) {\n  const world = props.world\n  const createdStalactites = []\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index]\n    createdStalactites.push( <Stalactite key={createId()} friend={props.friend} sowPlant={props.sowPlant} args={stalactite.geometry} position={stalactite.position} colour={stalactite.colour} />)\n  }\n\n  return createdStalactites\n}\n\nfunction Stalactite(props) {\n  const mesh = useRef()\n  let [top, bottom, depth, sections] = props.args\n\n  const handleClick = (event) => {\n    props.friend ? console.log(\"friend island click\") : event.stopPropagation()\n  }\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={props.colour}  />\n      {props.friend ? <FakeGrass position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} /> : <Grass sowPlant={props.sowPlant} position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} />}\n    </mesh>\n    </group>\n  )\n}\n\nfunction GardenText(props) {\n\n  const gardenTextColor = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  }\n\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={0.8}\n      >\n      <Text fontSize={1.2} outlineWidth={1} outlineColor={gardenTextColor.outline} color={gardenTextColor.message} > {props.name } </Text>\n      </mesh>\n  )\n}\n\nexport default Garden\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../../functions'\nimport { Balloon } from '../'\n\n\nfunction IntroBalloons(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      <Balloon type=\"introBalloon\" position={[-0.6, 2, 0]} handleClick={props.newWorld} colour=\"#ee6055\" message=\"New garden\" />\n      <Balloon type=\"introBalloon\" position={[0.6, 2, 0]} handleClick={props.saveWorld} colour=\"#ffd97d\" message=\"Save garden\" />\n    </mesh>\n    </>\n  )\n}\n\nexport default IntroBalloons\n","export default __webpack_public_path__ + \"static/media/seedbankProto.6cdc7966.png\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport logo from '../images/seedbankProto.png';\n\nconst Wrapper = styled.a.attrs({\n    className: 'navbar-brand',\n})``\n\nclass Logo extends Component {\n    render() {\n        return (\n            <Wrapper href=\"https://example.com\">\n                <img src={logo} height=\"50\" alt=\"seedbank\" />\n            </Wrapper>\n        )\n    }\n}\n\nexport default Logo\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\nclass Links extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Link to=\"/\" className=\"navbar-brand\">\n                    SeedBank\n                </Link>\n                    <Link to=\"/\" className=\"navbar-brand\">\n                     { this.props.user }\n                    </Link>\n              </React.Fragment>\n        )\n    }\n}\n\nexport default Links\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport Logo from './Logo';\nimport Links from './Links';\n\n\nconst Nav = styled.nav.attrs({\n    className: 'navbar navbar-expand-lg navbar-dark bg-dark',\n})`\n    margin-bottom: 20 px;\n`\n\nclass NavBar extends Component {\n    render() {\n        return (\n                <Nav height=\"50%\">\n                    <Logo />\n                    <Links user={this.props.user} setUser={this.props.setUser} />\n                </Nav>\n        )\n    }\n}\n\nexport default NavBar\n","import React, { useRef } from \"react\";\nimport { createId } from '../../functions'\nimport { getSeed } from '../../gameObjects'\n\n\n// Creates a Plant based on the props that it receives\n\nfunction Plant(props) {\n\n  const mesh = useRef()\n\n  // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"This plant is:\")\n    console.log(props)\n  }\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      onClick={(event) => handleClick(event)}\n      scale={0.2}\n    //  onPointerOver={(event) => setHover(true)}\n    //  onPointerOut={(event) => setHover(false)}\n    >\n      {buildPlant(props)}\n    </mesh>\n    </group>\n\n  )\n}\n\n// buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\nfunction buildPlant(props) {\n\n  const [x, y, z] = props.position\n  const {bloom, leafColour, stemColour, flowerColour} = getSeed(props.type)\n  let growth = props.growth\n\n  // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom\n  }\n\n  // the length of the stem is based on the plant's growth\n\n  const stemLength = growth/24\n\n\n  // push the Base and Stem into the plant array\n\n  let plant = [\n    <Base key={createId()} />,\n    <Stem key={createId()} stemColour={stemColour} stemLength={stemLength} position={[0, 0.05, 0]}/>,\n  ]\n\n  // Add leaves relative to the plant's growth level\n\n  for (let leaves = 0; leaves <= growth; leaves++) {\n    plant.push(\n    <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n    <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n  )\n  }\n\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n  plant.push(\n    <Flower key={createId()} color={flowerColour} position={[0, 0.1 + (growth/11), 0]} />\n  )\n}\n\n  return plant\n\n}\n\nfunction Base(props) {\n\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n     >\n    <dodecahedronGeometry args={[0.035, 2]} />\n    <meshToonMaterial color={'#947352'} />\n  </mesh>\n)\n\n\n}\n\nfunction Stem(props) {\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={0.5}\n\n    >\n    <cylinderGeometry args={[0.01, 0.03, 0.3 + props.stemLength, 12]} />\n    <meshToonMaterial color={props.stemColour} />\n    </mesh>\n  )\n}\n\n\nfunction Leaf(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <cylinderGeometry args={[0.02, 0.05, 0.02, 6]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\nfunction Flower(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <dodecahedronGeometry args={[0.06]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\n\n\nexport default Plant\n","\n export default function getSeed(seed) {\n\n   switch(seed) {\n     case \"generic_plant\":\n        return {bloom: 1, leafColour: '#377F34', stemColour: '#499B4A', flowerColour: '#832134'}\n     case \"tulip\":\n        return {bloom: 2, leafColour: '#2D5A27', stemColour: '#567d46', flowerColour: '#ff878d'}\n     case \"sunflower\":\n        return {bloom: 4, leafColour: '#75ae92', stemColour: '#82ac80', flowerColour: '#f8ec89'}\n    case \"crocus\":\n      return {bloom: 1, leafColour: '#76c893', stemColour: '#52b69a', flowerColour: '#3a0ca3'}\n    case \"snowdrop\":\n      return {bloom: 1, leafColour: '#76c893', stemColour: '#52b69a', flowerColour: '#f8f9fa'}\n    case \"rose\":\n      return {bloom: 5, leafColour: '#499B4A', stemColour: '#75ae92', flowerColour: '#9e0059'}\n    case \"venusFlyTrap\":\n      return {bloom: 7, leafColour: '#ccd5ae', stemColour: '#ccd5ae', flowerColour: '#ccd5ae'}\n     default:\n      return\n   }\n\n}\n","import { Text, Billboard } from '@react-three/drei'\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { createId } from '../../functions'\n\n// Creates a button that 'clicks'\n\nconst seedTextColours = {type: \"#293241\", outline: \"#b1b5c8\"}\nconst selectedSeedTextColours = {type: \"#b1b5c8\", outline: \"#293241\"}\nconst fontSize = 0.15\nconst fontZ = 1\nconst fontY = 2\n\nfunction SeedCloud(props) {\n\n  const mesh = useRef()\n\n\n\n  return (\n  <>\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={1}\n    >\n   {seedSelectors(props)}\n  </mesh>\n  </>\n\n)\n}\n\nfunction seedSelectors(props) {\n  let seedSelectors = []\n  let fontX = 0\n  for (let index = 0; index < props.seeds.length; index++) {\n    let seed = props.seeds[index]\n    if (seed.quantity === 0) { continue }\n    const x = Math.cos(2 * Math.PI * index / props.seeds.length)\n    const y = 3 + Math.sin(2 * (Math.PI * index / props.seeds.length  ))\n    let colours = {}\n    seed.type === props.chosenSeed ? colours = selectedSeedTextColours : colours = seedTextColours\n    seedSelectors.push( <SeedText key={createId()} position={[x, y, 0]} selectSeed={props.selectSeed} toggleSeeds={props.toggleSeeds} seed={seed} colours={colours} index={index}  />)\n  }\n  if (seedSelectors.length === 0) {\n    seedSelectors.push( <NoSeedText key={createId()} colours={seedTextColours} index={1} />)\n  }\n  return seedSelectors\n}\n\n\nfunction SeedText(props) {\n  const seed = props.seed\n  const mesh = useRef()\n  const [selected, setSelected] = useState(false)\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    props.selectSeed(seed.type, props.index)\n  }\n\n\n  return (\n      <mesh\n        {...props}\n        ref={mesh}\n        >\n        <Billboard\n        follow={true}\n        lockX={false}\n        lockY={false}\n        lockZ={false} >\n        < Text\n        fontSize={fontSize}\n        onClick={(event) => handleClick(event)}\n        outlineWidth={fontSize}\n        outlineColor={props.colours.outline}\n        color={props.colours.type}\n        rotation={[0, 0, 0]} >\n          {seed.type} {'\\n'}\n          x {seed.quantity}\n        </ Text>\n        </ Billboard>\n      </mesh>\n      )\n    }\n\nfunction NoSeedText(props) {\n      const mesh = useRef()\n\n      return (\n          <mesh\n            {...props}\n            ref={mesh}\n            >\n            <Billboard\n            follow={true}\n            lockX={false}\n            lockY={false}\n            lockZ={false} >\n            < Text\n            fontSize={0.25}\n            position={[1, 3, 1]}\n            outlineWidth={0.25}\n            outlineColor={props.colours.outline}\n            color={props.colours.type}\n            rotation={[0, 0, 0]} >\n              No seeds available\n            </ Text>\n            </Billboard>\n          </mesh>\n        )\n  }\n\n\nexport default SeedCloud\n","import styled from 'styled-components';\nimport React from 'react';\nimport { createId } from '../../functions'\n\n// Generates a panel that contains buttons of available Seeds\n// PROTOTYPE ONLY: need to design an interface that coould contain an indefinite number of seeds or objects\n\nconst SeedButton = styled.button`\ncolor: palevioletred;\nfont-size: 1em;\nmargin: 1em;\npadding: 0.25em 1em;\nborder: 2px solid palevioletred;\nborder-radius: 3px;\n`;\n\nconst Panel = styled.div`\n  background-color: lightgrey;\n  `;\n\n\nfunction Seeds(props) {\n\n  return (\n    <Panel>\n     {props.chosenSeed}\n    </Panel>\n  )\n}\n\nfunction seedCollection(props) {\n\n  const {seeds, selectSeed} = props\n  let seedCollection = []\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    seedCollection.push(\n      <SeedButton key={createId()} onClick={(event) => selectSeed(seed.type, index)} selectSeedtype={seed.type} quantity={seed.quantity} >\n      {seed.type} {seed.quantity}\n      </SeedButton>\n    )\n  }\n\n    return seedCollection\n}\n\nexport default Seeds\n","import { useRef } from 'react';\n// directionaLight is Three.js's daylight equivalent\n// values are arbitraty for now\n\nfunction Sun(props) {\n  const mesh = useRef()\n  const sunRef = useRef()\n\n  return (\n  <group>\n    <mesh\n      ref={sunRef}\n      {...props}\n      >\n    <directionalLight position={[0, 0.5, 1]} intensity={0.7} />\n    </mesh>\n\n  </group>\n  )\n}\n\nexport default Sun\n","import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: \"/api\",\n})\n//USER\nexport const addUser = payload => api.post(`/user`, payload)\nexport const getUser = name => api.get(`/user/${name}`)\nexport const updateGarden = (id, payload) => api.put(`/user/${id}`, payload)\n\n//BALLOONS\nexport const addBalloons = payload => api.post(`/balloons`, payload)\nexport const getBalloons = userId => api.get(`/balloons/${userId}`)\nexport const updateBalloons = (balloonId, payload) => api.put(`/balloons/${balloonId}`, payload) // only being used to claim balloons at the moment\n\n//FRIENDS\nexport const addFriends = payload => api.post(`/friends`, payload)\nexport const getFriends = userId => api.get(`/friends/${userId}`)\nexport const getFriendByName = (friendName, id) => api.get(`/friend/${friendName}/${id}`)\n\n\nconst apis = {\n    addUser,\n    getUser,\n    updateGarden,\n    addBalloons,\n    getBalloons,\n    updateBalloons,\n    getFriends,\n    addFriends,\n    getFriendByName\n}\n\nexport default apis\n","export default class Friend {\n\n  constructor(userId, friendId, friendName, friendWorld ) {\n    this.userId = userId\n    this.friendId = friendId\n    this.friendName = friendName\n    this.friendWorld = friendWorld\n  }\n\n}\n","import { Plant } from '../components'\nimport { setDate, calculateDays } from '../functions'\n\n// Reads a saved Garden and creates an array of plants ready to render\n\nexport default function loadGarden(garden) {\n  let parsedGarden = []\n  const today = setDate(Date()).stamp\n  for (let plant = 0; plant < garden.length; plant ++ ) {\n    const parsedPlant = garden[plant]\n    const growth = calculateGrowth(parsedPlant.date, today)\n    parsedGarden.push(<Plant key={parsedPlant.key} growth={growth} date={parsedPlant.date} position={parsedPlant.position} type={parsedPlant.type}/>)\n  }\n  return parsedGarden\n}\n\nfunction calculateGrowth(plantDate, today) {\n  const days = calculateDays(plantDate.stamp, today)\n  return days\n}\n\n\n\n\n//module.exports = parseGarden;\n","import api from '../api';\nimport { sendBalloon } from './'\n\n\nexport default async function makeFriendRequest(id, userName, friendName) {\n  let validRequest = true\n\n\n  await api.getFriendByName(friendName, id).then(res => {\n    console.log('Already friends?')\n    console.log(res)\n    if (res.data.data.friendName === friendName && res.data.data.userId === id) {\n      console.log(\"YES ALREADY FRIENDS\")\n      return\n    } else {\n      sendFriendBalloon(id, userName, friendName)\n    }\n  })\n}\n\nasync function sendFriendBalloon(id, userName, friendName) {\n  console.log(\"Making friend request to \" + friendName + \"from\" + \" userName\")\n  await api.getUser(friendName).then(res => {\n    const friendId = res.data.data._id\n    const type = \"friendRequest\"\n    const quantity = 1\n    const message = `${userName} wants to connect!`\n    sendBalloon(friendId, type, quantity, message, userName)\n  })\n}\n","import api from '../api';\nimport { Friend } from './'\n\nexport default async function makeFriends(myId, myName, friendName, myWorld) {\n\n\n\n  await api.getUser(friendName).then(res => {\n    console.log(\"IN MAKEFRIENDS\")\n    const friendId = res.data.data._id\n    const friendWorld = res.data.data.world\n    const friendName = res.data.data.name\n    const me = new Friend(friendId, myId, myName, JSON.stringify(myWorld)) // my details to be saved in friend's db\n    console.log(me)\n    const friend = new Friend(myId, friendId, friendName, friendWorld) // friend's details to be saved in my db\n    console.log(friend)\n    api.addFriends(me).then(res => {console.log(`ME ${me.friendName} is friends with ${friend.friendName}`) })\n    api.addFriends(friend).then(res => {console.log(`\"FRIEND \"${friend.friendName} is friends with ${me.friendName}`) })\n\n  })\n}\n","\n\nexport default function sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n\n}\n","import api from '../api';\nimport { setDate } from './'\n\n// strips out react components from the state garden array and saves plant props as an object that's easy to parse\n// Needs error handling!\n\n\nexport default async function saveGarden(id, plants, newWorld, chosen, savedSeeds){\n  let savedGarden = extractPlants(plants)\n  const garden = {\"garden\" : savedGarden}\n  const world = {\"world\" : JSON.stringify(newWorld)}\n  const seeds = {\"seeds\": savedSeeds}\n  const worldChosen = {\"worldChosen\" : chosen}\n  const date = setDate()\n  const lastLogin  = { \"lastLogin\" : date.stamp }\n  const payload = {garden, world, worldChosen, seeds, lastLogin}\n  console.log(\"Attempting to save garden\")\n  console.log(\"SEEDS ARE\")\n  console.log(seeds)\n  console.log(payload)\n  await api.updateGarden(id, payload).then(res => {\n        console.log(res)\n        console.log('Garden updated successfully')\n    })\n}\n\nfunction extractPlants(plants) {\n  let extractedPlants = []\n  for (let plant = 0; plant < plants.length; plant ++) {\n    const key = plants[plant].key\n    const parsedPlant = plants[plant].props\n    const savedPlant = {key: key, growth: parsedPlant.growth, date: parsedPlant.date, position: parsedPlant.position, type: parsedPlant.type}\n    extractedPlants.push(savedPlant)\n  }\n  return extractedPlants\n}\n","\n\n// creates a date object that contains day, month, year and stamp in ISO format\n\nexport default function setDate() {\n  const date = new Date()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n  const stamp = `${year}/${month}/${day}`\n  return {year: year, month: month, day: day, stamp: stamp }\n}\n","import {Balloon} from '../gameObjects'\nimport { sample, balloonColours } from './'\nimport api from '../api';\n\n// adds a balloon to the DB\n//  Balloon constructor(userId, type, quantity = 0, message, sender = \"SeedBank\") {\n\n\nexport default async function sendBalloon(userId, type, quantity, message, sender = \"SeedBank\", colour = sample(balloonColours()) ) {\n\n  //\n  console.log(\"In sendBalloon \" + type)\n\n  const balloon = new Balloon(userId, type, quantity, message, sender, colour)\n  console.log(balloon)\n\n  await api.addBalloons(balloon).then(res => {\n    console.log(`${type} balloon sent!`)\n  })\n\n}\n","\n// accepts a range object and returns a random number\n// useed to generate terrain and balloons\n// eg {max: 1.3, min: 1}\n\nexport default function randomiser(range) {\n  return Math.random() * (range.max - range.min) + range.min\n}\n","import api from '../api';\n\nexport default async function updateBalloons(balloonId) {\n  console.log(balloonId)\n\n\n  console.log(\"In UPDATED!\")\n  await api.updateBalloons(balloonId, {} ).then(res => {\n        console.log('Balloon updated successfully')\n    })\n\n}\n","import {sample, randomiser, createId, calculateDays, balloonColours} from '../functions'\n\n\nexport default class Balloon {\n  constructor(userId, type, quantity = 0, message, sender = \"SeedBank\", colour = sample(balloonColours())) {\n    this.balloonId = createId()\n    this.userId = userId\n    this.colour = colour\n    this.position = generatePosition()\n    this.type = type\n    this.quantity = quantity\n    this.message = message\n    this.claimed = false\n    this.sender = sender\n  }\n}\n\n\nfunction generatePosition() {\n  const x = {max: 2, min: -2}\n  const y = {max: 1.8, min: 1.5}\n  const z = {max: 1.8, min: -1.8}\n\n  return [randomiser(x), randomiser(y), randomiser(z)]\n}\n","\n// creates the data used to generate the Stalactite components\n\nimport {sample, randomiser} from '../functions'\n\n\nconst stalactiteCount = 10\n\nexport default class WorldData {\n\n  constructor(stalactites = generateStalactites())  {\n    this.stalactites = stalactites\n  }\n\n}\n\n\n\nfunction generateStalactites() {\n  let stalactites = []\n  let offset = 0\n  for (let stalactite = 0; stalactite < stalactiteCount; stalactite++) {\n    stalactites.push(generateStalactite(offset))\n    offset += 0.1\n  }\n  return stalactites\n}\n\nfunction earthColour() {\n  const colours = [\n    '#6C6460',\n    '#8a817c',\n    '#6c757d',\n  ]\n\n    return sample(colours)\n}\n\nfunction generateStalactite(offset) {\n  return { geometry: stalactiteGeometry(offset), position: stalactitePosition(offset), colour: earthColour() }\n}\n\nfunction stalactiteGeometry(offset) {\n\n  const stalactiteMax = {max: 1.3 - offset, min: 1 - offset}\n  const stalactiteMin = {max: 0.8 - offset, min: 0.01}\n  const stalactiteDepth = {max: 2.3, min: 1}\n  const stalactiteSegments = {max: 12, min: 6}\n\n  return [\n    randomiser(stalactiteMax),\n    randomiser(stalactiteMin),\n    randomiser(stalactiteDepth),\n    randomiser(stalactiteSegments)\n  ]\n\n}\n\nfunction stalactitePosition(offset) {\n\n  const stalactiteY = {max: 0 + offset, min: 1 + offset }\n  const stalactiteXZ = {max: 0.5, min: -0.5  }\n  return [\n    randomiser(stalactiteXZ),\n    -randomiser(stalactiteY),\n    randomiser(stalactiteXZ)\n  ]\n\n}\n\n\n\n\n\n\n\n/*\n\nOriginal stalactite settings:\n\nEarth disc:\n<cylinderGeometry args={[1.65, 1, 0.68, 9]}  />\n<meshToonMaterial color={'#8a817c'} />\n\nfunction createStalactites() {\n  return [\n    <Stalactite args={[1.6, 0.8, 1, 8]} position={[0.1, -0.28, 0, ]} colour={'#6c757d'}/>,\n    <Stalactite args={[1.3, 0.7, 1, 7]} position={[0.12, -0.5, 0.1]} colour={'#8a817c'} />,\n    <Stalactite args={[1.4, 0.55, 1.3, 4]} position={[-0, -0.7, 0.05]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.3, 2, 8]} position={[0, -0.9, -0.2]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.01, 2, 4]} position={[0, -1.9, -0.5]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.03, 2, 12]} position={[0, -0.9, 1.0]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.2, 1, 8]} position={[-0, -1.3, .40]} colour={'#8a817c'} />,\n    <Stalactite args={[0.7, 0.1, 1, 9]} position={[-0, -1.9, 0.30]} colour={'#6c757d'}/>,\n    <Stalactite args={[0.4, 0.01, 3, 8]} position={[0, -2.3, 0]} colour={'#8a817c'} />,\n\n\n\n  ]\n}\n*/\n","import React, { Component } from 'react';\nimport { WorldData, newSeeds, Balloon } from '../gameObjects'\nimport { setDate } from '../functions'\n\n\nimport api from '../api';\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputEmail = async event => {\n        const email = event.target.value\n        this.setState({ email })\n    }\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    // Chain API/login as follows (??) createUser.Then.addBalloons.Then.setUser\n\n    handleAddUser = async () => {\n        const { name, email, password } = this.state\n        let userId = \"\"\n        const newWorld = new WorldData()\n        const world = JSON.stringify(newWorld)\n        const seeds = []\n        const worldChosen = false\n        const date = setDate()\n        const lastLogin = date.stamp\n        const newUser = true\n        const payload = { name, email, password, world, worldChosen, seeds, lastLogin, newUser }\n        console.log(payload)\n        let validUsername = false\n\n        await api.getUser(name).then(res => {\n          res.status === 204 ? validUsername = true : window.alert(`Username taken`)\n        })\n\n        this.setState({\n            name: '',\n            email: '',\n            password: '',\n        })\n\n        if (validUsername) {\n\n        await api.addUser(payload).then(res => {\n            window.alert(`User added`)\n            console.log(\"SEEDS on SIGN UP\")\n            console.log(seeds)\n            this.props.setUser(name, res.data.id, [], newWorld, false, seeds, lastLogin)\n            userId = res.data.id\n        })\n        console.log(\"ID is\")\n        console.log(userId)\n        let balloonOne = new Balloon(userId, \"generic_plant\", 3, \"Welcome to SeedBank!\")\n        let balloonTwo = new Balloon(userId, \"tulip\", 3, \"Welcome to SeedBank!\")\n        console.log(balloonOne)\n        await api.addBalloons(balloonOne).then(res => {\n          console.log(\"Welcome balloon one added\")\n        })\n        await api.addBalloons(balloonTwo).then(res => {\n          console.log(\"Welcome balloon two added\")\n        })\n\n      }\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Sign Up</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Email: </Label>\n                <InputText\n                    type=\"text\"\n                    value={email}\n                    onChange={this.handleChangeInputEmail}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleAddUser}>Sign Up</Button>\n                <CancelButton href={'/movies/list'}>Cancel</CancelButton>\n            </Wrapper>\n        )\n    }\n}\n\nexport default SignUp\n","import React, { Component } from 'react';\nimport { loadGarden } from '../functions'\nimport api from '../api';\n\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\n\nclass LogIn extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    handleGetUser = async () => {\n\n        await api.getUser(this.state.name).then(res => {\n          console.log(res)\n            if (res.status === 204) {\n              window.alert(`No user found`)\n            } else if (this.state.password === res.data.data.password) {\n              const name = res.data.data.name\n              const id = res.data.data._id\n              const garden = loadGarden(res.data.data.garden)\n              const world = JSON.parse(res.data.data.world)\n              const seeds =  res.data.data.seeds\n              const worldChosen = res.data.data.worldChosen\n              const lastLogin = res.data.data.lastLogin\n              const newUser = false\n\n              window.alert(`Welcome back ${name}`)\n              this.props.setUser(name, id, garden, world, worldChosen, seeds, lastLogin, newUser)\n            } else {\n              window.alert(`Incorrect password`)\n            }\n        })\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Log In</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleGetUser}>Log In</Button>\n            </Wrapper>\n        )\n    }\n}\n\nexport default LogIn\n","import '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { calculateAchievement, saveGarden, sendBalloon, createPlant, loadBalloons, makeFriendRequest, makeFriends, sample } from '../functions'\nimport { Balloon } from '../gameObjects'\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Friends, Cloud, Balloons, SeedBox, IntroBalloons } from '../components';\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState([])\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      removeSeed()\n    }\n  }\n\n  const removeSeed = () => {\n    setChosenseed(\"\")\n    updateSeeds(-1, chosenSeed)\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed)\n      setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, type) => {\n    const updatedSeeds = [...seeds]\n    const index = updatedSeeds.findIndex(seed => seed.type === type)\n    if (index === -1) {\n      console.log(\"adding newSeed \" + type)\n      setSeeds( (prev) => {\n        return [...prev, {type: type, quantity: increment}]\n      })\n    } else {\n      updatedSeeds[index].quantity += increment\n      setSeeds(updatedSeeds)\n    }\n    console.log(seeds)\n    setSeedindex(null)\n    console.log(plants.length)\n  }\n\n\n  const checkAchievements = () => {\n    console.log(\"CHECKING ACHIEVEMENTS\")\n    const plantCount = plants.length\n    console.log(\"Plants \" + plantCount)\n    console.log(\"Seeds \" + seeds.length)\n    console.log(plantCount)\n    const fivePlants = plantCount % 5\n    const achievementCount = plantCount / 5 // how many multuples of five?\n    const startingSeeds = 2 // offset for the starting seeds\n    const achievementTracker = achievementCount + startingSeeds\n    console.log(\"AchievementTracker \" + achievementTracker)\n    if (fivePlants === 0 && plantCount !== 0 && seeds.length < achievementTracker) { // if statement checks if plantCount is multiple of 5 and whether the seeds for that multiple have been awarded\n      console.log(\"Achievement!\")\n      const newSeed = calculateAchievement(seeds, props.id, plantCount)\n      console.log(newSeed)\n      setSeeds( (prev) => {\n        return [...prev, {type: newSeed.type, quantity: 0}]\n      })\n    }\n  }\n\n  const sendFriendRequest = (sentence) => {\n    makeFriendRequest(props.id, props.userName, sentence, props.world)\n  }\n\n  const acceptFriend = (friendName) => {\n    makeFriends(props.id, props.userName, friendName, props.world)\n  }\n\n  const sendPlant = (friendName, friendId) =>{\n    console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`)\n    if (chosenSeed) {\n      const message = `${props.userName} sent you ${'\\n'} a ${chosenSeed} seed!`\n      sendBalloon(friendId, chosenSeed, 1, message, props.userName)\n      console.log(message)\n      console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`)\n      removeSeed()\n    } else {\n      console.log(\"No seed selected\")\n    }\n\n  }\n\n  const buyBalloon = (colour) => {\n    console.log(`Buying ${colour} balloon`)\n    const seed = sample(seeds)\n    const message = `Bought: ${seed.type} x 3!`\n    sendBalloon(props.id, seed.type, 3, message, \"SeedBank\", colour)\n  }\n\n  useEffect(() => {\n    console.log(\"in uSEEFFECT\")\n    console.log(seeds)\n    console.log(plants.length)\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n    checkAchievements()\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n      <Garden\n      friend={false}\n      sowPlant={sowPlant}\n      position={[0, 0, 0]}\n      world={props.world}\n      seeds={seeds}\n       />\n      {plants}\n      <Sun />\n      <Firmament />\n      <Friends sendPlant={sendPlant} userId={props.id}/>\n     </Suspense>\n     {props.worldChosen ?\n       <>\n       <Balloons\n        updateSeeds={updateSeeds}\n        acceptFriend={acceptFriend}\n        userId={props.id}\n        today={props.today}\n        lastLogin={props.lastLogin}\n        seeds={seeds} />\n       <Cloud\n        seeds={seeds}\n        chosenSeed={chosenSeed}\n        buyBalloon={buyBalloon}\n        position={[0, -0.8, 1]}\n        sendFriendRequest={sendFriendRequest}\n        selectSeed={selectSeed} />\n        </> :\n        < IntroBalloons\n          saveWorld={props.saveWorld}\n          newWorld={props.newWorld}\n        /> }\n    </Canvas>\n  </div>\n  );\n}\n\nexport default SeedBank;\n","import { setDate, createId } from './'\nimport { Plant } from '../components'\n\n// Creates a new Plant, with a uniqueID, growth initialised at 0 and a new date\n\nexport default function createPlant(event, seed) {\n  console.log(\"In createPlant\")\n\n  const position = [event.point.x, event.point.y, event.point.z]\n  const key = createId()\n  const date = setDate()\n  const newPlant = <Plant key={key} growth={0} date={date} position={position} type={seed} />\n\n  return newPlant\n}\n","import React from 'react'\nimport { WorldData } from '../gameObjects'\nimport { saveGarden, setDate } from '../functions'\n\n\nimport './App.css';\n\n\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { NavBar } from '../components'\nimport { SignUp, LogIn, SeedBank } from '../pages'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {\n        userName: \"\",\n        id: 0,\n        garden: [],\n        world: {},\n        chosenWorld: false,\n        seeds: [],\n        lastLogin: \"\",\n        newUser: true\n      }\n      this.setUser = this.setUser.bind(this)\n      this.newWorld = this.newWorld.bind(this)\n      this.saveWorld = this.saveWorld.bind(this)\n      this.connecToServer = this.connecToServer.bind(this)\n    }\n\n    componentDidMount() {\n      this.connecToServer();\n      }\n\n    connecToServer() {\n       fetch('/');\n     }\n\n\n    setUser(userName, id, garden, world, worldChosen, seeds, lastLogin, newUser) {\n      this.setState({\n        userName: userName,\n        id: id,\n        garden: garden,\n        world: world,\n        worldChosen: worldChosen,\n        seeds: seeds,\n        lastLogin: lastLogin,\n        today: setDate().stamp,\n        newUser: newUser\n      })\n        }\n\n    newWorld() {\n      const newWorld = new WorldData()\n      this.setState({\n        world: newWorld\n      })\n    }\n\n    saveWorld() {\n      this.setState({\n        worldChosen: true\n      })\n      saveGarden(this.state.id, [], this.state.world, true, this.state.seeds)\n    }\n\n\n\n    render() {\n    return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n        <Router>\n            <NavBar user={this.state.userName} setUser={this.setUser} />\n          </Router>\n          {this.state.userName ?\n            <SeedBank\n              id={this.state.id}\n              userName={this.state.userName}\n              newWorld={this.newWorld}\n              world={this.state.world}\n              worldChosen={this.state.worldChosen}\n              saveWorld={this.saveWorld}\n              seeds={this.state.seeds}\n              garden={this.state.garden}\n              lastLogin={this.state.lastLogin}\n              today={this.state.today}\n            /> :\n            <div>\n              <LogIn setUser={this.setUser} />\n              <SignUp setUser={this.setUser} />\n            </div> }\n    </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}