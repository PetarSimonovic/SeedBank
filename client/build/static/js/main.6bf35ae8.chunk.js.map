{"version":3,"sources":["functions/CalculateAchievement.js","functions/CalculateDays.js","functions/CreateId.js","components/Balloons.jsx","components/Camera.jsx","components/Firmament.jsx","components/Garden.jsx","components/Grass.jsx","images/seedbankProto.png","components/Logo.jsx","components/Links.jsx","components/NavBar.jsx","components/Noticeboard.jsx","components/Plant.jsx","gameObjects/GetSeed.js","components/SeedBox.jsx","components/Seeds.jsx","components/Sun.jsx","components/World.jsx","components/Worlds.jsx","functions/LoadGarden.js","functions/Sample.js","api/index.js","functions/SaveGarden.js","functions/SetDate.js","functions/Randomiser.js","gameObjects/Balloon.js","gameObjects/WorldData.js","pages/SignUp.jsx","gameObjects/newSeeds.js","pages/LogIn.jsx","pages/SeedBank.jsx","gameObjects/getBalloons.js","functions/CreatePlant.js","app/index.js","index.js"],"names":["calculateAchievement","seeds","array","duplicate","newSeed","length","seedBank","checkDuplicate","Math","floor","random","unlock","updatedSeeds","index","seed","type","console","log","quantity","push","updateSeeds","calculateDays","start","end","date1","Date","diffInTime","getTime","round","createId","uuidv4","createBalloons","props","balloons","balloonCollection","removeBalloon","balloon","claimed","position","colour","Balloon","mesh","useRef","useFrame","state","delta","current","rotation","y","ref","scale","onClick","seedChoice","BalloonBody","BalloonCone","BalloonString","BalloonCrate","args","color","Balloons","extend","OrbitControls","Camera","useThree","camera","domElement","gl","controls","update","autoRotate","autoRotateSpeed","enabled","Firmament","Sky","turbidity","distance","sunPosition","inclination","elevation","exposure","mieDirectionalG","mieCoefficient","rayleigh","azimuth","Garden","id","lookat","fallback","sowPlant","world","plants","today","Grass","event","Wrapper","styled","a","attrs","className","Logo","href","src","logo","height","alt","Component","Links","Fragment","to","this","user","Nav","nav","NavBar","setUser","Noticeboard","date","setDate","Billboard","onclick","follow","lockX","lockY","lockZ","Text","fontSize","day","month","year","buildPlant","x","z","bloom","leafColour","stemColour","flowerColour","getSeed","growth","stemLength","plant","Base","Stem","leaves","Leaf","Flower","Plant","stopPropagation","handleClick","SeedBox","SeedButton","button","Panel","div","seedCollection","selectSeed","selectSeedtype","Seeds","Sun","sunRef","intensity","createStalactites","createdStalactites","stalactites","stalactite","Stalactite","geometry","top","depth","sections","World","WorldButton","newWorld","saveWorld","loadGarden","garden","parsedGarden","stamp","parsedPlant","calculateGrowth","key","plantDate","days","sample","api","axios","create","baseURL","apis","addUser","payload","post","getUser","name","get","updateGarden","put","saveGarden","chosen","savedSeeds","savedGarden","extractPlants","JSON","stringify","worldChosen","lastLogin","then","res","extractedPlants","savedPlant","getDate","getMonth","getFullYear","randomiser","range","max","min","generatePosition","WorldData","generateStalactites","offset","generateStalactite","stalactiteGeometry","stalactitePosition","stalactiteMin","stalactiteY","stalactiteXZ","Title","h1","Label","label","InputText","input","Button","CancelButton","SignUp","handleChangeInputName","target","value","setState","handleChangeInputEmail","email","handleChangeInputPassword","password","handleAddUser","window","alert","data","onChange","LogIn","handleGetUser","_id","parse","SeedBank","useState","setPlants","chosenSeed","setChosenseed","setSeeds","seedIndex","setSeedindex","login","dateDifference","getBalloons","setBalloons","selectedSeed","increment","useEffect","fivePlants","achievementCount","newSeeds","checkAchievements","removedBalloon","prev","filter","newPlant","point","createPlant","Worlds","App","userName","chosenWorld","bind","connecToServer","fetch","style","width","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6bf35ae8.chunk.js","sourcesContent":["\nexport default function calculateAchievement(seeds) {\n  let duplicate = true\n  let unlock = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    return seeds\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds)\n  }\n}\n  return updateSeeds(seeds, newSeed, unlock)\n}\n\n\nfunction sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n\nfunction updateSeeds(seeds, newSeed, unlock) {\n  const updatedSeeds = []\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      console.log(newSeed)\n      seed.quantity += newSeed.quantity\n      console.log(seed)\n    }\n    updatedSeeds.push(seed)\n  }\n  if (unlock) { updatedSeeds.push(newSeed) }\n  return updatedSeeds\n}\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n","\n// calculates the difference in days between two dates using ISO strings for start and end\n\nexport default function calculateDays(start, end) {\n    const date1 = new Date(start);\n    const date2 = new Date(end);\n\n    // One day in milliseconds\n    const oneDay = 1000 * 60 * 60 * 24;\n\n    // Calculating the time difference between two dates\n    const diffInTime = date2.getTime() - date1.getTime();\n    //console.log(\"Time diff\")\n    //console.log(diffInTime)\n\n    // Calculating the no. of days between two dates\n    const diffInDays = Math.round(diffInTime / oneDay);\n\n    return diffInDays;\n}\n","\n// generates a unique ID number \n\n\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport default function createId() {\n  return uuidv4()\n}\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions'\n\nfunction Balloons(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      {createBalloons(props)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createBalloons(props) {\n  console.log(\"In createBalloons\")\n  console.log(props.balloons.length)\n  const balloonCollection = []\n  const {balloons, removeBalloon, updateSeeds, seeds} = props\n  console.log(balloons)\n  for (let index = 0; index < balloons.length; index++) {\n  const balloon = balloons[index]\n  balloonCollection.push(\n    <Balloon\n    key={createId()}\n    claimed={balloon.claimed}\n    updateSeeds={updateSeeds}\n    removeBalloon={removeBalloon}\n    seeds={seeds}\n    position={balloon.position}\n    index={index}\n    colour={balloon.colour} />\n  )\n  }\n  return balloonCollection\n}\n\nfunction Balloon(props) {\n  const mesh = useRef()\n\n  useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  const handleClick = () => {\n    if (!props.claimed) {\n    const seedChoice = Math.floor(Math.random() * props.seeds.length)\n    props.updateSeeds(3, seedChoice)\n    props.removeBalloon(props.index)\n  }\n  }\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={0.8}\n      onClick={handleClick}\n      >\n      <BalloonBody colour={props.colour} />\n      <BalloonCone colour = {props.colour} position={[0, -0.18, 0]}/>\n      <BalloonString position={[0, -0.15, 0]}/>\n      <BalloonCrate position={[0, -0.48, 0]}/>\n    </mesh>\n\n      </group>\n\n  )\n }\n\n function BalloonBody(props) {\n\n   const mesh = useRef()\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={1}\n       >\n   <dodecahedronGeometry args={[0.153, 8]} />\n   <meshToonMaterial color={props.colour} />\n   </mesh>\n )\n }\n\n function BalloonString(props) {\n   const mesh = useRef()\n   // Set up state for the hovered and active state\n\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={1}\n       >\n       <cylinderGeometry args={[0.005, 0.005, 0.5, 3]} />\n       <meshToonMaterial color={'#16161D'} />\n     </mesh>\n   )\n  }\n\n  function BalloonCone(props) {\n    const mesh = useRef()\n    // Set up state for the hovered and active state\n\n\n    return (\n      <mesh\n        {...props}\n        ref={mesh}\n        scale={1}\n        >\n        <cylinderGeometry args={[0.15, -0.01, 0.3, 16]} />\n        <meshToonMaterial color={props.colour} />\n      </mesh>\n    )\n   }\n\n   function BalloonCrate(props) {\n     const mesh = useRef()\n     // Set up state for the hovered and active state\n\n\n     return (\n       <mesh\n         {...props}\n         ref={mesh}\n         scale={1}\n         >\n         <boxGeometry args={[0.15, 0.15, 0.15]} />\n         <meshToonMaterial color={'#7f5539'} />\n       </mesh>\n     )\n    }\n\n\nexport default Balloons\n","import { extend, useThree, useFrame } from \"@react-three/fiber\";\nimport React, { useRef } from \"react\";\nimport { OrbitControls } from 'three-stdlib';\nextend({ OrbitControls });\n\n\nconst Camera = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls component.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return <orbitControls\n          ref={controls}\n          position={[0, -10, 0]}\n          args={[camera, domElement]}\n          autoRotate={true}\n          autoRotateSpeed={0.2}\n          enabled={true}\n          />;\n};\n\nexport default Camera\n","import { Sky } from '@react-three/drei'\n\nexport default function Firmament(props) {\n  return (\n    <Sky\n      turbidity={0.01}\n      distance={450000} // Camera distance (default=450000)\n      sunPosition={[0, 1, 0]} // Sun position normal (defaults to inclination and azimuth if not set)\n      inclination={0.47} // Sun elevation angle from 0 to 1 (default=0)\n      elevation={0.6}\n      exposure={0.3}\n      mieDirectionalG={0.04}\n      mieCoefficient={0.0045}\n      rayleigh={0.1}\n      azimuth={0.6} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n      {...props} // All three/examples/jsm/objects/Sky props are valid\n    />  )\n}\n","import '../style/App.css';\nimport React, { Suspense } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport {  Camera, Sun, World, Firmament, Noticeboard, Balloons } from '../components';\n\n\n// Garden displays \"the world\", rendering the sun, the sky, the grass and plants\n// Receives instructions/props from the SeedBank page\n\nfunction Garden(props) {\n\n  return (\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5], lookat: [0, 0, 0] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n       <World sowPlant={props.sowPlant} position={[0, 0, 0]} world={props.world} />\n      {props.plants}\n      <Balloons\n      removeBalloon={props.removeBalloon}\n      updateSeeds={props.updateSeeds}\n      balloons={props.balloons}\n      seeds={props.seeds} />\n     </Suspense>\n     <Sun />\n     <Firmament />\n     <Noticeboard today={props.today}/>\n    </Canvas>\n  )\n\n}\n\n//       <SeedBox seeds={props.seeds} position={[0, 0.2, 0]}/>\n\nexport default Garden\n","import React, { useRef } from \"react\";\n\n\n\n// The plane on which plants grow\n\nfunction Grass(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => props.sowPlant(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={'#a7c957'} />\n    </mesh>\n  )\n}\n\nexport default Grass\n","export default __webpack_public_path__ + \"static/media/seedbankProto.6cdc7966.png\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport logo from '../images/seedbankProto.png';\n\nconst Wrapper = styled.a.attrs({\n    className: 'navbar-brand',\n})``\n\nclass Logo extends Component {\n    render() {\n        return (\n            <Wrapper href=\"https://example.com\">\n                <img src={logo} height=\"50\" alt=\"seedbank\" />\n            </Wrapper>\n        )\n    }\n}\n\nexport default Logo\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\nclass Links extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Link to=\"/\" className=\"navbar-brand\">\n                    SeedBank\n                </Link>\n                    <Link to=\"/\" className=\"navbar-brand\">\n                     { this.props.user }\n                    </Link>\n              </React.Fragment>\n        )\n    }\n}\n\nexport default Links\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport Logo from './Logo';\nimport Links from './Links';\n\n\nconst Nav = styled.nav.attrs({\n    className: 'navbar navbar-expand-lg navbar-dark bg-dark',\n})`\n    margin-bottom: 20 px;\n`\n\nclass NavBar extends Component {\n    render() {\n        return (\n                <Nav height=\"50%\">\n                    <Logo />\n                    <Links user={this.props.user} setUser={this.props.setUser} />\n                </Nav>\n        )\n    }\n}\n\nexport default NavBar\n","import { Billboard, Text } from '@react-three/drei'\nimport { setDate } from '../functions'\n\n\nfunction Noticeboard(props) {\n  const date = setDate()\n\nreturn (\n\n  <Billboard\n    position={[0.5, 1, 6]}\n    args={[20, 200]}\n    onclick={console.log(\"clicked\")}\n    follow={true}\n    lockX={false}\n    lockY={false}\n    lockZ={false} // Lock the rotation on the z axis (default=false)\n    >\n    <Text fontSize={0.5} color={\"#857c8d\"}>{date.day} {date.month} {date.year}</Text>\n    </Billboard>\n)\n}\n\nexport default Noticeboard\n","import React, { useRef } from \"react\";\nimport { createId } from '../functions'\nimport { getSeed } from '../gameObjects'\n\n\n// Creates a Plant based on the props that it receives\n\nfunction Plant(props) {\n\n  const mesh = useRef()\n\n  // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"This plant is:\")\n    console.log(props)\n  }\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      onClick={(event) => handleClick(event)}\n      scale={0.2}\n    //  onPointerOver={(event) => setHover(true)}\n    //  onPointerOut={(event) => setHover(false)}\n    >\n      {buildPlant(props)}\n    </mesh>\n    </group>\n\n  )\n}\n\n// buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\nfunction buildPlant(props) {\n\n  console.log(\"Plant props\")\n  const [x, y, z] = props.position\n  console.log(x)\n  console.log(y)\n  console.log(z)\n  const {bloom, leafColour, stemColour, flowerColour} = getSeed(props.type)\n  let growth = props.growth\n\n  // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom\n  }\n\n  // the length of the stem is based on the plant's growth\n\n  const stemLength = growth/24\n\n\n  // push the Base and Stem into the plant array\n\n  let plant = [\n    <Base key={createId()} />,\n    <Stem key={createId()} stemColour={stemColour} stemLength={stemLength} position={[0, 0.05, 0]}/>,\n  ]\n\n  // Add leaves relative to the plant's growth level\n\n  for (let leaves = 0; leaves <= growth; leaves++) {\n    plant.push(\n    <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n    <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n  )\n  }\n\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n  plant.push(\n    <Flower key={createId()} color={flowerColour} position={[0, 0.1 + (growth/11), 0]} />\n  )\n}\n\n  return plant\n\n}\n\nfunction Base(props) {\n\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n     >\n    <dodecahedronGeometry args={[0.035, 2]} />\n    <meshToonMaterial color={'#947352'} />\n  </mesh>\n)\n\n\n}\n\nfunction Stem(props) {\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={0.5}\n\n    >\n    <cylinderGeometry args={[0.01, 0.03, 0.3 + props.stemLength, 12]} />\n    <meshToonMaterial color={props.stemColour} />\n    </mesh>\n  )\n}\n\n\nfunction Leaf(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <cylinderGeometry args={[0.02, 0.05, 0.02, 6]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\nfunction Flower(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <dodecahedronGeometry args={[0.06]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\n\n\nexport default Plant\n","\n export default function getSeed(seed) {\n\n   switch(seed) {\n     case \"generic_plant\":\n        return {bloom: 1, leafColour: '#377F34', stemColour: '#499B4A', flowerColour: '#832134'}\n     case \"tulip\":\n        return {bloom: 2, leafColour: '#2D5A27', stemColour: '#567d46', flowerColour: '#ff878d'}\n     case \"sunflower\":\n        return {bloom: 4, leafColour: '#75ae92', stemColour: '#82ac80', flowerColour: '#f8ec89'}\n    case \"crocus\":\n      return {bloom: 1, leafColour: '#76c893', stemColour: '#52b69a', flowerColour: '#3a0ca3'}\n    case \"snowdrop\":\n      return {bloom: 1, leafColour: '#76c893', stemColour: '#52b69a', flowerColour: '#f8f9fa'}\n    case \"rose\":\n      return {bloom: 5, leafColour: '#499B4A', stemColour: '#75ae92', flowerColour: '#9e0059'}\n    case \"venusFlyTrap\":\n      return {bloom: 7, leafColour: '#ccd5ae', stemColour: '#ccd5ae', flowerColour: '#ccd5ae'}\n     default:\n      return\n   }\n\n}\n","import { RoundedBox, Text } from '@react-three/drei'\nimport React, { useRef, useState } from \"react\";\n\n\n// Creates a button that 'clicks'\n\nfunction SeedBox(props) {\n\n  const mesh = useRef()\n  const [clickScale, setClickscale] = useState(1)\n\n  const handleClick = () => {\n    setClickscale(0.97)\n    setTimeout(() => {\n      setClickscale(1)\n    }, 100)\n  };\n\n\nreturn (\n  <mesh\n  {...props}\n  ref={mesh}\n  onClick={handleClick}\n  scale={clickScale}\n  >\n  <group>\n  <RoundedBox args={[0.5, 0.5, 0.5]} radius={0.05} smoothness={4} {...props}>\n  <meshToonMaterial attach=\"material\" color=\"#7f5539\" />\n  </RoundedBox>\n  <Text position={[0, 0.46, 0]} color=\"black\" rotation={[4.713, 0, 0]}> Seeds </Text>\n  </group>\n\n  </mesh>\n\n)\n}\n\nexport default SeedBox\n","import styled from 'styled-components';\nimport React from 'react';\nimport { createId } from '../functions'\n\n// Generates a panel that contains buttons of available Seeds\n// PROTOTYPE ONLY: need to design an interface that coould contain an indefinite number of seeds or objects\n\nconst SeedButton = styled.button`\ncolor: palevioletred;\nfont-size: 1em;\nmargin: 1em;\npadding: 0.25em 1em;\nborder: 2px solid palevioletred;\nborder-radius: 3px;\n`;\n\nconst Panel = styled.div`\n  background-color: lightgrey;\n  `;\n\n\nfunction Seeds(props) {\n\n  return (\n    <Panel>\n      {seedCollection(props)}\n    </Panel>\n  )\n}\n\nfunction seedCollection(props) {\n\n  const {seeds, selectSeed} = props\n  let seedCollection = []\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    seedCollection.push(\n      <SeedButton key={createId()} onClick={(event) => selectSeed(seed.type, index)} selectSeedtype={seed.type} quantity={seed.quantity} >\n      {seed.type} {seed.quantity}\n      </SeedButton>\n    )\n  }\n\n    return seedCollection\n}\n\nexport default Seeds\n","import { useRef } from 'react';\n// directionaLight is Three.js's daylight equivalent\n// values are arbitraty for now\n\nfunction Sun(props) {\n  const mesh = useRef()\n  const sunRef = useRef()\n\n  return (\n  <group>\n    <mesh\n      ref={sunRef}\n      {...props}\n      >\n    <directionalLight position={[0, 0.5, 1]} intensity={0.7} />\n    </mesh>\n\n  </group>\n  )\n}\n\nexport default Sun\n","import React, { useRef } from \"react\";\nimport { createId } from '../functions'\nimport { Grass } from './'\n\n\n// The plane on which plants grow\n\nfunction World(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      {createStalactites(props)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createStalactites(props) {\n  const world = props.world\n  const createdStalactites = []\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index]\n    createdStalactites.push( <Stalactite key={createId()} sowPlant={props.sowPlant} args={stalactite.geometry} position={stalactite.position} colour={stalactite.colour} />)\n  }\n\n  return createdStalactites\n}\n\nfunction Stalactite(props) {\n  const mesh = useRef()\n  let [top, bottom, depth, sections] = props.args\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n  }\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={props.colour}  />\n      <Grass sowPlant={props.sowPlant} position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} />\n    </mesh>\n    </group>\n  )\n}\n\nfunction SeedBoxStalactite(props) {\n  const mesh = useRef()\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n  }\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={[0.2, 0.01, 0.5, 12]} />\n      <meshToonMaterial color={'#FF0000'}  />\n    </mesh>\n    </group>\n  )\n}\n\nexport default World\n","import styled from 'styled-components';\nimport React from 'react';\n\n// Generates a panel that contains buttons of available Seeds\n// PROTOTYPE ONLY: need to design an interface that coould contain an indefinite number of seeds or objects\n\nconst WorldButton = styled.button`\ncolor: palevioletred;\nfont-size: 1em;\nmargin: 1em;\npadding: 0.25em 1em;\nborder: 2px solid palevioletred;\nborder-radius: 3px;\n`;\n\nconst Panel = styled.div`\n  background-color: lightgrey;\n  `;\n\n\nfunction Seeds(props) {\n\n  return (\n    <Panel>\n    <WorldButton onClick={props.newWorld}> New Garden </WorldButton>\n    <WorldButton onClick={props.saveWorld}> Save Garden </WorldButton>\n  </Panel>\n  )\n}\n\nexport default Seeds\n","import { Plant } from '../components'\nimport { setDate, calculateDays } from '../functions'\n\n// Reads a saved Garden and creates an array of plants ready to render\n\nexport default function loadGarden(garden) {\n  let parsedGarden = []\n  const today = setDate(Date()).stamp\n  for (let plant = 0; plant < garden.length; plant ++ ) {\n    const parsedPlant = garden[plant]\n    console.log(\"Plant is\")\n    console.log(parsedPlant)\n    const growth = calculateGrowth(parsedPlant.date, today)\n    parsedGarden.push(<Plant key={parsedPlant.key} growth={growth} date={parsedPlant.date} position={parsedPlant.position} type={parsedPlant.type}/>)\n  }\n  console.log(parsedGarden)\n  return parsedGarden\n}\n\nfunction calculateGrowth(plantDate, today) {\n  console.log(\"Plant date is\")\n  console.log(plantDate.stamp)\n  console.log(\"Today is\")\n  console.log(today)\n  const days = calculateDays(plantDate.stamp, today)\n  console.log(`${days} days have passed`)\n  return days\n}\n\n\n\n\n//module.exports = parseGarden;\n","\n\nexport default function sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n\n}\n","import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: \"/api\",\n})\n\nexport const addUser = payload => api.post(`/user`, payload)\nexport const getUser = name => api.get(`/user/${name}`)\nexport const updateGarden = (id, payload) => api.put(`/user/${id}`, payload)\n\n\nconst apis = {\n    addUser,\n    getUser,\n    updateGarden\n}\n\nexport default apis\n","import api from '../api';\nimport { setDate } from './'\n\n// strips out react components from the state garden array and saves plant props as an object that's easy to parse\n// Needs error handling!\n\n\nexport default async function saveGarden(id, plants, newWorld, chosen, savedSeeds){\n  let savedGarden = extractPlants(plants)\n  const garden = {\"garden\" : savedGarden}\n  const world = {\"world\" : JSON.stringify(newWorld)}\n  const seeds = {\"seeds\": savedSeeds}\n  const worldChosen = {\"worldChosen\" : chosen}\n  const date = setDate()\n  const lastLogin  = { \"lastLogin\" : date.stamp }\n  const payload = {garden, world, worldChosen, seeds, lastLogin}\n  console.log(\"Attempting to save garden\")\n  console.log(payload)\n  console.log(id)\n  await api.updateGarden(id, payload).then(res => {\n        console.log('Garden updated successfully')\n    })\n}\n\nfunction extractPlants(plants) {\n  let extractedPlants = []\n  for (let plant = 0; plant < plants.length; plant ++) {\n    const key = plants[plant].key\n    const parsedPlant = plants[plant].props\n    const savedPlant = {key: key, growth: parsedPlant.growth, date: parsedPlant.date, position: parsedPlant.position, type: parsedPlant.type}\n    extractedPlants.push(savedPlant)\n  }\n  return extractedPlants\n}\n","\n\n// creates a date object that contains day, month, year and stamp in ISO format\n\nexport default function setDate() {\n  const date = new Date()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n  const stamp = `${year}/${month}/${day}`\n  return {year: year, month: month, day: day, stamp: stamp }\n}\n","\n// accepts a range object and returns a random number\n// useed to generate terrain and balloons\n\nexport default function randomiser(range) {\n  return Math.random() * (range.max - range.min) + range.min\n}\n","import {sample, randomiser, createId, calculateDays} from '../functions'\n\n\nexport default class Balloon {\n  constructor(seeds) {\n    this.id = createId()\n    this.colour = generateColour()\n    this.position = generatePosition()\n    this.claimed = false\n  }\n}\n\n\nfunction generateColour() {\n  const colours = [\n    \"#db504a\",\n    \"#ff6f59\",\n    \"#ffe200\",\n    \"#9bf6ff\",\n    '#ffd6a5',\n    '#caffbf',\n    '#ffc6ff',\n    '#bdb2ff',\n    '#e9ff70',\n    '#ff70a6',\n    '#ff9770'\n  ]\n  return sample(colours)\n}\n\nfunction generatePosition() {\n  const x = {max: 2, min: -2}\n  const y = {max: 1.8, min: 1.5}\n  const z = {max: 1.8, min: -1.8}\n\n  return [randomiser(x), randomiser(y), randomiser(z)]\n}\n","\n// creates the data used to generate the Stalactite components\n\nimport {sample, randomiser} from '../functions'\n\n\nconst stalactiteCount = 10\n\nexport default class WorldData {\n\n  constructor(stalactites = generateStalactites())  {\n    this.stalactites = stalactites\n  }\n\n}\n\n\n\nfunction generateStalactites() {\n  let stalactites = []\n  let offset = 0\n  for (let stalactite = 0; stalactite < stalactiteCount; stalactite++) {\n    stalactites.push(generateStalactite(offset))\n    offset += 0.1\n  }\n  return stalactites\n}\n\nfunction earthColour() {\n  const colours = [\n    '#6C6460',\n    '#8a817c',\n    '#6c757d',\n  ]\n\n    return sample(colours)\n}\n\nfunction generateStalactite(offset) {\n  return { geometry: stalactiteGeometry(offset), position: stalactitePosition(offset), colour: earthColour() }\n}\n\nfunction stalactiteGeometry(offset) {\n\n  const stalactiteMax = {max: 1.3 - offset, min: 1 - offset}\n  const stalactiteMin = {max: 0.8 - offset, min: 0.01}\n  const stalactiteDepth = {max: 2.3, min: 1}\n  const stalactiteSegments = {max: 12, min: 6}\n\n  return [\n    randomiser(stalactiteMax),\n    randomiser(stalactiteMin),\n    randomiser(stalactiteDepth),\n    randomiser(stalactiteSegments)\n  ]\n\n}\n\nfunction stalactitePosition(offset) {\n\n  const stalactiteY = {max: 0 + offset, min: 1 + offset }\n  const stalactiteXZ = {max: 0.5, min: -0.5  }\n  return [\n    randomiser(stalactiteXZ),\n    -randomiser(stalactiteY),\n    randomiser(stalactiteXZ)\n  ]\n\n}\n\n\n\n\n\n\n\n/*\n\nOriginal stalactite settings:\n\nEarth disc:\n<cylinderGeometry args={[1.65, 1, 0.68, 9]}  />\n<meshToonMaterial color={'#8a817c'} />\n\nfunction createStalactites() {\n  return [\n    <Stalactite args={[1.6, 0.8, 1, 8]} position={[0.1, -0.28, 0, ]} colour={'#6c757d'}/>,\n    <Stalactite args={[1.3, 0.7, 1, 7]} position={[0.12, -0.5, 0.1]} colour={'#8a817c'} />,\n    <Stalactite args={[1.4, 0.55, 1.3, 4]} position={[-0, -0.7, 0.05]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.3, 2, 8]} position={[0, -0.9, -0.2]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.01, 2, 4]} position={[0, -1.9, -0.5]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.03, 2, 12]} position={[0, -0.9, 1.0]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.2, 1, 8]} position={[-0, -1.3, .40]} colour={'#8a817c'} />,\n    <Stalactite args={[0.7, 0.1, 1, 9]} position={[-0, -1.9, 0.30]} colour={'#6c757d'}/>,\n    <Stalactite args={[0.4, 0.01, 3, 8]} position={[0, -2.3, 0]} colour={'#8a817c'} />,\n\n\n\n  ]\n}\n*/\n","import React, { Component } from 'react';\nimport { WorldData, newSeeds } from '../gameObjects'\nimport { setDate } from '../functions'\n\n\nimport api from '../api';\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputEmail = async event => {\n        const email = event.target.value\n        this.setState({ email })\n    }\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    handleAddUser = async () => {\n        const { name, email, password } = this.state\n        const newWorld = new WorldData()\n        const world = JSON.stringify(newWorld)\n        const seeds = newSeeds()\n        const worldChosen = false\n        const date = setDate()\n        const lastLogin = date.stamp\n        const payload = { name, email, password, world, worldChosen, seeds, lastLogin }\n        console.log(payload)\n\n        await api.addUser(payload).then(res => {\n            window.alert(`User added`)\n            this.setState({\n                name: '',\n                email: '',\n                password: '',\n            })\n            console.log(\"SEEDS on SIGN UP\")\n            console.log(seeds)\n            this.props.setUser(name, res.data.id, [], newWorld, false, seeds, lastLogin)\n        })\n\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Sign Up</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Email: </Label>\n                <InputText\n                    type=\"text\"\n                    value={email}\n                    onChange={this.handleChangeInputEmail}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleAddUser}>Sign Up</Button>\n                <CancelButton href={'/movies/list'}>Cancel</CancelButton>\n            </Wrapper>\n        )\n    }\n}\n\nexport default SignUp\n","export default function newSeeds() {\n\n  return [\n    {type: \"generic_plant\", quantity: 3},\n    {type: \"tulip\", quantity: 3}\n  ]\n\n}\n","import React, { Component } from 'react';\nimport { loadGarden } from '../functions'\nimport api from '../api';\n\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\n\nclass LogIn extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    handleGetUser = async () => {\n\n        await api.getUser(this.state.name).then(res => {\n          console.log(res)\n            console.log(\"Name is \" + res.data.data.name)\n            if (this.state.password === res.data.data.password) {\n              const name = res.data.data.name\n              const id = res.data.data._id\n              const garden = loadGarden(res.data.data.garden)\n              const world = JSON.parse(res.data.data.world)\n              const seeds =  res.data.data.seeds\n              const worldChosen = res.data.data.worldChosen\n              const lastLogin = res.data.data.lastLogin\n\n              window.alert(`Welcome back ${name}`)\n              this.props.setUser(name, id, garden, world, worldChosen, seeds, lastLogin)\n            } else {\n              window.alert(`Incorrect password`)\n            }\n        })\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Log In</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleGetUser}>Log In</Button>\n            </Wrapper>\n        )\n    }\n}\n\nexport default LogIn\n","import '../style/App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { Seeds, Garden, Worlds } from '../components';\nimport { calculateAchievement, saveGarden, createPlant } from '../functions'\nimport { getBalloons, Balloon } from '../gameObjects'\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden) //  an array of plant components\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seeds, setSeeds] = useState(props.seeds) //  an array of the player's available seeds\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState(getBalloons(plants, seeds, props.lastLogin, props.today))\n\n\n  console.log(\"SEEDS IN SEEDBANK IS\")\n  console.log(seeds)\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      const newPlant = createPlant(event, chosenSeed)\n      setChosenseed(\"\")\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n      updateSeeds(-1)\n    }\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n    setChosenseed(selectedSeed)\n    setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, index = seedIndex) => {\n    console.log(\"UPDATING SEEDS\")\n    console.log(seeds)\n    const updatedSeeds = [...seeds]\n    updatedSeeds[index].quantity += increment\n    setSeeds(updatedSeeds)\n    setSeedindex(null)\n  }\n\n  const removeBalloon = (index) => {\n    let removedBalloon = balloons[index]\n    removedBalloon.claimed = true\n    // setBalloons: creates a new array based on the previous one, removing the initial balloon, then adds a copy of the old balloon with 'claimed' set to true\n    setBalloons(\n      (prev) => {\n        return [prev.filter(balloon => balloon.id !== removedBalloon.id), removedBalloon]\n      }\n    )\n    console.log(balloons)\n  }\n\n  const checkAchievements = () => {\n    console.log(\"Checking achievements\")\n    const fivePlants = plants.length % 5\n    console.log(\"FivePlants\")\n    console.log(fivePlants)\n    console.log(\"Achievement Count\")\n    const achievementCount = plants.length / 5 // how many multuples of five?\n    const startingSeeds = 2 // offset for the starting seeds\n    console.log(achievementCount)\n    console.log(achievementCount + startingSeeds)\n    console.log(seeds.length)\n    if (fivePlants === 0 && plants.length > 0 && seeds.length < (achievementCount + startingSeeds)) {\n      console.log(\"Achievement!\")\n      const newSeeds = calculateAchievement(seeds)\n      console.log(\"New seeds is\")\n      console.log(newSeeds)\n      setSeeds(newSeeds)\n\n    }\n    console.log(\"SEEDS is\")\n    console.log(seeds)\n  }\n\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen, seeds)\n    checkAchievements()\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Garden\n    plants={plants}\n    balloons={balloons}\n    world={props.world}\n    seeds={seeds}\n    selectSeed={selectSeed}\n    removeBalloon={removeBalloon}\n    updateSeeds={updateSeeds}\n    sowPlant={sowPlant} />\n    {props.worldChosen ? <Seeds seeds={seeds} className=\"App-header\" selectSeed={selectSeed} /> : <Worlds className=\"App-header\" newWorld={props.newWorld} saveWorld={ props.saveWorld } />}\n  </div>\n  );\n}\n\nexport default SeedBank;\n","import {sample, randomiser, createId, calculateDays} from '../functions'\nimport { Balloon } from './'\n\n\nexport default function getBalloons(garden, seeds, login, today) {\n  console.log(\"CAlculating balloondata\")\n  console.log(\"Last Login \" + login)\n  console.log(\"Today \" + today)\n  const dateDifference = calculateDays(login, today)\n  console.log(dateDifference)\n  let balloons = []\n  // if (garden.length % 6 === 0) {\n  //   console.log(\"Balloon incoming!\")\n  // }\n  if (calculateDays(login, today) > 0 ) {\n    balloons.push(new Balloon())\n}\n\n  return balloons\n}\n","import { setDate, createId } from './'\nimport { Plant } from '../components'\n\n// Creates a new Plant, with a uniqueID, growth initialised at 0 and a new date\n\nexport default function createPlant(event, seed) {\n  console.log(\"In createPlant\")\n\n  const position = [event.point.x, event.point.y, event.point.z]\n  const key = createId()\n  const date = setDate()\n  const newPlant = <Plant key={key} growth={0} date={date} position={position} type={seed} />\n\n  return newPlant\n}\n","import React from 'react'\nimport { WorldData } from '../gameObjects'\nimport { saveGarden, setDate } from '../functions'\n\n\nimport './App.css';\n\n\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { NavBar } from '../components'\nimport { SignUp, LogIn, SeedBank } from '../pages'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {\n        userName: \"\",\n        id: 0,\n        garden: [],\n        world: {},\n        chosenWorld: false,\n        seeds: [],\n        lastLogin: \"\"\n      }\n      this.setUser = this.setUser.bind(this)\n      this.newWorld = this.newWorld.bind(this)\n      this.saveWorld = this.saveWorld.bind(this)\n      this.connecToServer = this.connecToServer.bind(this)\n    }\n\n    componentDidMount() {\n      this.connecToServer();\n      }\n\n    connecToServer() {\n       fetch('/');\n     }\n\n\n    setUser(userName, id, garden, world, worldChosen, seeds, lastLogin) {\n      console.log(\"SETTING USER\")\n      this.setState({\n        userName: userName,\n        id: id,\n        garden: garden,\n        world: world,\n        worldChosen: worldChosen,\n        seeds: seeds,\n        lastLogin: lastLogin,\n        today: setDate().stamp\n      })\n      console.log(\"User is \" + this.state.id + \" \" + this.state.userName)\n      console.log(\"Last login \" + this.state.lastLogin)\n      console.log(\"Today \" + this.state.today)\n      console.log(\"Seeds is\")\n      console.log(this.state.seeds)\n        }\n\n    newWorld() {\n      const newWorld = new WorldData()\n      this.setState({\n        world: newWorld\n      })\n    }\n\n    saveWorld() {\n      this.setState({\n        worldChosen: true\n      })\n      saveGarden(this.state.id, [], this.state.world, true, this.state.seeds)\n    }\n\n\n\n    render() {\n    return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n        <Router>\n            <NavBar user={this.state.userName} setUser={this.setUser} />\n          </Router>\n          {this.state.userName ?  <SeedBank id={this.state.id} newWorld={this.newWorld} world={this.state.world} worldChosen={this.state.worldChosen} saveWorld={this.saveWorld} seeds={this.state.seeds} garden={this.state.garden} lastLogin={this.state.lastLogin} today={this.state.today} /> : <div><LogIn setUser={this.setUser} /> <SignUp setUser={this.setUser} /></div> }\n    </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}