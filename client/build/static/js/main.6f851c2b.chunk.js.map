{"version":3,"sources":["api/index.js","functions/AddPlant.js","functions/AddSeeds.js","functions/CalculateAchievement.js","functions/CalculateDays.js","functions/CreateId.js","components/Balloons/Balloons.jsx","functions/LoadBalloons.js","components/Balloons/Balloon.jsx","components/Cloud/BalloonShop.jsx","functions/BalloonColours.js","components/Cloud/Cloud.jsx","components/Cloud/Clouds.jsx","components/Cloud/CloudKeyBoard.jsx","components/Camera.jsx","components/Garden/FakeGrass.jsx","components/Sky/Firmament.jsx","components/Friends.jsx","functions/LoadFriends.js","components/Garden/Grass.jsx","components/Garden/Garden.jsx","components/Balloons/IntroBalloons.jsx","images/seedbankProto.png","components/Logo.jsx","components/Links.jsx","components/NavBar.jsx","components/Garden/Plant.jsx","gameObjects/GetSeed.js","components/Cloud/SeedCloud.jsx","components/Garden/Seeds.jsx","components/Sky/Sun.jsx","functions/CreatePlantComponent.js","functions/Friend.js","functions/LoadPlants.js","functions/LoadSeeds.js","functions/MakeFriendRequest.js","functions/MakeFriends.js","functions/Sample.js","functions/SaveGarden.js","functions/SetDate.js","functions/SendBalloon.js","functions/Randomiser.js","functions/UpdateBalloons.js","functions/UpdateSeed.js","gameObjects/Balloon.js","gameObjects/Plant.js","gameObjects/WorldData.js","gameObjects/Seed.js","pages/SignUp.jsx","pages/LogIn.jsx","pages/SeedBank.jsx","functions/CreatePlants.js","app/index.js","index.js"],"names":["api","axios","create","baseURL","apis","addUser","payload","post","getUser","name","get","updateGarden","id","put","addBalloons","getBalloons","userId","updateBalloons","balloonId","getFriends","addFriends","getFriendByName","friendName","addSeeds","getSeeds","updateSeeds","type","addPlant","getPlants","updatePlant","plant","a","console","log","date","JSON","stringify","then","res","quantity","seed","Seed","checkDuplicate","newSeed","seeds","index","length","seedBank","calculateDays","start","end","date1","Date","diffInTime","getTime","Math","round","createId","uuidv4","createBalloons","props","balloons","balloonCollection","removeBalloon","acceptFriend","balloon","push","position","handleClick","sender","colour","message","Balloons","mesh","useRef","useState","setBalloons","useEffect","loadBalloons","lastLogin","today","data","ref","scale","BalloonText","ballonTextColour","Text","fontSize","outlineWidth","outlineColor","color","displayMessage","BalloonBody","useFrame","state","delta","current","rotation","y","args","BalloonString","BalloonCone","BalloonCrate","Balloon","claimed","setClaimed","setDisplaymessage","onClick","prev","Billboard","follow","lockX","lockY","lockZ","balloonsForSale","colours","x","cos","PI","sin","BalloonForSale","buyBalloon","textColour","outline","setScale","event","stopPropagation","setTimeout","BalloonShop","Cloud","displayText","option","setDate","displayFunctionality","selectSeed","toggleSeeds","chosenSeed","handleSubmit","sendFriendRequest","setOption","noticeTextColour","alphabet","split","cloudKeyboardColours","cloudFunctionButtonColours","createCloudKeyboard","buildSentence","deleteCharacter","sentence","submit","cloudKeyboard","fontX","fontY","column","char","character","CloudKey","FunctionKey","CloudText","CloudKeyBoard","sentenceArray","setSentencearray","setSentence","submitted","setSubmitted","join","previousLength","filter","extend","OrbitControls","Camera","useThree","camera","domElement","gl","controls","update","autoRotate","autoRotateSpeed","enabled","FakeGrass","Firmament","Sky","turbidity","distance","sunPosition","inclination","elevation","exposure","mieDirectionalG","mieCoefficient","rayleigh","azimuth","createFriends","friends","friendCollection","friend","sendPlant","friendId","world","Friends","setFriends","loadFriends","Grass","sowPlant","createStalactites","createdStalactites","stalactites","stalactite","Stalactite","geometry","top","depth","sections","GardenText","gardenTextColor","Garden","setName","IntroBalloons","newWorld","saveWorld","Wrapper","styled","attrs","className","Logo","href","src","logo","height","alt","Component","Links","Fragment","to","this","user","Nav","nav","NavBar","setUser","buildPlant","bloom","leafColour","stemColour","flowerColour","getSeed","growth","stemLength","Base","Stem","leaves","Leaf","Flower","Plant","seedTextColours","selectedSeedTextColours","seedSelectors","sortedSeeds","sort","SeedText","NoSeedText","SeedCloud","button","div","Sun","sunRef","intensity","createPlantComponent","plantId","Friend","friendWorld","login","dateDifference","loadedBalloons","balloonData","parseBalloons","parsedBalloons","_id","Object","assign","gardenX","max","min","gardenY","gardenZ","loadedFriends","friendsData","parse","randomiser","loadedPlants","plantsData","parsedPlants","stamp","parsedPlant","calculateGrowth","plantDate","loadedSeeds","seedsData","seedCollection","userName","sendFriendBalloon","sendBalloon","myId","myName","myWorld","me","sample","array","floor","random","chosen","worldChosen","day","getDate","month","getMonth","year","getFullYear","range","generatePosition","WorldData","generateStalactites","offset","generateStalactite","stalactiteGeometry","stalactitePosition","stalactiteMin","stalactiteY","stalactiteXZ","Title","h1","Label","label","InputText","input","Button","CancelButton","SignUp","handleChangeInputName","target","value","setState","handleChangeInputEmail","email","handleChangeInputPassword","password","handleAddUser","newUser","validUsername","status","window","alert","balloonOne","balloonTwo","onChange","LogIn","handleGetUser","SeedBank","plants","setPlants","setSeeds","setChosenseed","setSeedindex","loadSeeds","loadPlants","plantCollection","createPlants","checkAchievements","removeSeed","increment","findIndex","amendedSeed","updateSeed","achievementCount","plantCount","duplicate","bonusSeed","calculateAchievement","fallback","point","z","plantComponent","makeFriends","Clouds","makeFriendRequest","selectedSeed","App","chosenWorld","bind","connecToServer","fetch","saveGarden","style","width","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f851c2b.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: \"/api\",\n})\n//USER\nexport const addUser = payload => api.post(`/user`, payload)\nexport const getUser = name => api.get(`/user/${name}`)\nexport const updateGarden = (id, payload) => api.put(`/user/${id}`, payload)\n\n//BALLOONS\nexport const addBalloons = payload => api.post(`/balloons`, payload)\nexport const getBalloons = userId => api.get(`/balloons/${userId}`)\nexport const updateBalloons = (balloonId, payload) => api.put(`/balloons/${balloonId}`, payload) // only being used to claim balloons at the moment\n\n//FRIENDS\nexport const addFriends = payload => api.post(`/friends`, payload)\nexport const getFriends = userId => api.get(`/friends/${userId}`)\nexport const getFriendByName = (friendName, id) => api.get(`/friend/${friendName}/${id}`)\n\n//SEEDS\nexport const addSeeds = payload => api.post(`/seeds`, payload)\nexport const getSeeds = userId => api.get(`/seeds/${userId}`)\nexport const updateSeeds = (userId, type, payload) => api.put(`/seeds/${userId}/${type}`, payload) // only updates variants and quantity\n\n// PLANTS\nexport const addPlant = payload => api.post(`/plants`, payload)\nexport const getPlants = userId => api.get(`/plants/${userId}`)\nexport const updatePlant = (id, payload) => api.put(`/plants/${id}`, payload)\n\n\n\nconst apis = {\n    addUser,\n    getUser,\n    updateGarden,\n    addBalloons,\n    getBalloons,\n    updateBalloons,\n    getFriends,\n    addFriends,\n    getFriendByName,\n    addSeeds,\n    getSeeds,\n    updateSeeds,\n    addPlant,\n    getPlants,\n    updatePlant,\n}\n\nexport default apis\n","import api from '../api';\nimport { Plant } from '../gameObjects'\n\n// Creates a new Plant, with a uniqueID, growth initialised at 0 and a new date\n\nexport default async function addPlant(plant) {\n  console.log(\"SAVING PLANT \")\n  console.log(plant)\n  plant.date = JSON.stringify(plant.date)\n\n  await api.addPlant(plant).then(res => {\n      console.log(\"PLANT SAVED\")\n  })\n}\n","import {Seed} from '../gameObjects'\nimport api from '../api';\n\n// adds a balloon to the DB\n//  Balloon constructor(userId, type, quantity = 0, message, sender = \"SeedBank\") {\n\n\nexport default async function addSeeds(userId, type, quantity = 0) {\n\n  console.log(\"In addSeeds \" + type)\n\n  const seed = new Seed(userId, type, quantity)\n  console.log(seed)\n\n  await api.addSeeds(seed).then(res => {\n    console.log(`packet of ${type} seeds added!`)\n  })\n\n}\n","import { sendBalloon, sample } from './'\n\n// This calculates achievements based on the number of plants in players' garden\n// Every five plants either unlocks a new plant or adds more existing seeds\n// code below works out whether the player can unlock\n// it also adds a balloon to the DB to addive the next day\n// This needs refactoring to for separation of concerns/SRP/DRY\n\nexport default function calculateAchievement(seeds, id, plantCount) {\n  console.log(\"ACHIEVEMENT CALCULATOR:\")\n  console.log(seeds)\n  let duplicate = true\n  let newSeed = {}\n  if (seeds.length === seedBank.length) {\n    let bonusSeed = sample(seeds)\n    console.log(\"bonusSeeds\")\n    sendBalloon(id, bonusSeed.type, 3, `${plantCount} plants! Bonus ${bonusSeed.type} seeds!`  ) //userId, type, quantity = 0, message, sender = \"SeedBank\")\n    return null\n    // newSeed = sample(seedBank)\n    // console.log(\"FULL BANK\")\n    // unlock = false\n  } else {\n  while (duplicate) {\n    newSeed = sample(seedBank)\n    duplicate = checkDuplicate(newSeed, seeds, id, plantCount)\n  }\n}\n  sendBalloon(id, newSeed.type, 3, `${plantCount} plants! ${'\\n'} ${newSeed.type} unlocked!`)\n  return newSeed\n}\n\nfunction checkDuplicate(newSeed, seeds) {\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    if (seed.type === newSeed.type) {\n      return true\n    }\n  }\n  return false\n\n}\n//\n// function updateSeeds(seeds, newSeed, id, plantCount) {\n//   const updatedSeeds = []\n//   for (let index = 0; index < seeds.length; index++) {\n//     const seed = seeds[index]\n//     if (seed.type === newSeed.type) {\n//       seed.quantity += newSeed.quantity\n//     }\n//     updatedSeeds.push(seed)\n//   }\n//   newSeed.quantity = 0\n//   updatedSeeds.push(newSeed)\n//   return updatedSeeds\n// }\n\nconst seedBank = [\n  {type: \"generic_plant\", quantity: 3},\n  {type: \"tulip\", quantity: 3},\n  {type: \"sunflower\", quantity: 3},\n  {type: \"crocus\", quantity: 3},\n  {type: \"snowdrop\", quantity: 3},\n  {type: \"rose\", quantity: 3},\n  {type: \"venusFlyTrap\", quantity: 3}\n]\n","\n// calculates the difference in days between two dates using ISO strings for start and end\n\nexport default function calculateDays(start, end) {\n    const date1 = new Date(start);\n    const date2 = new Date(end);\n\n    // One day in milliseconds\n    const oneDay = 1000 * 60 * 60 * 24;\n\n    // Calculating the time difference between two dates\n    const diffInTime = date2.getTime() - date1.getTime();\n    //console.log(\"Time diff\")\n    //console.log(diffInTime)\n\n    // Calculating the no. of days between two dates\n    const diffInDays = Math.round(diffInTime / oneDay);\n\n    return diffInDays;\n}\n","\n// generates a unique ID number \n\n\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport default function createId() {\n  return uuidv4()\n}\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId, loadBalloons, updateBalloons } from '../../functions'\nimport { Balloon } from '../'\n\n\n\nfunction Balloons(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  const [balloons, setBalloons] = useState([])\n\n  useEffect(() => {\n    loadBalloons(props.seeds, props.lastLogin, props.userId, props.today).then(data => setBalloons(data))\n  }, [])\n\n\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return (\n    <>\n    <mesh\n      {...props }\n      ref={mesh}\n      scale={1}\n      >\n      {createBalloons(props, balloons)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createBalloons(props, balloons) {\n  const balloonCollection = []\n  const {removeBalloon, updateSeeds, acceptFriend, seeds} = props\n\n  for (let index = 0; index < balloons.length; index++) {\n  const balloon = balloons[index]\n\n  if (balloon.type === \"friendRequest\") {\n\n  }\n  const handleClick = (props) => {\n    // handleClick for friend and seed balloons\n    balloon.type === \"friendRequest\" ? acceptFriend(balloon.sender) : updateSeeds(balloon.quantity, balloon.type)\n  }\n\n\n\n  balloonCollection.push(\n    <Balloon\n    key={balloon.balloonId}\n    balloonId={balloon.balloonId}\n    seeds={seeds}\n    position={balloon.position}\n    index={index}\n    handleClick={handleClick}\n    updateBalloons={updateBalloons}\n    colour={balloon.colour}\n    type={balloon.type}\n    sender={balloon.sender}\n    quantity={balloon.quantity}\n    message={balloon.message} />\n  )\n  }\n  return balloonCollection\n}\n\n\nexport default Balloons\n","import {sample, randomiser, createId, calculateDays} from './'\nimport { Balloon } from '../gameObjects'\nimport api from '../api';\n\nconst defaultQuantity = 3 // default quantity for a pack of new seeds\n\nexport default async function loadBalloons(seeds, login, id, today) {\n\n  const dateDifference = calculateDays(login, today)\n  console.log(\"DATE DIFFERENCE in loadBalloons: \" + dateDifference)\n  let loadedBalloons = await api.getBalloons(id)\n  let balloonData = loadedBalloons.data.data\n\n\n  let balloons = parseBalloons(balloonData)\n\n  // NO LONGER SENDING A 'DAILY BALLOON'\n  // if (seeds.length > 0) {\n  //   balloons.push(dailyBalloon(seeds))\n  // }\n\n  return balloons\n}\n\nfunction parseBalloons(balloonData) {\n  let parsedBalloons = []\n  for (let index = 0; index < balloonData.length; index++) {\n    const balloon = balloonData[index]\n    balloon.balloonId = balloon._id // Can only get the DB to findOne using its own _id!\n    if (balloon.claimed) {\n       continue }\n    parsedBalloons.push(Object.assign(new Balloon(), balloon))\n  }\n  return parsedBalloons\n}\n\n\n//NOT IN USE ANYMORE\nfunction dailyBalloon(seeds, id) {\n\n  // This is not being added to the balloon database at the moment\n  const sampleSeeds = sample(seeds)\n  const newSeeds = {type: sampleSeeds.type, quantity: defaultQuantity}\n  const dailyMessage = `${newSeeds.quantity} x ${newSeeds.type}!`\n  return new Balloon(id, newSeeds.type, newSeeds.quantity, dailyMessage)\n}\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { Text, Billboard } from '@react-three/drei'\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId, updateBalloons } from '../../functions'\n\n\n\nfunction Balloon(props) {\n\n  const mesh = useRef()\n  const [claimed, setClaimed] = useState(false)\n  const [displayMessage, setDisplaymessage] = useState(false)\n\n\n  const handleClick = () => {\n    if (!claimed) {\n      props.handleClick() // updateSeeds for seed balloon; acceptFriend for friend balloon\n      if (props.type !== \"introBalloon\") {\n        setClaimed(prev => !prev)\n        updateBalloons(props.balloonId)\n      } // introballoons (save/new world) can't be claimed\n    }\n    setDisplaymessage(prev => !prev)\n  }\n\n  useEffect(() => {\n    if (props.type !== \"introBalloon\") {\n    setClaimed(claimed)\n    setDisplaymessage(displayMessage)\n  }\n  }, [])\n\n\n\n\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={0.8}\n      onClick={handleClick}\n      >\n      <BalloonBody colour={props.colour} />\n      <BalloonCone colour = {props.colour} position={[0, -0.18, 0]}/>\n      <BalloonString position={[0, -0.15, 0]}/>\n      <BalloonCrate position={[0, -0.48, 0]}/>\n      <Billboard\n      follow={true}\n      lockX={false}\n      lockY={false}\n      lockZ={false} >\n      <BalloonText type={props.type} displayMessage={displayMessage} position={[0, -0.9, 0]} claimed={claimed} message={props.message} />\n      </Billboard>\n    </mesh>\n      </group>\n\n  )\n }\n\n function BalloonText(props) {\n\n   const ballonTextColour = {\n     message: \"#293241\",\n     outline: \"#b1b5c8\"\n   }\n\n   const mesh = useRef()\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={0.8}\n       >\n       <Text fontSize={0.2} outlineWidth={0.2} outlineColor={ballonTextColour.outline} color={ballonTextColour.message} > {props.displayMessage || props.type === \"introBalloon\" ? props.message : \"\" } </Text>\n       </mesh>\n   )\n }\n\n\n function BalloonBody(props) {\n\n   const mesh = useRef()\n   useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={1}\n       >\n   <dodecahedronGeometry args={[0.153, 8]} />\n   <meshToonMaterial color={props.colour} />\n   </mesh>\n )\n }\n\n function BalloonString(props) {\n\n   const mesh = useRef()\n   useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n   // Set up state for the hovered and active state\n\n\n   return (\n     <mesh\n       {...props}\n       ref={mesh}\n       scale={1}\n       >\n       <cylinderGeometry args={[0.005, 0.005, 0.5, 3]} />\n       <meshToonMaterial color={'#16161D'} />\n     </mesh>\n   )\n  }\n\n  function BalloonCone(props) {\n    const mesh = useRef()\n    useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n    // Set up state for the hovered and active state\n\n\n    return (\n      <mesh\n        {...props}\n        ref={mesh}\n        scale={1}\n        >\n        <cylinderGeometry args={[0.15, -0.01, 0.3, 16]} />\n        <meshToonMaterial color={props.colour} />\n      </mesh>\n    )\n   }\n\n   function BalloonCrate(props) {\n     const mesh = useRef()\n     useFrame((state, delta) => ( mesh.current.rotation.y += 0.01))\n\n     // Set up state for the hovered and active state\n\n\n     return (\n       <mesh\n         {...props}\n         ref={mesh}\n         scale={1}\n         >\n         <boxGeometry args={[0.15, 0.15, 0.15]} />\n         <meshToonMaterial color={'#7f5539'} />\n       </mesh>\n     )\n    }\n\nexport default Balloon\n","import { Billboard, Text } from '@react-three/drei'\nimport React, { Component, useState, useRef } from 'react';\nimport {balloonColours, sendBalloon, sample, createId} from '../../functions'\nconst size = 0.07\n\nfunction BalloonShop(props) {\n  const mesh = useRef()\n\n  const handleClick = () => {\n\n  }\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={handleClick}\n      >\n    {balloonsForSale(props)}\n    </mesh>\n  )\n}\n\nfunction balloonsForSale(props) {\n  const colours = balloonColours()\n  let balloons = []\n  for (let balloon = 0; balloon < props.seeds.length; balloon++) {\n    const ballonTextColour = {\n      message: \"#293241\",\n      outline: \"#b1b5c8\"\n    }\n    const x = -0.3 + Math.cos(Math.PI * balloon / colours.length)\n    const y = 1 + Math.sin((Math.PI * balloon / colours.length  ))\n\n    balloons.push(<BalloonForSale key={createId()} buyBalloon={props.buyBalloon} textColour=\"#293241\" outline={colours[balloon]} position={[x, y, 0]}/>)\n  }\n  return balloons\n}\n\nfunction BalloonForSale(props) {\n\n  const mesh = useRef()\n  const [scale, setScale] = useState(1)\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    props.buyBalloon(props.outline)\n    setScale(0.95)\n    setTimeout(() => {\n      setScale(1)\n    }, 100)\n\n    //  constructor(userId, type, colour = sample(balloonColours()), quantity = 0, message, sender = \"SeedBank\") {\n  }\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={scale}\n      onClick={(event) => handleClick(event)}\n      >\n    <Billboard\n      position={props.position}\n      follow={true}\n      lockX={false}\n      lockY={false}\n      lockZ={false} // Lock the rotation on the z axis (default=false)\n      >\n      <Text fontSize={size} outlineWidth={size + 0.05} outlineColor={props.outline} color={props.textColour}>\n      £1\n       </Text>\n      </Billboard>\n      </mesh>\n    )\n}\n\nexport default BalloonShop\n","import {sample} from './'\n\nexport default function balloonColours() {\n  return[\n    \"#db504a\",\n    \"#ff6f59\",\n    \"#ffe200\",\n    \"#9bf6ff\",\n    '#ffd6a5',\n    '#caffbf',\n    '#ffc6ff',\n    '#bdb2ff',\n    '#e9ff70',\n    '#ff70a6',\n    '#ff9770',\n    '#c64664',\n    '#54428e',\n    '#ef476f',\n    '#eb5e28'\n  ]\n}\n","import { Billboard, Text } from '@react-three/drei'\nimport { setDate } from '../../functions'\nimport React, { Component, useState, useRef } from 'react';\n\nconst position = [0.5, 2.8, 5]\nconst size = 0.5\nconst options = 3\n\nfunction Cloud(props) {\n  const mesh = useRef()\n  const [option, setOption] = useState(0)\n\n  const noticeTextColour = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  }\n\n  const handleClick = () => {\n    console.log(\"clicked\")\n\n  }\n\n\nreturn (\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={1}\n    onClick={handleClick}\n    >\n  <Billboard\n    position={position}\n    follow={true}\n    lockX={false}\n    lockY={false}\n    lockZ={false} // Lock the rotation on the z axis (default=false)\n    >\n    <Text option=\"Choose Seed\" fontSize={size} outlineWidth={size} outlineColor={noticeTextColour.outline} color={noticeTextColour.message}>\n    {props.option}\n     </Text>\n    </Billboard>\n\n    </mesh>\n)\n}\n\nexport default Cloud\n","import { Billboard, Text } from '@react-three/drei'\nimport { setDate } from '../../functions'\nimport React, { Component, useState, useRef } from 'react';\nimport { SeedCloud, CloudKeyBoard, BalloonShop } from '../'\n\n\nconst position = [0.5, 2.8, 5]\nconst size = 0.5\nconst options = 3 // 1 = Choose Seed, 2 = send Friend Request, 3 = buy balloon\n\n\n\nfunction Cloud(props) {\n  const mesh = useRef()\n  const [option, setOption] = useState(0)\n\n  const noticeTextColour = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  }\n\n  const handleClick = () => {\n    option >= options ? setOption(0) : setOption(prev => prev + 1)\n\n  }\n\n\nreturn (\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={1}\n    onClick={handleClick}\n    >\n  <Billboard\n    position={position}\n    follow={true}\n    lockX={false}\n    lockY={false}\n    lockZ={false} // Lock the rotation on the z axis (default=false)\n    >\n    <Text fontSize={size} outlineWidth={size} outlineColor={noticeTextColour.outline} color={noticeTextColour.message}>\n    {displayText(option)}\n     </Text>\n    </Billboard>\n    {displayFunctionality(option, props)}\n\n    </mesh>\n)\n}\n\nfunction displayText(option) {\n\n  switch(option) {\n    case 0:\n      const date = setDate()\n      return `   | | ${'\\n'} \\\\__/ `\n    case 1:\n      return 'Choose Seed'\n    case 2:\n      return 'Send friend request'\n    case 3:\n      return 'Buy balloon'\n    default:\n     return \"hello\"\n  }\n\n}\n\nfunction displayFunctionality(option, props) {\n\n  switch(option) {\n    case 1:\n      return <SeedCloud seeds={props.seeds} selectSeed={props.selectSeed} toggleSeeds={props.toggleSeeds} chosenSeed={props.chosenSeed} />\n    case 2:\n      return <CloudKeyBoard handleSubmit={props.sendFriendRequest} />\n    case 3:\n      if (props.seeds.length > 0) {\n        return <BalloonShop seeds={props.seeds} buyBalloon={props.buyBalloon} />\n      }\n    default:\n     return \"\"\n  }\n}\n\nexport default Cloud\n","\nimport { Text, Billboard } from '@react-three/drei'\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { createId } from '../../functions'\n\n\n\nconst characters = \"abcdefghijklmnopqrstuvwxyz0123456789\"\nconst alphabet = characters.split('')\nconst cloudKeyboardColours = {text: \"#293241\", outline: \"#b1b5c8\"}\nconst cloudFunctionButtonColours = {text: \"#b1b5c8\", outline: \"#293241\"}\nconst fontSize = 0.1\nconst fontZ = 1\n\n\n\n\nfunction CloudKeyBoard(props) {\n  const [sentenceArray, setSentencearray] = useState([])\n  const [sentence, setSentence] = useState('')\n  const [submitted, setSubmitted] = useState(false)\n\n  const buildSentence = (character) => {\n    setSentencearray( (prev) => {\n      return [...prev, character]\n    })\n  }\n\n  const deleteCharacter = () => {\n    let previousLength = sentenceArray.length - 1\n    setSentencearray (\n      (prev) => {\n        return prev.filter((character, index) => index !== previousLength)\n      }\n    )\n  }\n\n  const submit = () => {\n    setSubmitted(true)\n    props.handleSubmit(sentence)\n  }\n\n  useEffect(() => {\n\n    //\n    setSentence(sentenceArray.join(''))\n    setSubmitted(submitted)\n  });\n\n\n  const mesh = useRef()\n\n\n\n  return (\n  <>\n  {submitted ? < CloudText key={createId()} sentence={sentence} fontX={0.8} fontY={1.8} /> : createCloudKeyboard(props, buildSentence, deleteCharacter, sentence, submit) } />\n  </>\n\n)\n}\n\nfunction createCloudKeyboard(props, buildSentence, deleteCharacter, sentence, submit) {\n  let cloudKeyboard = []\n  let fontX = 0.5\n  let fontY = 3\n  let column = 1\n  for (let char = 0; char < alphabet.length; char++) {\n    let character = alphabet[char]\n    fontX += 0.3\n    cloudKeyboard.push( < CloudKey key={createId()} buildSentence={buildSentence} character={character} fontX={fontX} fontY={fontY} /> )\n    if (column % 8 === 0) {\n      fontY -= 0.3\n      fontX = 0.5\n    }\n    column++\n\n  }\n  cloudKeyboard.push( <FunctionKey key={createId()} handleClick={deleteCharacter} fontX={fontX + 0.3} fontY={fontY} character='X' /> )\n  cloudKeyboard.push( <FunctionKey key={createId()} handleClick={submit} fontX={fontX + 0.6} fontY={fontY} character='+'/>)\n  cloudKeyboard.push( < CloudText key={createId()} sentence={sentence} fontX={0.8} fontY={fontY - 0.3} /> )\n\n  return cloudKeyboard\n\n\n}\n\nfunction CloudKey(props) {\n\n    const mesh = useRef()\n\n    const handleClick = (event, character) => {\n      event.stopPropagation()\n      props.buildSentence(character)\n    }\n\n    return (\n        <mesh\n          {...props}\n          ref={mesh}\n          onClick={(event) => handleClick(event, props.character)}\n          >\n          <Billboard\n          follow={true}\n          lockX={false}\n          lockY={false}\n          lockZ={false} >\n          < Text\n          fontSize={fontSize}\n          position={[props.fontX, props.fontY, fontZ]}\n          outlineWidth={fontSize}\n          outlineColor={cloudKeyboardColours.outline}\n          color={cloudKeyboardColours.text}\n           >\n           {props.character}\n          </ Text>\n          </ Billboard>\n        </mesh>\n        )\n      }\n\nfunction FunctionKey(props) {\n\n// FunctionKey Receives a 'handleclick' prop that can vary according to functions\n// Varies in colour to cloudkey but other than that the two could prob be merged into single component\n\nconst mesh = useRef()\n\nconst handleClick = (event) => {\nevent.stopPropagation()\nprops.handleClick()\n}\n\nreturn (\n  <mesh\n    {...props}\n    ref={mesh}\n    onClick={(event) => handleClick(event)}\n    >\n    <Billboard\n    follow={true}\n    lockX={false}\n    lockY={false}\n    lockZ={false} >\n    < Text\n    fontSize={fontSize}\n    position={[props.fontX, props.fontY, fontZ]}\n    outlineWidth={fontSize}\n    outlineColor={cloudFunctionButtonColours.outline}\n    color={cloudFunctionButtonColours.text}\n     >\n     {props.character}\n    </ Text>\n    </ Billboard>\n  </mesh>\n  )\n}\n\nfunction CloudText(props) {\n\n    const mesh = useRef()\n\n    const handleClick = (event, character) => {\n      event.stopPropagation()\n    }\n\n    return (\n        <mesh\n          {...props}\n          ref={mesh}\n          onClick={(event) => handleClick(event, props.character)}\n          >\n          <Billboard\n          follow={true}\n          lockX={false}\n          lockY={false}\n          lockZ={false} >\n          < Text\n          fontSize={fontSize}\n          position={[props.fontX, props.fontY, fontZ]}\n          outlineWidth={fontSize}\n          outlineColor={cloudFunctionButtonColours.outline}\n          color={cloudFunctionButtonColours.text}\n           >\n           {props.sentence}\n          </ Text>\n          </ Billboard>\n        </mesh>\n        )\n      }\n\nexport default CloudKeyBoard\n","import { extend, useThree, useFrame } from \"@react-three/fiber\";\nimport React, { useRef } from \"react\";\nimport { OrbitControls } from 'three-stdlib';\nextend({ OrbitControls });\n\n\nconst Camera = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls component.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return <orbitControls\n          ref={controls}\n          position={[0, -10, 0]}\n          args={[camera, domElement]}\n          autoRotate={false}\n          autoRotateSpeed={0.2}\n          enabled={true}\n          />;\n};\n\nexport default Camera\n","import React, { useRef } from \"react\";\n\n\n\n// The plane on which plants grow\n\nfunction FakeGrass(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={'#a7c957'} />\n    </mesh>\n  )\n}\n\nexport default FakeGrass\n","import { Sky } from '@react-three/drei'\n\nexport default function Firmament(props) {\n  return (\n    <Sky\n      turbidity={0.01}\n      distance={450000} // Camera distance (default=450000)\n      sunPosition={[0, 1, 0]} // Sun position normal (defaults to inclination and azimuth if not set)\n      inclination={0.47} // Sun elevation angle from 0 to 1 (default=0)\n      elevation={0.6}\n      exposure={0.3}\n      mieDirectionalG={0.04}\n      mieCoefficient={0.0045}\n      rayleigh={0.1}\n      azimuth={0.6} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n      {...props} // All three/examples/jsm/objects/Sky props are valid\n    />  )\n}\n","import { Billboard, Text } from '@react-three/drei'\nimport React, { Component, useState, useRef, useEffect } from 'react';\nimport { loadFriends, createId } from '../functions'\nimport { Garden } from './'\n\n// generates a floating garden for each friend and places it in the background\n// uses the same Garden generation code as the user garden, except FakeGrass can't be planted (probably could merge this with Grass)\n\nfunction Friends(props) {\n\n  const [friends, setFriends] = useState([])\n  const mesh = useRef()\n\n  useEffect(() => {\n    loadFriends(props.userId).then(data => setFriends(data))\n  }, [])\n\n  return (\n    <>\n    <mesh\n      {...props }\n      ref={mesh}\n      scale={1}\n      >\n      {createFriends(props, friends)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createFriends(props, friends) {\n  const friendCollection = []\n  for (let index = 0; index < friends.length; index++) {\n    const friend = friends[index]\n    friendCollection.push(<Garden key={createId()} sendPlant={props.sendPlant} friend={true} position={friend.position} name={friend.name} friendId={friend.friendId} world={friend.world} />)\n  }\n  return friendCollection\n}\n\n\nexport default Friends\n","import api from '../api';\nimport { randomiser } from './'\n\nconst gardenX = {max: 20, min: -20}\nconst gardenY = {max: 10, min: -10}\nconst gardenZ = {max: -10, min: -30}\n\n\nexport default async function loadFriends(id) {\n  console.log(\"LOADING FRIENDS FOR \" + id)\n  const loadedFriends = await api.getFriends(id)\n  const friendsData = loadedFriends.data.data\n  const friendCollection = []\n  for (let index = 0; index < friendsData.length; index++) {\n    const friend = friendsData[index]\n    friendCollection.push(\n      {\n        friendId: friend.friendId,\n        name: friend.friendName,\n        world: JSON.parse(friend.friendWorld),\n        position: [randomiser(gardenX), randomiser(gardenY), randomiser(gardenZ)]\n      }\n    )\n  }\n  return friendCollection\n}\n","import React, { useRef } from \"react\";\n\n\n\n// The plane on which plants grow\n\nfunction Grass(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => props.sowPlant(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={'#a7c957'} />\n    </mesh>\n  )\n}\n\nexport default Grass\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { createId } from '../../functions'\nimport { Grass, SeedBox, FakeGrass } from '../'\nimport { Text, Billboard } from '@react-three/drei'\n\n\n// The plane on which plants grow\n\nfunction Garden(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  const [name, setName] = useState(true)\n\n  const handleClick = (event) => {\n    if (props.friend) {\n  //  setName(prev => !prev)\n    event.stopPropagation()\n    props.sendPlant(props.name, props.friendId)\n    }\n  }\n\n  useEffect(() => {\n    setName(name)\n  })\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      {createStalactites(props)}\n      {name && props.friend ? <GardenText name={props.name} position={[0, 2, 0]} /> : ''}\n    </mesh>\n    </>\n  )\n}\n\nfunction createStalactites(props) {\n  const world = props.world\n  const createdStalactites = []\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index]\n    createdStalactites.push( <Stalactite key={createId()} friend={props.friend} sowPlant={props.sowPlant} args={stalactite.geometry} position={stalactite.position} colour={stalactite.colour} />)\n  }\n\n  return createdStalactites\n}\n\nfunction Stalactite(props) {\n  const mesh = useRef()\n  let [top, bottom, depth, sections] = props.args\n\n  const handleClick = (event) => {\n    props.friend ? console.log(\"friend island click\") : event.stopPropagation()\n  }\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={props.colour}  />\n      {props.friend ? <FakeGrass position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} /> : <Grass sowPlant={props.sowPlant} position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} />}\n    </mesh>\n    </group>\n  )\n}\n\nfunction GardenText(props) {\n\n  const gardenTextColor = {\n    message: \"#293241\",\n    outline: \"#b1b5c8\"\n  }\n\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={0.8}\n      >\n      <Text fontSize={1.2} outlineWidth={1} outlineColor={gardenTextColor.outline} color={gardenTextColor.message} > {props.name } </Text>\n      </mesh>\n  )\n}\n\nexport default Garden\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../../functions'\nimport { Balloon } from '../'\n\n\nfunction IntroBalloons(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      <Balloon type=\"introBalloon\" position={[-0.6, 2, 0]} handleClick={props.newWorld} colour=\"#ee6055\" message=\"New garden\" />\n      <Balloon type=\"introBalloon\" position={[0.6, 2, 0]} handleClick={props.saveWorld} colour=\"#ffd97d\" message=\"Save garden\" />\n    </mesh>\n    </>\n  )\n}\n\nexport default IntroBalloons\n","export default __webpack_public_path__ + \"static/media/seedbankProto.6cdc7966.png\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport logo from '../images/seedbankProto.png';\n\nconst Wrapper = styled.a.attrs({\n    className: 'navbar-brand',\n})``\n\nclass Logo extends Component {\n    render() {\n        return (\n            <Wrapper href=\"https://example.com\">\n                <img src={logo} height=\"50\" alt=\"seedbank\" />\n            </Wrapper>\n        )\n    }\n}\n\nexport default Logo\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\nclass Links extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Link to=\"/\" className=\"navbar-brand\">\n                    SeedBank\n                </Link>\n                    <Link to=\"/\" className=\"navbar-brand\">\n                     { this.props.user }\n                    </Link>\n              </React.Fragment>\n        )\n    }\n}\n\nexport default Links\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport Logo from './Logo';\nimport Links from './Links';\n\n\nconst Nav = styled.nav.attrs({\n    className: 'navbar navbar-expand-lg navbar-dark bg-dark',\n})`\n    margin-bottom: 20 px;\n`\n\nclass NavBar extends Component {\n    render() {\n        return (\n                <Nav height=\"50%\">\n                    <Logo />\n                    <Links user={this.props.user} setUser={this.props.setUser} />\n                </Nav>\n        )\n    }\n}\n\nexport default NavBar\n","import React, { useRef } from \"react\";\nimport { createId } from '../../functions'\nimport { getSeed } from '../../gameObjects'\n\n\n// Creates a Plant based on the props that it receives\n\nfunction Plant(props) {\n\n  const mesh = useRef()\n\n  // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"This plant is:\")\n    console.log(props)\n  }\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      onClick={(event) => handleClick(event)}\n      scale={0.2}\n    //  onPointerOver={(event) => setHover(true)}\n    //  onPointerOut={(event) => setHover(false)}\n    >\n      {buildPlant(props)}\n    </mesh>\n    </group>\n\n  )\n}\n\n// buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\nfunction buildPlant(props) {\n\n  const [x, y, z] = props.position\n  const {bloom, leafColour, stemColour, flowerColour} = getSeed(props.type)\n  let growth = props.growth\n\n  // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom\n  }\n\n  // the length of the stem is based on the plant's growth\n\n  const stemLength = growth/24\n\n\n  // push the Base and Stem into the plant array\n\n  let plant = [\n    <Base key={createId()} />,\n    <Stem key={createId()} stemColour={stemColour} stemLength={stemLength} position={[0, 0.05, 0]}/>,\n  ]\n\n  // Add leaves relative to the plant's growth level\n\n  for (let leaves = 0; leaves <= growth; leaves++) {\n    plant.push(\n    <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n    <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n  )\n  }\n\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n  plant.push(\n    <Flower key={createId()} color={flowerColour} position={[0, 0.1 + (growth/11), 0]} />\n  )\n}\n\n  return plant\n\n}\n\nfunction Base(props) {\n\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n     >\n    <dodecahedronGeometry args={[0.035, 2]} />\n    <meshToonMaterial color={'#947352'} />\n  </mesh>\n)\n\n\n}\n\nfunction Stem(props) {\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={0.5}\n\n    >\n    <cylinderGeometry args={[0.01, 0.03, 0.3 + props.stemLength, 12]} />\n    <meshToonMaterial color={props.stemColour} />\n    </mesh>\n  )\n}\n\n\nfunction Leaf(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <cylinderGeometry args={[0.02, 0.05, 0.02, 6]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\nfunction Flower(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <dodecahedronGeometry args={[0.06]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\n\n\nexport default Plant\n","\n export default function getSeed(seed) {\n\n   switch(seed) {\n     case \"generic_plant\":\n        return {bloom: 1, leafColour: '#377F34', stemColour: '#499B4A', flowerColour: '#832134'}\n     case \"tulip\":\n        return {bloom: 2, leafColour: '#2D5A27', stemColour: '#567d46', flowerColour: '#ff878d'}\n     case \"sunflower\":\n        return {bloom: 4, leafColour: '#75ae92', stemColour: '#82ac80', flowerColour: '#f8ec89'}\n    case \"crocus\":\n      return {bloom: 1, leafColour: '#76c893', stemColour: '#52b69a', flowerColour: '#3a0ca3'}\n    case \"snowdrop\":\n      return {bloom: 1, leafColour: '#76c893', stemColour: '#52b69a', flowerColour: '#f8f9fa'}\n    case \"rose\":\n      return {bloom: 5, leafColour: '#499B4A', stemColour: '#75ae92', flowerColour: '#9e0059'}\n    case \"venusFlyTrap\":\n      return {bloom: 7, leafColour: '#ccd5ae', stemColour: '#ccd5ae', flowerColour: '#ccd5ae'}\n     default:\n      return\n   }\n\n}\n","import { Text, Billboard } from '@react-three/drei'\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { createId } from '../../functions'\n\n// Creates a button that 'clicks'\n\nconst seedTextColours = {type: \"#293241\", outline: \"#b1b5c8\"}\nconst selectedSeedTextColours = {type: \"#b1b5c8\", outline: \"#293241\"}\nconst fontSize = 0.12\nconst fontZ = 1\nconst fontY = 2\n\nfunction SeedCloud(props) {\n\n  const mesh = useRef()\n\n\n\n  return (\n  <>\n  <mesh\n    {...props}\n    ref={mesh}\n    scale={1}\n    >\n\n   {seedSelectors(props)}\n  </mesh>\n  </>\n\n)\n}\n\nfunction seedSelectors(props) {\n  let seedSelectors = []\n  let fontX = 0\n  let sortedSeeds = props.seeds.sort()\n  for (let index = 0; index < sortedSeeds.length; index++) {\n    let seed = sortedSeeds[index]\n    if (seed.quantity === 0) { continue }\n    const x = 0.5 + Math.sin(Math.PI * index / sortedSeeds.length )\n    const y = 2 + Math.cos((Math.PI * index / (sortedSeeds.length * 1.9)  ))\n    let colours = {}\n    seed.type === props.chosenSeed ? colours = selectedSeedTextColours : colours = seedTextColours\n    seedSelectors.push( <SeedText key={createId()} position={[x, y, 0]} selectSeed={props.selectSeed} toggleSeeds={props.toggleSeeds} seed={seed} colours={colours} index={index}  />)\n  }\n  if (seedSelectors.length === 0) {\n    seedSelectors.push( <NoSeedText key={createId()} colours={seedTextColours} index={1} />)\n  }\n  return seedSelectors\n}\n\nfunction SeedText(props) {\n  const seed = props.seed\n  const mesh = useRef()\n  const [selected, setSelected] = useState(false)\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"Clicked on SeedCloud!\")\n    console.log(seed.type)\n    console.log(props.index)\n    props.selectSeed(seed.type, props.index)\n  }\n\n\n  return (\n      <mesh\n        {...props}\n        ref={mesh}\n        >\n        <Billboard\n        follow={true}\n        lockX={false}\n        lockY={false}\n        lockZ={false} >\n        < Text\n        fontSize={fontSize}\n        onClick={(event) => handleClick(event)}\n        outlineWidth={fontSize}\n        outlineColor={props.colours.outline}\n        color={props.colours.type}\n        rotation={[0, 0, 0]} >\n          {seed.type} {'\\n'}\n          x {seed.quantity}\n        </ Text>\n        </ Billboard>\n      </mesh>\n      )\n    }\n\nfunction NoSeedText(props) {\n      const mesh = useRef()\n\n      return (\n          <mesh\n            {...props}\n            ref={mesh}\n            >\n            <Billboard\n            follow={true}\n            lockX={false}\n            lockY={false}\n            lockZ={false} >\n            < Text\n            fontSize={0.25}\n            position={[1, 3, 1]}\n            outlineWidth={0.25}\n            outlineColor={props.colours.outline}\n            color={props.colours.type}\n            rotation={[0, 0, 0]} >\n              No seeds available\n            </ Text>\n            </Billboard>\n          </mesh>\n        )\n  }\n\n\nexport default SeedCloud\n","import styled from 'styled-components';\nimport React from 'react';\nimport { createId } from '../../functions'\n\n// Generates a panel that contains buttons of available Seeds\n// PROTOTYPE ONLY: need to design an interface that coould contain an indefinite number of seeds or objects\n\nconst SeedButton = styled.button`\ncolor: palevioletred;\nfont-size: 1em;\nmargin: 1em;\npadding: 0.25em 1em;\nborder: 2px solid palevioletred;\nborder-radius: 3px;\n`;\n\nconst Panel = styled.div`\n  background-color: lightgrey;\n  `;\n\n\nfunction Seeds(props) {\n\n  return (\n    <Panel>\n     {props.chosenSeed}\n    </Panel>\n  )\n}\n\nfunction seedCollection(props) {\n\n  const {seeds, selectSeed} = props\n  let seedCollection = []\n\n  for (let index = 0; index < seeds.length; index++) {\n    const seed = seeds[index]\n    seedCollection.push(\n      <SeedButton key={createId()} onClick={(event) => selectSeed(seed.type, index)} selectSeedtype={seed.type} quantity={seed.quantity} >\n      {seed.type} {seed.quantity}\n      </SeedButton>\n    )\n  }\n\n    return seedCollection\n}\n\nexport default Seeds\n","import { useRef } from 'react';\n// directionaLight is Three.js's daylight equivalent\n// values are arbitraty for now\n\nfunction Sun(props) {\n  const mesh = useRef()\n  const sunRef = useRef()\n\n  return (\n  <group>\n    <mesh\n      ref={sunRef}\n      {...props}\n      >\n    <directionalLight position={[0, 0.5, 1]} intensity={0.7} />\n    </mesh>\n\n  </group>\n  )\n}\n\nexport default Sun\n","import { Plant } from '../components'\nimport { createId } from './'\n\nexport default function createPlantComponent(plant) {\n  return <Plant key={createId()} plantId={plant.plantId} growth={plant.growth} date={plant.date} position={plant.position} type={plant.type} />\n}\n","export default class Friend {\n\n  constructor(userId, friendId, friendName, friendWorld ) {\n    this.userId = userId\n    this.friendId = friendId\n    this.friendName = friendName\n    this.friendWorld = friendWorld\n  }\n\n}\n","import { Plant } from '../gameObjects'\nimport { setDate, calculateDays } from '../functions'\nimport api from '../api';\n\n\n// Reads a saved Garden and creates an array of plants ready to render\n\nexport default async function loadPlants(userId) {\n  console.log(\"LOADING GARDEN for \" + userId)\n  const loadedPlants = await api.getPlants(userId)\n  const plantsData = loadedPlants.data.data\n\n  let parsedPlants = []\n\n  const today = setDate(Date()).stamp\n  for (let plant = 0; plant < plantsData.length; plant ++ ) {\n    console.log(\"LOADED PLANT IS\")\n    const parsedPlant = plantsData[plant]\n    parsedPlant.date = JSON.parse(parsedPlant.date)\n    parsedPlant.growth = calculateGrowth(parsedPlant.date, today)\n    console.log(parsedPlant)\n    parsedPlants.push(Object.assign(new Plant(), parsedPlant))\n  }\n  return parsedPlants\n}\n\nfunction calculateGrowth(plantDate, today) {\n  console.log(plantDate.stamp)\n  console.log(today)\n  const days = calculateDays(plantDate.stamp, today)\n  return days\n}\n\n\n\n\n//module.exports = parseGarden;\n","import api from '../api';\n\n\n\nexport default async function loadSeeds(id) {\n  console.log(\"LOADING Seeds FOR \" + id)\n  const loadedSeeds = await api.getSeeds(id)\n  const seedsData = loadedSeeds.data.data\n  console.log(seedsData)\n  const seedCollection = []\n  for (let index = 0; index < seedsData.length; index++) {\n    const seed = seedsData[index]\n    seedCollection.push(\n      {\n        type: seed.type,\n        quantity: seed.quantity\n      }\n    )\n  }\n  return seedCollection\n}\n","import api from '../api';\nimport { sendBalloon } from './'\n\n\nexport default async function makeFriendRequest(id, userName, friendName) {\n  let validRequest = true\n\n\n  await api.getFriendByName(friendName, id).then(res => {\n    console.log('Already friends?')\n    console.log(res)\n    if (res.data.data.friendName === friendName && res.data.data.userId === id) {\n      console.log(\"YES ALREADY FRIENDS\")\n      return\n    } else {\n      sendFriendBalloon(id, userName, friendName)\n    }\n  })\n}\n\nasync function sendFriendBalloon(id, userName, friendName) {\n  console.log(\"Making friend request to \" + friendName + \"from\" + \" userName\")\n  await api.getUser(friendName).then(res => {\n    const friendId = res.data.data._id\n    const type = \"friendRequest\"\n    const quantity = 1\n    const message = `${userName} wants to connect!`\n    sendBalloon(friendId, type, quantity, message, userName)\n  })\n}\n","import api from '../api';\nimport { Friend } from './'\n\nexport default async function makeFriends(myId, myName, friendName, myWorld) {\n\n\n\n  await api.getUser(friendName).then(res => {\n    const friendId = res.data.data._id\n    const friendWorld = res.data.data.world\n    const friendName = res.data.data.name\n    const me = new Friend(friendId, myId, myName, JSON.stringify(myWorld)) // my details to be saved in friend's db\n    const friend = new Friend(myId, friendId, friendName, friendWorld) // friend's details to be saved in my db\n    api.addFriends(me).then(res => {console.log(`ME ${me.friendName} is friends with ${friend.friendName}`) })\n    api.addFriends(friend).then(res => {console.log(`\"FRIEND \"${friend.friendName} is friends with ${me.friendName}`) })\n\n  })\n}\n","\n\nexport default function sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n\n}\n","import api from '../api';\nimport { setDate } from './'\n\n// saves the world to the user account\n\nexport default async function saveGarden(id, newWorld, chosen) {\n  const world = {\"world\" : JSON.stringify(newWorld)}\n  const worldChosen = {\"worldChosen\" : chosen}\n  const date = setDate()\n  const lastLogin  = { \"lastLogin\" : date.stamp }\n  const payload = {world, worldChosen, lastLogin}\n  console.log(payload)\n  await api.updateGarden(id, payload).then(res => {\n        console.log(res)\n        console.log('Garden updated successfully')\n    })\n}\n","\n\n// creates a date object that contains day, month, year and stamp in ISO format\n\nexport default function setDate() {\n  const date = new Date()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n  const stamp = `${year}/${month}/${day}`\n  return {year: year, month: month, day: day, stamp: stamp }\n}\n","import {Balloon} from '../gameObjects'\nimport { sample, balloonColours } from './'\nimport api from '../api';\n\n// adds a balloon to the DB\n//  Balloon constructor(userId, type, quantity = 0, message, sender = \"SeedBank\") {\n\n\nexport default async function sendBalloon(userId, type, quantity, message, sender = \"SeedBank\", colour = sample(balloonColours()) ) {\n\n  //\n  console.log(\"In sendBalloon \" + type)\n\n  const balloon = new Balloon(userId, type, quantity, message, sender, colour)\n  console.log(balloon)\n\n  await api.addBalloons(balloon).then(res => {\n    console.log(`${type} balloon sent!`)\n  })\n\n}\n","\n// accepts a range object and returns a random number\n// useed to generate terrain and balloons\n// eg {max: 1.3, min: 1}\n\nexport default function randomiser(range) {\n  return Math.random() * (range.max - range.min) + range.min\n}\n","import api from '../api';\n\nexport default async function updateBalloons(balloonId) {\n  console.log(balloonId)\n\n\n  console.log(\"In UPDATED!\")\n  await api.updateBalloons(balloonId, {} ).then(res => {\n        console.log('Balloon updated successfully')\n    })\n\n}\n","import api from '../api';\n\nexport default async function updateSeed(userId, seed) {\n  console.log(\"In UPDATED SEEDS!\")\n  console.log(userId)\n  console.log(seed.type)\n  const payload = {\"quantity\": seed.quantity}\n  await api.updateSeeds(userId, seed.type, payload).then(res => {\n        console.log('Seed updated successfully')\n    })\n\n}\n","import {sample, randomiser, createId, calculateDays, balloonColours} from '../functions'\n\n\nexport default class Balloon {\n  constructor(userId, type, quantity = 0, message, sender = \"SeedBank\", colour = sample(balloonColours())) {\n    this.balloonId = createId()\n    this.userId = userId\n    this.colour = colour\n    this.position = generatePosition()\n    this.type = type\n    this.quantity = quantity\n    this.message = message\n    this.claimed = false\n    this.sender = sender\n  }\n}\n\n\nfunction generatePosition() {\n  const x = {max: 2, min: -2}\n  const y = {max: 1.8, min: 1.5}\n  const z = {max: 1.8, min: -1.8}\n\n  return [randomiser(x), randomiser(y), randomiser(z)]\n}\n","import { setDate, createId } from '../functions'\n\n// Creates a new Plant, with a uniqueID, growth initialised at 0 and a new date\n// Variant not yet in use\n\nexport default class Plant {\n\n  constructor(userId, position, type) {\n    this.userId = userId\n    this.type = type\n    //this.variant = variant\n    this.growth = 0 // not being saved - can be calculated from date?\n    this.position = position\n    this.date = setDate()\n    this.plantId = createId()\n\n  }\n}\n","\n// creates the data used to generate the Stalactite components\n\nimport {sample, randomiser} from '../functions'\n\n\nconst stalactiteCount = 10\n\nexport default class WorldData {\n\n  constructor(stalactites = generateStalactites())  {\n    this.stalactites = stalactites\n  }\n\n}\n\n\n\nfunction generateStalactites() {\n  let stalactites = []\n  let offset = 0\n  for (let stalactite = 0; stalactite < stalactiteCount; stalactite++) {\n    stalactites.push(generateStalactite(offset))\n    offset += 0.1\n  }\n  return stalactites\n}\n\nfunction earthColour() {\n  const colours = [\n    '#6C6460',\n    '#8a817c',\n    '#6c757d',\n  ]\n\n    return sample(colours)\n}\n\nfunction generateStalactite(offset) {\n  return { geometry: stalactiteGeometry(offset), position: stalactitePosition(offset), colour: earthColour() }\n}\n\nfunction stalactiteGeometry(offset) {\n\n  const stalactiteMax = {max: 1.3 - offset, min: 1 - offset}\n  const stalactiteMin = {max: 0.8 - offset, min: 0.01}\n  const stalactiteDepth = {max: 2.3, min: 1}\n  const stalactiteSegments = {max: 12, min: 6}\n\n  return [\n    randomiser(stalactiteMax),\n    randomiser(stalactiteMin),\n    randomiser(stalactiteDepth),\n    randomiser(stalactiteSegments)\n  ]\n\n}\n\nfunction stalactitePosition(offset) {\n\n  const stalactiteY = {max: 0 + offset, min: 1 + offset }\n  const stalactiteXZ = {max: 0.5, min: -0.5  }\n  return [\n    randomiser(stalactiteXZ),\n    -randomiser(stalactiteY),\n    randomiser(stalactiteXZ)\n  ]\n\n}\n\n\n\n\n\n\n\n/*\n\nOriginal stalactite settings:\n\nEarth disc:\n<cylinderGeometry args={[1.65, 1, 0.68, 9]}  />\n<meshToonMaterial color={'#8a817c'} />\n\nfunction createStalactites() {\n  return [\n    <Stalactite args={[1.6, 0.8, 1, 8]} position={[0.1, -0.28, 0, ]} colour={'#6c757d'}/>,\n    <Stalactite args={[1.3, 0.7, 1, 7]} position={[0.12, -0.5, 0.1]} colour={'#8a817c'} />,\n    <Stalactite args={[1.4, 0.55, 1.3, 4]} position={[-0, -0.7, 0.05]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.3, 2, 8]} position={[0, -0.9, -0.2]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.01, 2, 4]} position={[0, -1.9, -0.5]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.03, 2, 12]} position={[0, -0.9, 1.0]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.2, 1, 8]} position={[-0, -1.3, .40]} colour={'#8a817c'} />,\n    <Stalactite args={[0.7, 0.1, 1, 9]} position={[-0, -1.9, 0.30]} colour={'#6c757d'}/>,\n    <Stalactite args={[0.4, 0.01, 3, 8]} position={[0, -2.3, 0]} colour={'#8a817c'} />,\n\n\n\n  ]\n}\n*/\n","\n// Variants not yet in use\n// Will be collection of (to begin with) available colours, stored as hex strings, for that genus of seed\n\nexport default class Seed {\n  constructor(userId, type, quantity = 0) {\n    this.userId = userId\n    this.type = type\n    this.quantity = quantity\n//    this.variants = []\n\n  }\n}\n","import React, { Component } from 'react';\nimport { WorldData, newSeeds, Balloon } from '../gameObjects'\nimport { setDate } from '../functions'\n\n\nimport api from '../api';\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputEmail = async event => {\n        const email = event.target.value\n        this.setState({ email })\n    }\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    // Chain API/login as follows (??) createUser.Then.addBalloons.Then.setUser\n\n    handleAddUser = async () => {\n        const { name, email, password } = this.state\n        let userId = \"\"\n        const newWorld = new WorldData()\n        const world = JSON.stringify(newWorld)\n        const worldChosen = false\n        const date = setDate()\n        const lastLogin = date.stamp\n        const newUser = true\n        const payload = { name, email, password, world, worldChosen, lastLogin, newUser }\n        console.log(payload)\n        let validUsername = false\n\n        await api.getUser(name).then(res => {\n          res.status === 204 ? validUsername = true : window.alert(`Username taken`)\n        })\n\n        this.setState({\n            name: '',\n            email: '',\n            password: '',\n        })\n\n        if (validUsername) {\n\n        await api.addUser(payload).then(res => {\n            window.alert(`User added`)\n            this.props.setUser(name, res.data.id, newWorld, false, lastLogin)\n            userId = res.data.id\n        })\n        console.log(\"ID is\")\n        console.log(userId)\n        let balloonOne = new Balloon(userId, \"generic_plant\", 3, `Welcome! 3 generic_plant ${'\\n'} seeds - go plant!`)\n        let balloonTwo = new Balloon(userId, \"tulip\", 3, `Welcome! 3 tulip ${'\\n'} seeds - get planting!`)\n        console.log(balloonOne)\n        await api.addBalloons(balloonOne).then(res => {\n          console.log(\"Welcome balloon one added\")\n        })\n        await api.addBalloons(balloonTwo).then(res => {\n          console.log(\"Welcome balloon two added\")\n        })\n\n      }\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Sign Up</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Email: </Label>\n                <InputText\n                    type=\"text\"\n                    value={email}\n                    onChange={this.handleChangeInputEmail}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleAddUser}>Sign Up</Button>\n                <CancelButton href={'/movies/list'}>Cancel</CancelButton>\n            </Wrapper>\n        )\n    }\n}\n\nexport default SignUp\n","import React, { Component } from 'react';\nimport api from '../api';\n\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\n\nclass LogIn extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    handleGetUser = async () => {\n\n        await api.getUser(this.state.name).then(res => {\n          console.log(res)\n            if (res.status === 204) {\n              window.alert(`No user found`)\n            } else if (this.state.password === res.data.data.password) {\n              const name = res.data.data.name\n              const id = res.data.data._id\n              const world = JSON.parse(res.data.data.world)\n              const worldChosen = res.data.data.worldChosen\n              const lastLogin = res.data.data.lastLogin\n              const newUser = false\n\n              window.alert(`Welcome back ${name}`)\n              this.props.setUser(name, id, world, worldChosen, lastLogin, newUser)\n            } else {\n              window.alert(`Incorrect password`)\n            }\n        })\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Log In</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleGetUser}>Log In</Button>\n            </Wrapper>\n        )\n    }\n}\n\nexport default LogIn\n","import '../style/App.css';\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { addSeeds, createPlants, createPlantComponent, createId, addPlant, loadPlants, loadSeeds, updateSeed, calculateAchievement, saveGarden, sendBalloon, createPlant, loadBalloons, makeFriendRequest, makeFriends, sample } from '../functions'\nimport { Balloon, Plant } from '../gameObjects'\nimport { Canvas } from \"@react-three/fiber\";\nimport { Garden, Camera, Sun, World, Firmament, Friends, Clouds, Balloons, SeedBox, IntroBalloons } from '../components';\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\n\n// REFACTOR: avoid assiging state from index as state here (eg useState(props.seeds) - leads to confusion and makes it harder to troubleshoot\n// This affects garden and seeds currently, which are loaded via login, passed to state in index, then passed here where they are updated and saved\n\nfunction SeedBank(props) {\n\n  const [plants, setPlants] = useState([]) //  an array of plant components\n  const [seeds, setSeeds] = useState([]) //  an array of the player's available seeds\n  const [chosenSeed, setChosenseed] = useState(\"\") // contains the type of seed if chosen, or null if no seed is currently selected\n  const [seedIndex, setSeedindex] = useState(null) //  the index within seeds of the chosenSeed\n  const [balloons, setBalloons] = useState([])\n\n  // useEffect Hooks run after all the other code, and are then called in order\n\n  // This loads the seeds from the DB - it does it only once\n  useEffect(() => {\n    loadSeeds(props.id).then(data => setSeeds(data))\n  }, [])\n\n  // This useEffect runs when seeds change\n  useEffect(() => {\n    console.log(\"USE EFFECT SEEDS!\")\n    console.log(\"UPDATED SEEDS ARE:\")\n    console.log(seeds)\n  }, [seeds])\n\n\n  // This loads the plants from the DB - it does it only once\n  useEffect(() => {\n    loadPlants(props.id).then(data => setPlants(createPlants(data)))\n  }, [])\n\n\n\n\n\n  // This useEffect runs when plant is changed\n\n  useEffect(() => {\n    console.log(\"USE EFFECT PLANTS!\")\n    console.log(\"NOW CHECKING ACHIEVEMENTS\")\n    console.log(plants.length)\n  //  saveGarden(props.id, plants, props.world, props.worldChosen)\n    plants.length % 5 === 0 && plants.length !== 0 ? checkAchievements() : console.log(false)\n  }, [plants])\n\n\n  const sowPlant = ( event ) => {\n    if (chosenSeed) {\n      console.log(\"SOW PLANT\")\n      const position = [event.point.x, event.point.y, event.point.z]\n      const plant = new Plant(props.id, position, chosenSeed)\n      const plantComponent = createPlantComponent(plant)\n      setPlants( (prev) => {\n        return [plantComponent, ...prev]\n      })\n      removeSeed()\n      addPlant(plant)\n    }\n  }\n\n  const removeSeed = () => {\n    console.log(\"REMOVE SEED\")\n    setChosenseed(\"\")\n    updateSeeds(-1, chosenSeed)\n    console.log(seeds)\n  }\n\n  const selectSeed = (selectedSeed, index) => {\n    const seed = seeds[index]\n    if (seeds[index].quantity > 0) {\n      setChosenseed(selectedSeed)\n      setSeedindex(index)\n    }\n  }\n\n  const updateSeeds = (increment, type) => {\n    console.log(\"UPDATE SEEDS...\")\n    const index = seeds.findIndex(seed => seed.type === type)\n    if (index === -1) {\n      console.log(\"NEW SEED in UPDATE SEEDS\")\n      console.log(\"adding newSeed \" + type)\n      setSeeds( (prev) => {\n        return [...prev, {type: type, quantity: increment}]\n      })\n      addSeeds(props.id, type, increment)\n    } else {\n      console.log(\"INCREMENT SEEDS\")\n      let amendedSeed = seeds[index]\n      console.log(amendedSeed)\n      amendedSeed.quantity += increment\n      setSeeds( (prev) => {\n        return [...prev.filter(seed => seed.type !== type), amendedSeed]\n      })\n      updateSeed(props.id, amendedSeed)\n    }\n    setSeedindex(null)\n  }\n\n\n\n  const checkAchievements = () => {\n    console.log(\"CHECK ACHIEVEMENTS\")\n    let achievementCount = plants.length / 5\n    let startingSeeds = 2\n    if (seeds.length < achievementCount + startingSeeds) {\n      const newSeed = calculateAchievement(seeds, props.id, plants.length)\n      if (newSeed !== null ) { updateSeeds(0, newSeed.type) }\n      }\n    }\n\n  const sendFriendRequest = (sentence) => {\n    makeFriendRequest(props.id, props.userName, sentence, props.world)\n  }\n\n  const acceptFriend = (friendName) => {\n    makeFriends(props.id, props.userName, friendName, props.world)\n  }\n\n  const sendPlant = (friendName, friendId) =>{\n    if (chosenSeed) {\n      const message = `${props.userName} sent you ${'\\n'} a ${chosenSeed} seed!`\n      sendBalloon(friendId, chosenSeed, 1, message, props.userName)\n      console.log(`Sending ${chosenSeed} to ${friendName} ${friendId}`)\n      removeSeed()\n    } else {\n      console.log(\"No seed selected\")\n    }\n\n  }\n\n  const buyBalloon = (colour) => {\n    const seed = sample(seeds)\n    const message = `Bought: ${seed.type} x 3!`\n    sendBalloon(props.id, seed.type, 3, message, \"SeedBank\", colour)\n  }\n\n\n\n  return (\n  <div className=\"App\">\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n      <Garden\n      friend={false}\n      sowPlant={sowPlant}\n      position={[0, 0, 0]}\n      world={props.world}\n      seeds={seeds}\n       />\n      {plants}\n      <Sun />\n      <Firmament />\n      <Friends sendPlant={sendPlant} userId={props.id}/>\n     </Suspense>\n     {props.worldChosen ?\n       <>\n       <Balloons\n        updateSeeds={updateSeeds}\n        acceptFriend={acceptFriend}\n        userId={props.id}\n        today={props.today}\n        lastLogin={props.lastLogin}\n        seeds={seeds} />\n       <Clouds\n        seeds={seeds}\n        chosenSeed={chosenSeed}\n        buyBalloon={buyBalloon}\n        position={[0, -0.8, 1]}\n        sendFriendRequest={sendFriendRequest}\n        selectSeed={selectSeed} />\n        </> :\n        < IntroBalloons\n          saveWorld={props.saveWorld}\n          newWorld={props.newWorld}\n        /> }\n    </Canvas>\n  </div>\n  );\n}\n\nexport default SeedBank;\n","import {createPlantComponent } from './'\n\n// creates an array of plant components to initialise the plant state array in SeedBank.jsx\n\nexport default function createPlants(plants) {\n  let plantCollection = []\n  for (let index = 0; index < plants.length; index++) {\n    let plant = plants[index]\n    plantCollection.push(createPlantComponent(plant))\n  }\n  return plantCollection\n}\n","import React from 'react'\nimport { WorldData } from '../gameObjects'\nimport { saveGarden, setDate } from '../functions'\n\n\nimport './App.css';\n\n\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { NavBar } from '../components'\nimport { SignUp, LogIn, SeedBank } from '../pages'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {\n        userName: \"\",\n        id: 0,\n        world: {},\n        chosenWorld: false,\n        lastLogin: \"\",\n        newUser: true\n      }\n      this.setUser = this.setUser.bind(this)\n      this.newWorld = this.newWorld.bind(this)\n      this.saveWorld = this.saveWorld.bind(this)\n      this.connecToServer = this.connecToServer.bind(this)\n    }\n\n    componentDidMount() {\n      this.connecToServer();\n      }\n\n    connecToServer() {\n       fetch('/');\n     }\n\n\n    setUser(userName, id, world, worldChosen, lastLogin, newUser) {\n      this.setState({\n        userName: userName,\n        id: id,\n        world: world,\n        worldChosen: worldChosen,\n        lastLogin: lastLogin,\n        today: setDate().stamp,\n        newUser: newUser\n      })\n        }\n\n    newWorld() {\n      const newWorld = new WorldData()\n      this.setState({\n        world: newWorld\n      })\n    }\n\n    saveWorld() {\n      this.setState({\n        worldChosen: true\n      })\n      saveGarden(this.state.id, this.state.world, true)\n    }\n\n\n\n    render() {\n    return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n        <Router>\n            <NavBar user={this.state.userName} setUser={this.setUser} />\n          </Router>\n          {this.state.userName ?\n            <SeedBank\n              id={this.state.id}\n              userName={this.state.userName}\n              newWorld={this.newWorld}\n              world={this.state.world}\n              worldChosen={this.state.worldChosen}\n              saveWorld={this.saveWorld}\n              lastLogin={this.state.lastLogin}\n              today={this.state.today}\n            /> :\n            <div>\n              <LogIn setUser={this.setUser} />\n              <SignUp setUser={this.setUser} />\n            </div> }\n    </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}