{"version":3,"sources":["api/index.js","gameObjects/GenericPlant.js","functions/SetDate.js","components/Grass.jsx","components/World.jsx","components/Plant.jsx","gameObjects/GetSeed.js","components/Seeds.jsx","components/Garden.jsx","components/Camera.jsx","components/Sun.jsx","components/Firmament.jsx","components/SkyBox.jsx","components/Worlds.jsx","images/seedbankProto.png","components/Logo.jsx","components/Links.jsx","components/NavBar.jsx","functions/ParseGarden.js","functions/CalculateDays.js","functions/SaveGarden.js","functions/CreateId.js","gameObjects/WorldData.js","functions/Sample.js","gameObjects/FakeWorld.js","pages/SignUp.jsx","pages/LogIn.jsx","pages/SeedBank.jsx","functions/CreatePlant.js","app/index.js","index.js"],"names":["api","axios","create","baseURL","apis","addUser","payload","post","getUser","name","get","updateGarden","id","garden","put","GenericPlant","this","type","bloom","leafColour","stemColour","flowerColour","setDate","date","Date","day","getDate","month","getMonth","year","getFullYear","stamp","Grass","props","mesh","useRef","useState","setHover","ref","scale","onClick","event","sowPlant","onPointerOver","onPointerOut","args","color","createStalactites","world","createdStalactites","index","stalactites","length","stalactite","push","Stalactite","geometry","position","colour","createId","top","depth","sections","stopPropagation","handleClick","World","buildPlant","console","log","x","y","z","seed","getSeed","growth","stemLength","plant","Base","Stem","Flower","Plant","SeedButton","styled","button","Panel","div","Seeds","selectSeed","Garden","camera","lookat","fallback","plants","Firmament","extend","OrbitControls","Camera","useThree","domElement","gl","controls","useFrame","state","current","update","autoRotate","autoRotateSpeed","enabled","Sun","sunRef","intensity","Sky","turbidity","distance","sunPosition","inclination","elevation","exposure","mieDirectionalG","mieCoefficient","rayleigh","azimuth","SkyBox","WorldButton","newWorld","saveWorld","Wrapper","a","attrs","className","Logo","href","src","logo","height","alt","Component","Links","Fragment","to","user","Nav","nav","NavBar","setUser","parseGarden","parsedGarden","today","parsedPlant","calculateGrowth","key","plantDate","days","start","end","date1","diffInTime","getTime","Math","round","calculateDays","saveGarden","chosen","savedGarden","extractPlants","JSON","stringify","worldChosen","then","res","extractedPlants","savedPlant","uuidv4","WorldData","generateStalactites","offset","generateStalactite","terrainRandomiser","range","random","max","min","earthColour","array","floor","stalactiteGeometry","stalactitePosition","stalactiteMin","stalactiteY","stalactiteXZ","Title","h1","Label","label","InputText","input","Button","CancelButton","SignUp","handleChangeInputName","target","value","setState","handleChangeInputEmail","email","handleChangeInputPassword","password","handleAddUser","window","alert","data","onChange","LogIn","handleGetUser","_id","Object","assign","parse","SeedBank","setPlants","setSeed","useEffect","newPlant","point","plantData","createPlant","prev","selectedSeed","Worlds","App","userName","chosenWorld","bind","connecToServer","fetch","style","width","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91687240.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: \"/api\",\n})\n\nexport const addUser = payload => api.post(`/user`, payload)\nexport const getUser = name => api.get(`/user/${name}`)\nexport const updateGarden = (id, garden) => api.put(`/user/${id}`, garden)\n\n\nconst apis = {\n    addUser,\n    getUser,\n    updateGarden\n}\n\nexport default apis\n","\nexport default class GenericPlant {\n\n      constructor() {\n        this.type = \"generic_plant\"\n        this.bloom = 1\n        this.leafColour = '#ff006e'\n        this.stemColour = '#ffbe0b'\n        this.flowerColour = '#55dde0'\n      }\n}\n","\n\n// creates a date object that contains day, month, year and stamp in ISO format\n\nexport default function setDate() {\n  const date = new Date()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n  const stamp = `${year}/${month}/${day}`\n  return {year: year, month: month, day: day, stamp: stamp }\n}\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\n\n\n\n// The plane on which plants grow\n\nfunction Grass(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => props.sowPlant(event)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={'#a7c957'} />\n    </mesh>\n  )\n}\n\nexport default Grass\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { createId } from '../functions'\nimport { Grass } from './'\nimport * as THREE from \"three\";\n\n\n// The plane on which plants grow\n\nfunction World(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      >\n      {createStalactites(props)}\n    </mesh>\n    </>\n  )\n}\n\nfunction createStalactites(props) {\n  const world = props.world\n  const createdStalactites = []\n\n  for (let index = 0; index < world.stalactites.length; index++) {\n    const stalactite = world.stalactites[index]\n    createdStalactites.push( <Stalactite key={createId()} sowPlant={props.sowPlant} args={stalactite.geometry} position={stalactite.position} colour={stalactite.colour} />)\n  }\n\n  return createdStalactites\n}\n\nfunction Stalactite(props) {\n  const mesh = useRef()\n  let [top, bottom, depth, sections] = props.args\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n  }\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={1}\n      onClick={(event) => handleClick(event)}\n      >\n      <cylinderGeometry args={props.args} />\n      <meshToonMaterial color={props.colour}  />\n      <Grass sowPlant={props.sowPlant} position={[0, depth/2, 0]} args={[top, top, 0.01, sections]} />\n    </mesh>\n    </group>\n  )\n}\n\nexport default World\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { createId } from '../functions'\nimport { getSeed } from '../gameObjects'\n\n\n// Creates a Plant based on the props that it receives\n\nfunction Plant(props) {\n  // Retrieve the x, y and z position of the plant\n\n  const {x, y, z} = props\n\n  const mesh = useRef()\n\n  // Clicking on a plant should bring up its info\n  // stopPropogation tells Three.js to only return info about the first mesh clicked\n\n  const handleClick = (event) => {\n    event.stopPropagation()\n    console.log(\"This plant is:\")\n    console.log(props)\n  }\n\n\n  return (\n    <group>\n    <mesh\n      {...props}\n      ref={mesh}\n      onClick={(event) => handleClick(event)}\n      scale={0.2}\n    //  onPointerOver={(event) => setHover(true)}\n    //  onPointerOut={(event) => setHover(false)}\n    >\n      {buildPlant(props)}\n    </mesh>\n    </group>\n\n  )\n}\n\n// buildPlant constructs an array of plant components that can be rendered\n// Refactoring: remove magic numbers\n// Extra features: randomise size and position of components (eg leaves)\n\nfunction buildPlant(props) {\n\n  console.log(\"Plant props\")\n  const [x, y, z] = props.position\n  console.log(x)\n  console.log(y)\n  console.log(z)\n  const {bloom, leafColour, stemColour, flowerColour} = getSeed(props.type)\n  let growth = props.growth\n\n  // Stop plant from growing any further if it's in bloom\n\n  if (growth >= bloom) {\n    growth = bloom\n  }\n\n  // the length of the stem is based on the plant's growth\n\n  const stemLength = growth/12\n\n  // push the Base and Stem into the plant array\n\n  let plant = [\n    <Base key={createId()} />,\n    <Stem key={createId()} stemColour={stemColour} stemLength={stemLength}/>,\n  ]\n\n  // Add leaves relative to the plant's growth level\n\n  // for (let leaves = 0; leaves <= growth; leaves++) {\n  //   plant.push(\n  //   <Leaf key={createId()} color={leafColour} position={[0.02, 0.1 + (leaves/18), 0.05]}/>,\n  //   <Leaf key={createId()} color={leafColour} position={[-0.02, 0.1 + (leaves/18), -0.05]}/>,\n  // )\n  // }\n\n  // Add a flower to the array if it's in bloom\n\n  if (growth >= bloom) {\n  plant.push(\n    <Flower key={createId()} color={flowerColour} position={[0, 0.1 + (growth/11), 0]} />\n  )\n}\n\n  return plant\n\n}\n\nfunction Base(props) {\n\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n     >\n    <dodecahedronGeometry args={[0.035, 2]} />\n    <meshToonMaterial color={'#947352'} />\n  </mesh>\n)\n\n\n}\n\nfunction Stem(props) {\n  const mesh = useRef()\n\n  return (\n  <mesh\n    {...props}\n    ref={mesh}\n    >\n    <cylinderGeometry args={[0.01, 0.03, 0.3 + props.stemLength, 12]} />\n    <meshToonMaterial color={props.stemColour} />\n    </mesh>\n  )\n}\n\n\nfunction Leaf(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <cylinderGeometry args={[0.02, 0.05, 0.02, 6]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\nfunction Flower(props) {\n  const mesh = useRef()\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh} >\n      <dodecahedronGeometry args={[0.06]} />\n      <meshToonMaterial color={props.color} />\n    </mesh>\n\n  )\n\n}\n\n\n\nexport default Plant\n","import { GenericPlant } from './'\n\n export default function getSeed(seed) {\n\n   switch(seed) {\n     case \"generic_plant\":\n        return {bloom: 1, leafColour: '#377F34', stemColour: '#499B4A', flowerColour: '#832134'}\n     case \"tulip\":\n        return {bloom: 2, leafColour: '#2D5A27', stemColour: '#567d46', flowerColour: '#ff878d'}\n\n     default:\n      return\n   }\n\n}\n","import styled from 'styled-components';\nimport React, { Component } from 'react';\n\n// Generates a panel that contains buttons of available Seeds\n// PROTOTYPE ONLY: need to design an interface that coould contain an indefinite number of seeds or objects\n\nconst SeedButton = styled.button`\ncolor: palevioletred;\nfont-size: 1em;\nmargin: 1em;\npadding: 0.25em 1em;\nborder: 2px solid palevioletred;\nborder-radius: 3px;\n`;\n\nconst Panel = styled.div`\n  background-color: lightgrey;\n  `;\n\n\nfunction Seeds(props) {\n\n  return (\n    <Panel>\n    <SeedButton onClick={(event) => props.selectSeed(\"generic_plant\")}> Generic Plant </SeedButton>\n    <SeedButton onClick={(event) => props.selectSeed(\"tulip\")}> Tulip </SeedButton>\n    </Panel>\n  )\n}\n\nexport default Seeds\n","import '../style/App.css';\nimport api from '../api';\nimport React, { useRef, useState, useMemo, useEffect, Suspense } from \"react\";\nimport { Canvas, useFrame, extend } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { Grass, Plant, Camera, Sun, SkyBox, Seeds, World, Firmament } from '../components';\nimport { Sky } from '@react-three/drei';\nimport { setDate, parseGarden, saveGarden, createId } from '../functions'\nimport styled from 'styled-components';\nimport { EffectComposer, BrightnessContrast, Bloom, GodRays, Pixelation } from '@react-three/postprocessing'\nimport { BlurPass, BlendFunction, Resizer, KernelSize } from 'postprocessing'\n\n\n// Garden displays \"the world\", rendering the sun, the sky, the grass and plants\n// Receives instructions/props from the SeedBank page\n\nfunction Garden(props) {\n\n  return (\n    <Canvas id=\"canvas\" camera={{ position: [0, 2, 3.5], lookat: [0, 0, 0] }}>\n      <Camera />\n      <Suspense fallback={console.log(\"loading\")}>\n       <World sowPlant={props.sowPlant} position={[0, 0, 0]} world={props.world} />\n      {props.plants}\n     </Suspense>\n     <Sun />\n     <Firmament />\n    </Canvas>\n  )\n\n}\n\nexport default Garden\n","import { extend, useThree, useFrame } from \"@react-three/fiber\";\nimport React, { useRef } from \"react\";\nimport { OrbitControls } from 'three-stdlib';\nextend({ OrbitControls });\n\n\nconst Camera = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls component.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return <orbitControls\n          ref={controls}\n          position={[0, -10, 0]}\n          args={[camera, domElement]}\n          autoRotate={true}\n          autoRotateSpeed={0.2}\n          enabled={true}\n          />;\n};\n\nexport default Camera\n","import { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useRef } from 'react';\nimport { EffectComposer, GodRays } from \"@react-three/postprocessing\";\nimport { BlendFunction, Resizer, KernelSize } from \"postprocessing\";\nimport * as THREE from \"three\";\n\n// directionaLight is Three.js's daylight equivalent\n// values are arbitraty for now\n\nfunction Sun(props) {\n  const mesh = useRef()\n  const sunRef = useRef()\n\n  return (\n  <group>\n    <mesh\n      ref={sunRef}\n      {...props}\n      >\n    <directionalLight position={[0, 0.5, 1]} intensity={0.7} />\n    </mesh>\n\n  </group>\n  )\n}\n\nexport default Sun\n","import { Sky } from '@react-three/drei'\n\nexport default function Firmament(props) {\n  return (\n    <Sky\n      turbidity={0.01}\n      distance={450000} // Camera distance (default=450000)\n      sunPosition={[0, 1, 0]} // Sun position normal (defaults to inclination and azimuth if not set)\n      inclination={0.47} // Sun elevation angle from 0 to 1 (default=0)\n      elevation={0.6}\n      exposure={0.3}\n      mieDirectionalG={0.04}\n      mieCoefficient={0.0045}\n      rayleigh={0.1}\n      azimuth={0.6} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n      {...props} // All three/examples/jsm/objects/Sky props are valid\n    />  )\n}\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\n\n// Not yet in use\n// In theory, this will be a cube/sphere that surrounds the garden\n// Sky images or shifting gradients can be projected on the cube\n\nfunction SkyBox(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => (mesh.current.rotation.y += 0.002))\n\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      >\n      <boxGeometry args={[4, 4, 4]}  />\n      <meshToonMaterial alpha={true} color={'#87CEEB'} />\n    </mesh>\n  )\n}\n\nexport default SkyBox\n","import styled from 'styled-components';\nimport React, { Component } from 'react';\n\n// Generates a panel that contains buttons of available Seeds\n// PROTOTYPE ONLY: need to design an interface that coould contain an indefinite number of seeds or objects\n\nconst WorldButton = styled.button`\ncolor: palevioletred;\nfont-size: 1em;\nmargin: 1em;\npadding: 0.25em 1em;\nborder: 2px solid palevioletred;\nborder-radius: 3px;\n`;\n\nconst Panel = styled.div`\n  background-color: lightgrey;\n  `;\n\n\nfunction Seeds(props) {\n\n  return (\n    <Panel>\n    <WorldButton onClick={props.newWorld}> New World </WorldButton>\n    <WorldButton onClick={props.saveWorld}> Save World </WorldButton>\n  </Panel>\n  )\n}\n\nexport default Seeds\n","export default __webpack_public_path__ + \"static/media/seedbankProto.6cdc7966.png\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport logo from '../images/seedbankProto.png';\n\nconst Wrapper = styled.a.attrs({\n    className: 'navbar-brand',\n})``\n\nclass Logo extends Component {\n    render() {\n        return (\n            <Wrapper href=\"https://example.com\">\n                <img src={logo} height=\"50\" alt=\"seedbank\" />\n            </Wrapper>\n        )\n    }\n}\n\nexport default Logo\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Collapse = styled.div.attrs({\n    className: 'collpase navbar-collapse',\n})``\n\nconst List = styled.div.attrs({\n    className: 'navbar-nav mr-auto',\n})``\n\nconst Item = styled.div.attrs({\n    className: 'collpase navbar-collapse',\n})``\n\nclass Links extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Link to=\"/\" className=\"navbar-brand\">\n                    SeedBank\n                </Link>\n                    <Link to=\"/\" className=\"navbar-brand\">\n                     { this.props.user }\n                    </Link>\n              </React.Fragment>\n        )\n    }\n}\n\nexport default Links\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport Logo from './Logo';\nimport Links from './Links';\n\nconst Container = styled.div.attrs({\n    className: 'container',\n})``\n\nconst Nav = styled.nav.attrs({\n    className: 'navbar navbar-expand-lg navbar-dark bg-dark',\n})`\n    margin-bottom: 20 px;\n`\n\nclass NavBar extends Component {\n    render() {\n        return (\n                <Nav height=\"50%\">\n                    <Logo />\n                    <Links user={this.props.user} setUser={this.props.setUser} />\n                </Nav>\n        )\n    }\n}\n\nexport default NavBar\n","import { Plant } from '../components'\nimport { setDate, calculateDays } from '../functions'\nimport { GenericPlant } from '../gameObjects'\n\n// Reads a saved Garden and creates an array of plants ready to render\n\nexport default function parseGarden(garden) {\n  let parsedGarden = []\n  const today = setDate(Date()).stamp\n  for (let plant = 0; plant < garden.length; plant ++ ) {\n    const parsedPlant = garden[plant]\n    const growth = calculateGrowth(parsedPlant.date, today)\n    parsedGarden.push(<Plant key={parsedPlant.key} growth={growth} date={parsedPlant.date} position={parsedPlant.position} type={parsedPlant.type}/>)\n  }\n  console.log(parsedGarden)\n  return parsedGarden\n}\n\nfunction calculateGrowth(plantDate, today) {\n  console.log(\"Plant date is\")\n  console.log(plantDate.stamp)\n  console.log(\"Today is\")\n  console.log(today)\n  const days = calculateDays(plantDate.stamp, today)\n  console.log(`${days} days have passed`)\n  return days\n}\n\n\n\n\n//module.exports = parseGarden;\n","\n// calculates the difference in days between two dates using ISO strings for start and end\n\nexport default function calculateDays(start, end) {\n    const date1 = new Date(start);\n    const date2 = new Date(end);\n\n    // One day in milliseconds\n    const oneDay = 1000 * 60 * 60 * 24;\n\n    // Calculating the time difference between two dates\n    const diffInTime = date2.getTime() - date1.getTime();\n    console.log(\"Time diff\")\n    console.log(diffInTime)\n\n    // Calculating the no. of days between two dates\n    const diffInDays = Math.round(diffInTime / oneDay);\n\n    return diffInDays;\n}\n","import api from '../api';\nimport { WorldData } from '../gameObjects'\n\n// strips out react components from the state garden array and saves plant props as an object that's easy to parse\n// Needs error handling!\n\n\nexport default async function saveGarden(id, plants, newWorld, chosen){\n  let savedGarden = extractPlants(plants)\n  const garden = {\"garden\" : savedGarden}\n  const world = {\"world\" : JSON.stringify(newWorld)}\n  const worldChosen = {\"worldChosen\" : chosen}\n  const payload = {garden, world, worldChosen}\n  console.log(\"PAYLOAD\")\n  console.log(payload)\n  console.log(worldChosen)\n  console.log(\"Attempting to save garden\")\n  await api.updateGarden(id, payload).then(res => {\n        console.log('Garden updated successfully')\n    })\n  console.log(\"SAVED GARDEN\")\n  console.log(savedGarden)\n}\n\nfunction extractPlants(plants) {\n  let extractedPlants = []\n  for (let plant = 0; plant < plants.length; plant ++) {\n    const key = plants[plant].key\n    const parsedPlant = plants[plant].props\n    const savedPlant = {key: key, growth: parsedPlant.growth, date: parsedPlant.date, position: parsedPlant.position, type: parsedPlant.type}\n    extractedPlants.push(savedPlant)\n  }\n  return extractedPlants\n}\n","\n// generates a unique ID number \n\n\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport default function createId() {\n  return uuidv4()\n}\n","import {sample} from '../functions'\n\n\nconst worldRadiusTop = 2\nconst worldRadiusBottom = 1\nconst worldScaler = 1.1\nconst discHeight = 0.3\nconst rockHeight = 0.6\nconst stalactiteCount = 10\n\nexport default class WorldData {\n\n  constructor(stalactites = generateStalactites())  {\n    this.stalactites = stalactites\n  }\n\n}\n\n\n\nfunction generateStalactites() {\n  let stalactites = []\n  let offset = 0\n  for (let stalactite = 0; stalactite < stalactiteCount; stalactite++) {\n    stalactites.push(generateStalactite(offset))\n    offset += 0.1\n  }\n  return stalactites\n}\n\nfunction terrainRandomiser(range) {\n  return Math.random() * (range.max - range.min) + range.min\n}\n\nfunction earthColour() {\n  const colours = [\n    '#6C6460',\n    '#8a817c',\n    '#6c757d',\n  ]\n\n    return sample(colours)\n}\n\nfunction generateStalactite(offset) {\n  return { geometry: stalactiteGeometry(offset), position: stalactitePosition(offset), colour: earthColour() }\n}\n\nfunction stalactiteGeometry(offset) {\n\n  const stalactiteMax = {max: 2 - offset, min: 1 - offset}\n  const stalactiteMin = {max: 0.8 - offset, min: 0.01}\n  const stalactiteDepth = {max: 2.3, min: 1}\n  const stalactiteSegments = {max: 12, min: 6}\n\n  return [\n    terrainRandomiser(stalactiteMax),\n    terrainRandomiser(stalactiteMin),\n    terrainRandomiser(stalactiteDepth),\n    terrainRandomiser(stalactiteSegments)\n  ]\n\n}\n\nfunction stalactitePosition(offset) {\n\n  const stalactiteY = {max: 0 + offset, min: 1 + offset }\n  const stalactiteXZ = {max: 0.5, min: -0.5  }\n  return [\n    terrainRandomiser(stalactiteXZ),\n    -terrainRandomiser(stalactiteY),\n    terrainRandomiser(stalactiteXZ)\n  ]\n\n}\n\n\n\n\n\n\n\n/*\n\nOriginal stalactite settings:\n\nEarth disc:\n<cylinderGeometry args={[1.65, 1, 0.68, 9]}  />\n<meshToonMaterial color={'#8a817c'} />\n\nfunction createStalactites() {\n  return [\n    <Stalactite args={[1.6, 0.8, 1, 8]} position={[0.1, -0.28, 0, ]} colour={'#6c757d'}/>,\n    <Stalactite args={[1.3, 0.7, 1, 7]} position={[0.12, -0.5, 0.1]} colour={'#8a817c'} />,\n    <Stalactite args={[1.4, 0.55, 1.3, 4]} position={[-0, -0.7, 0.05]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.3, 2, 8]} position={[0, -0.9, -0.2]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.01, 2, 4]} position={[0, -1.9, -0.5]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.03, 2, 12]} position={[0, -0.9, 1.0]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.2, 1, 8]} position={[-0, -1.3, .40]} colour={'#8a817c'} />,\n    <Stalactite args={[0.7, 0.1, 1, 9]} position={[-0, -1.9, 0.30]} colour={'#6c757d'}/>,\n    <Stalactite args={[0.4, 0.01, 3, 8]} position={[0, -2.3, 0]} colour={'#8a817c'} />,\n\n\n\n  ]\n}\n*/\n","\n\nexport default function sample(array) {\n  return array[Math.floor(Math.random() * array.length)];\n\n}\n","import {sample} from '../functions'\n\n\nconst worldRadiusTop = 0\nconst worldRadiusBottom = 0\nconst worldScaler = 0\nconst discHeight = 0\nconst rockHeight = 0\n\nexport default class FakeWorld {\n\n  constructor() {\n    this.grass = { geometry: [worldRadiusTop, worldRadiusBottom, discHeight, 25], colour: '#5AAB61'} // cylinder: [radiusTop, radiusBottom, height, radialSegments]\n    this.earth = { geometry: [worldRadiusTop * worldScaler, worldRadiusBottom, rockHeight, 9], colour: '#8a817c' } // cylinder: [radiusTop, radiusBottom, height, radialSegments]\n    this.stalactite1 = { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite2 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite3 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite4 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite5 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite6 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite7 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite8 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite9 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n    this.stalactite10 =  { geometry: [0, 0, 0, 0], position: [0, 0, 0], colour: '#5AAB61'}\n  }\n\n}\n\n\n\n\n\n\n\n/*\n\nOriginal stalactite settings:\n\nEarth disc:\n<cylinderGeometry args={[1.65, 1, 0.68, 9]}  />\n<meshToonMaterial color={'#8a817c'} />\n\nfunction createStalactites() {\n  return [\n    <Stalactite args={[1.6, 0.8, 1, 8]} position={[0.1, -0.28, 0, ]} colour={'#6c757d'}/>,\n    <Stalactite args={[1.3, 0.7, 1, 7]} position={[0.12, -0.5, 0.1]} colour={'#8a817c'} />,\n    <Stalactite args={[1.4, 0.55, 1.3, 4]} position={[-0, -0.7, 0.05]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.3, 2, 8]} position={[0, -0.9, -0.2]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.01, 2, 4]} position={[0, -1.9, -0.5]} colour={'#6c757d'} />,\n    <Stalactite args={[0.4, 0.03, 2, 12]} position={[0, -0.9, 1.0]} colour={'#6c757d'} />,\n    <Stalactite args={[0.8, 0.2, 1, 8]} position={[-0, -1.3, .40]} colour={'#8a817c'} />,\n    <Stalactite args={[0.7, 0.1, 1, 9]} position={[-0, -1.9, 0.30]} colour={'#6c757d'}/>,\n    <Stalactite args={[0.4, 0.01, 3, 8]} position={[0, -2.3, 0]} colour={'#8a817c'} />,\n\n\n\n  ]\n}\n*/\n","import React, { Component } from 'react';\nimport { WorldData } from '../gameObjects'\nimport api from '../api';\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputEmail = async event => {\n        const email = event.target.value\n        this.setState({ email })\n    }\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    handleAddUser = async () => {\n        const { name, email, password } = this.state\n        const newWorld = new WorldData()\n        const world = JSON.stringify(newWorld)\n        const worldChosen = false\n        const payload = { name, email, password, world, worldChosen }\n\n        await api.addUser(payload).then(res => {\n            window.alert(`User added`)\n            this.setState({\n                name: '',\n                email: '',\n                password: '',\n            })\n            console.log(\"Result is\")\n            this.props.setUser(name, res.data.id, [], newWorld, false)\n        })\n\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Sign Up</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Email: </Label>\n                <InputText\n                    type=\"text\"\n                    value={email}\n                    onChange={this.handleChangeInputEmail}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleAddUser}>Sign Up</Button>\n                <CancelButton href={'/movies/list'}>Cancel</CancelButton>\n            </Wrapper>\n        )\n    }\n}\n\nexport default SignUp\n","import React, { Component } from 'react';\nimport { parseGarden } from '../functions'\nimport api from '../api';\nimport {World} from '../gameObjects'\n\nimport styled from 'styled-components';\n\nconst Title = styled.h1.attrs({\n    className: 'h1',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nclass LogIn extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n\n    handleChangeInputPassword = async event => {\n        const password = event.target.value\n        this.setState({ password })\n    }\n\n    handleGetUser = async () => {\n\n        await api.getUser(this.state.name).then(res => {\n          console.log(res)\n            console.log(\"Name is \" + res.data.data.name)\n            if (this.state.password === res.data.data.password) {\n              window.alert(`Logged in`)\n              const name = res.data.data.name\n              const id = res.data.data._id\n              const garden = parseGarden(res.data.data.garden)\n              const world = Object.assign(JSON.parse(res.data.data.world))\n              const worldChosen = res.data.data.worldChosen\n              console.log(\"Loaded world\")\n              console.log(world)\n              this.props.setUser(name, id, garden, world, worldChosen)\n            } else {\n              window.alert(`Incorrect password`)\n            }\n        })\n    }\n\n    render() {\n        const { name, email, password } = this.state\n        return (\n            <Wrapper>\n                <Title>Log In</Title>\n\n                <Label>Name: </Label>\n                <InputText\n                    type=\"text\"\n                    value={name}\n                    onChange={this.handleChangeInputName}\n                />\n\n                <Label>Password: </Label>\n                <InputText\n                    type=\"text\"\n                    value={password}\n                    onChange={this.handleChangeInputPassword}\n                />\n\n                <Button onClick={this.handleGetUser}>Log In</Button>\n            </Wrapper>\n        )\n    }\n}\n\nexport default LogIn\n","import '../style/App.css';\nimport api from '../api';\nimport React, { useRef, useState, useMemo, useEffect, Suspense } from \"react\";\nimport { Canvas, useFrame, extend } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { Grass, Plant, Camera, Sun, SkyBox, Seeds, Garden, Worlds } from '../components';\nimport { setDate, parseGarden, saveGarden, createId, createPlant } from '../functions'\nimport styled from 'styled-components';\nimport { EffectComposer, DepthOfField, Bloom, Noise, Vignette } from 'react-postprocessing'\n\n\n\n// Main page.\n// Displays the Garden and the Seed panel, handles interactions between them and updates the user's garden/seedbank\n\nfunction SeedBank(props) {\n\n\n  const [plants, setPlants] = useState(props.garden)\n  const [seed, setSeed] = useState(null)\n\n  const sowPlant = ( event ) => {\n    if (seed) {\n      const newPlant = createPlant(event, seed)\n      setSeed(null)\n      setPlants( (prev) => {\n        return [newPlant, ...prev]\n      })\n    }\n  }\n\n  const selectSeed = (selectedSeed) => {\n    console.log(selectedSeed)\n    setSeed(selectedSeed)\n    console.log(seed)\n  }\n\n\n\n\n  useEffect(() => {\n    //\n    console.log(\"Calling saveGarden\")\n    saveGarden(props.id, plants, props.world, props.worldChosen)\n  });\n\n\n  return (\n  <div className=\"App\">\n    <Garden plants={plants} world={props.world} sowPlant={sowPlant} />\n    {props.worldChosen ? <Seeds className=\"App-header\" selectSeed={selectSeed} /> : <Worlds className=\"App-header\" newWorld={props.newWorld} saveWorld={ props.saveWorld } />}\n  </div>\n  );\n}\n\nexport default SeedBank;\n","import { setDate, createId } from './'\nimport { Plant } from '../components'\nimport { GenericPlant } from '../gameObjects'\n\n// Creates a new Plant, with a uniqueID, growth initialised at 0 and a new date\n\nexport default function createPlant(event, seed) {\n\n  const position = [event.point.x, event.point.y, event.point.z]\n  const key = createId()\n  const date = setDate()\n  const plantData = new GenericPlant()\n  console.log(\"plantData is:\")\n  console.log(plantData)\n  const newPlant = <Plant key={key} growth={0} date={date} position={position} type={seed} />\n  console.log(\"New Plant\")\n  console.log(newPlant)\n\n  return newPlant\n}\n","import React from 'react'\nimport api from '../api';\nimport { WorldData} from '../gameObjects'\nimport { saveGarden } from '../functions'\n\n\nimport './App.css';\n\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { NavBar, SignUpButton } from '../components'\nimport { SignUp, LogIn, SeedBank } from '../pages'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {\n        userName: \"\",\n        id: 0,\n        garden: [],\n        world: {},\n        chosenWorld: false\n      }\n      this.setUser = this.setUser.bind(this)\n      this.newWorld = this.newWorld.bind(this)\n      this.saveWorld = this.saveWorld.bind(this)\n      this.connecToServer = this.connecToServer.bind(this)\n    }\n\n    componentDidMount() {\n      this.connecToServer();\n      }\n\n    connecToServer() {\n       fetch('/');\n     }\n\n\n    setUser(userName, id, garden, world, worldChosen) {\n      console.log(\"SETTING USER\")\n      console.log(\"WORLD IS\")\n      console.log(world)\n      console.log(\"CHOSEN?\")\n      console.log(worldChosen)\n      this.setState({\n        userName: userName,\n        id: id,\n        garden: garden,\n        world: world,\n        worldChosen: worldChosen\n      })\n      console.log(\"User is \" + this.state.id + \" \" + this.state.userName)\n      console.log(this.state.garden)\n    }\n\n    newWorld() {\n      const newWorld = new WorldData()\n      this.setState({\n        world: newWorld\n      })\n    }\n\n    saveWorld() {\n      this.setState({\n        worldChosen: true\n      })\n      saveGarden(this.state.id, [], this.state.world, true)\n    }\n\n\n    render() {\n    return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n        <Router>\n            <NavBar user={this.state.userName} setUser={this.setUser} />\n          </Router>\n          {this.state.userName ?  <SeedBank id={this.state.id} newWorld={this.newWorld} world={this.state.world} worldChosen={this.state.worldChosen} saveWorld={this.saveWorld} garden={this.state.garden} /> : <div><LogIn setUser={this.setUser} /> <SignUp setUser={this.setUser} /></div> }\n    </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}